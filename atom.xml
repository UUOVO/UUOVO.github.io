<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2024-10-31T09:22:51.423Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Promise/async 与es5总结</title>
    <link href="http://example.com/2024/10/31/node/promise%E5%92%8Casync%E7%9A%84%E6%80%BB%E7%BB%93/"/>
    <id>http://example.com/2024/10/31/node/promise%E5%92%8Casync%E7%9A%84%E6%80%BB%E7%BB%93/</id>
    <published>2024-10-31T09:15:22.585Z</published>
    <updated>2024-10-31T09:22:51.423Z</updated>
    
    <content type="html"><![CDATA[<h2 id="写法不同"><a href="#写法不同" class="headerlink" title="写法不同"></a>写法不同</h2><h3 id="ES5正常写法"><a href="#ES5正常写法" class="headerlink" title="ES5正常写法"></a>ES5正常写法</h3><ul><li>getAjax(url, (res) &#x3D;&gt; {})</li></ul><h3 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h3><ul><li>get(url).then((res) &#x3D;&gt; {})</li></ul><h3 id="async-await"><a href="#async-await" class="headerlink" title="async await"></a>async await</h3><ul><li>(async () &#x3D;&gt; {<br>  let res &#x3D; await get(url)<br>})()</li></ul><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><ul><li>ES5 写法和promise写法，主要区别在写法不同，可以让回调函数，划分出去在.then的函数里执行，是的代码更加另外，也可以将两个不同的参数，可以划分开来写</li><li>async和promise的区别，不在于async和promise的语法糖，这种形式的写法在底层编译之后会自动转化成promise写法</li></ul><h3 id="Promise-实现原理"><a href="#Promise-实现原理" class="headerlink" title="Promise 实现原理"></a>Promise 实现原理</h3><ul><li><p>需要实现的功能</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">resolve, reject</span>) &#123;</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="literal">true</span>) &#123;</span><br><span class="line"><span class="title function_">resolve</span>()</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="title function_">reject</span>()</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> <span class="title class_">LcPromise</span>(fn)</span><br><span class="line">p1.<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">res</span>)&#123;</span><br><span class="line"><span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">style</span>.<span class="property">background</span>=<span class="string">&quot;greenyellow&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;成功的事&quot;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">&#125;)</span><br><span class="line">p1.<span class="title function_">catch</span>(<span class="keyword">function</span>(<span class="params">res</span>)&#123;</span><br><span class="line"><span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">style</span>.<span class="property">background</span>=<span class="string">&quot;blue&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;失败的事&quot;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>传入一个事件函数，不调用，当触发时，才调用</p></li><li><p>p1 Promise对象发送了异步操作，必然会有一个未来事件，在未来执行，这个过程有传入函数对象fn执行。函数fn里必然需要有成功执行和失败执行的函数</p></li><li><p>创建类构造对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">LcPromise</span>&#123;</span><br><span class="line"><span class="comment">// ①指向代码</span></span><br><span class="line"><span class="title function_">constructor</span>(<span class="params">fn</span>) &#123;</span><br><span class="line"><span class="comment">// 将成功的事件函数集成在successList数组里</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">successList</span> = []</span><br><span class="line"><span class="comment">// 将失败的事件函数集成在failList数组里</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">failList</span> = []</span><br><span class="line"><span class="comment">// pending,fullfilled,rejected</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">state</span> = <span class="string">&quot;pending&quot;</span></span><br><span class="line"><span class="comment">// 传入的函数对象（异步操作的函数内容）</span></span><br><span class="line"><span class="title function_">fn</span>(<span class="variable language_">this</span>.<span class="property">resolveFn</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>,<span class="variable language_">this</span>.<span class="property">rejectFn</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>)))</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ②指向代码</span></span><br><span class="line"><span class="title function_">then</span>(<span class="params">successFn,failFn</span>) &#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">typeof</span> successFn == <span class="string">&quot;function&quot;</span>) &#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">successList</span>.<span class="title function_">push</span>(successFn)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">typeof</span> failFn == <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">failFn</span>.<span class="title function_">push</span>(failFn)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span>(failFn)&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">typeof</span> failFn == <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">failList</span>.<span class="title function_">push</span>(failFn)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ③指向代码</span></span><br><span class="line"><span class="title function_">resolveFn</span>(<span class="params">res</span>) &#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">state</span> = <span class="string">&quot;fullfilled&quot;</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">successList</span>.<span class="title function_">forEach</span>(<span class="keyword">function</span> (<span class="params">item, index</span>) &#123;</span><br><span class="line"><span class="comment">// 将成功的事件循环调用</span></span><br><span class="line"><span class="title function_">item</span>(res)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;.<span class="title function_">rejectFn</span>(<span class="params">res</span>) &#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">state</span> = <span class="string">&#x27;rejected&#x27;</span></span><br><span class="line"><span class="comment">// 注册到的失败所有事件进行调用</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">failList</span>.<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params">item,index</span>)&#123;</span><br><span class="line"><span class="title function_">item</span>(res)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">throw</span> <span class="title class_">Error</span>(res)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>构造函数的作用①</p><ul><li>声明成功函数放置的数组对象</li><li>声明失败函数放置的数组对象</li><li>定义初始化状态</li><li>调用传入进行执行异步内容的函数(在未来有成功的结构时调用传入进去的成功函数，在未来失败时调用传入进去的失败函数)</li></ul></li><li><p>将传入成功或者失败时需要调用的函数作用②：</p><ul><li>将成功和失败的函数传入成功成功和失败的数组里</li></ul></li><li><p>定义调用和失败的函数作用③:</p><ul><li>成功时调用成功数组里所有的函数，失败时调用失败数组里所有的函数</li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;写法不同&quot;&gt;&lt;a href=&quot;#写法不同&quot; class=&quot;headerlink&quot; title=&quot;写法不同&quot;&gt;&lt;/a&gt;写法不同&lt;/h2&gt;&lt;h3 id=&quot;ES5正常写法&quot;&gt;&lt;a href=&quot;#ES5正常写法&quot; class=&quot;headerlink&quot; title=&quot;ES5</summary>
      
    
    
    
    <category term="promise" scheme="http://example.com/categories/promise/"/>
    
    
  </entry>
  
  <entry>
    <title>NPM上传包</title>
    <link href="http://example.com/2024/10/31/node/7NPM%E4%B8%8A%E4%BC%A0%E5%8C%85/"/>
    <id>http://example.com/2024/10/31/node/7NPM%E4%B8%8A%E4%BC%A0%E5%8C%85/</id>
    <published>2024-10-31T09:15:22.577Z</published>
    <updated>2024-10-31T09:23:55.848Z</updated>
    
    <content type="html"><![CDATA[<h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><ol><li>创建文件夹<ul><li>写完内容</li></ul></li><li>在该文件夹中打开终端<ul><li>在地址栏中输入cmd回车即可</li></ul></li><li>npm包的初始化</li></ol><ul><li>在终端中输入npm init</li></ul><ol start="4"><li>npm包信息的设置</li></ol><ul><li>就是回答初始化运行的问题</li></ul><ol start="5"><li>注册NPM官网账号</li><li>NPM官网账号需要邮箱验证</li><li>本机登录npm</li></ol><ul><li>在终端输入npm login</li><li>然后输入账号密码</li></ul><ol start="8"><li>发布NPM包</li></ol><ul><li>npm publish</li></ul><p>私网地址<br>A类地址：10.0.0.0 ~ 10.255.255.255<br>B类地址：172.16.0.0 ~ 172.31.255.255<br>C类地址：192.168.0.0 ~ 192.168.255.255</p><h1 id="将本地网址部署到公网上"><a href="#将本地网址部署到公网上" class="headerlink" title="将本地网址部署到公网上"></a>将本地网址部署到公网上</h1><p><a href="https://hsk.oray.com/">花生壳</a><br>可以将私网服务器地址和端口号跟公网固定的IP地址和端口绑定</p><ul><li>注册后要实名认证</li><li>点花生壳，体验版由免费的域名和免费的IP</li><li>运行自己的网站</li><li>然后在花生壳的体验版创建填写应用名称，内网主机的IP地址（通过ipconfig去看）和端口号，然后完成</li><li>下载花生壳软件，安装后打开诊断一下创建的应用确认无误后，点击提供的访问地址就部署完成</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;步骤&quot;&gt;&lt;a href=&quot;#步骤&quot; class=&quot;headerlink&quot; title=&quot;步骤&quot;&gt;&lt;/a&gt;步骤&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;创建文件夹&lt;ul&gt;
&lt;li&gt;写完内容&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;在该文件夹中打开终端&lt;ul&gt;
&lt;li&gt;在地址栏中</summary>
      
    
    
    
    <category term="Node" scheme="http://example.com/categories/Node/"/>
    
    
  </entry>
  
  <entry>
    <title>Node总结</title>
    <link href="http://example.com/2024/10/31/node/6%E6%80%BB%E7%BB%93/"/>
    <id>http://example.com/2024/10/31/node/6%E6%80%BB%E7%BB%93/</id>
    <published>2024-10-31T09:15:22.563Z</published>
    <updated>2024-10-31T09:29:20.703Z</updated>
    
    <content type="html"><![CDATA[<ul><li>服务器：本质上是一台PC主机(linux系统，window系统)，部署了后端语言的执行环境，并且能够长时间提供网络服务</li></ul><h3 id="事件驱动："><a href="#事件驱动：" class="headerlink" title="事件驱动："></a>事件驱动：</h3><ul><li>node本身提供事件对象，帮助我们快速实现订阅者模式，或者观察者模式，或者事件模式</li><li>event.on(‘事件的名称’, () &#x3D;&gt; {订阅的事件}) &#x2F;&#x2F; 事件的订阅</li><li>event.emit(‘事件的名称’) &#x2F;&#x2F; 事件的触发</li></ul><h3 id="读写事件："><a href="#读写事件：" class="headerlink" title="读写事件："></a>读写事件：</h3><ul><li>fs.writefile(‘path’,读取配置,(err,data) &#x3D;&gt; {})</li><li>fs.readFile(‘path’,写入数据,写入配置,() &#x3D;&gt; {})</li></ul><h3 id="读写的promise封装："><a href="#读写的promise封装：" class="headerlink" title="读写的promise封装："></a>读写的promise封装：</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 封装读取的操作</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">fsRead</span> = (<span class="params">url: string</span>) =&gt; &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">fs.<span class="title function_">readFile</span>(url, &#123;<span class="attr">flag</span>: <span class="string">&#x27;r&#x27;</span>, <span class="attr">encoding</span>: <span class="string">&quot;utf-8&quot;</span>&#125;, <span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(!err) &#123;</span><br><span class="line"><span class="title function_">resolve</span>(data)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="title function_">reject</span>(err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;)</span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">// 封装写入的操作</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">fsWrite</span> = (<span class="params">url: string, data: any</span>) =&gt; &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">fs.<span class="title function_">writeFile</span>(url, data, &#123;<span class="attr">flag</span>: <span class="string">&#x27;a&#x27;</span>, <span class="attr">encoding</span>: <span class="string">&#x27;utf-8&#x27;</span> &#125;, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(!err) &#123;</span><br><span class="line"><span class="title function_">resolve</span>()</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="title function_">reject</span>(err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 封装创建目录的函数</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">fsDir</span> = (<span class="params">url</span>) =&gt; &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">fs.<span class="title function_">mkdir</span>(url, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(!err) &#123;</span><br><span class="line"><span class="title function_">resolve</span>()</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;) </span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;fsDir,fsRead, fsWrite&#125;</span><br></pre></td></tr></table></figure><p>使用方式：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">async</span> <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">let</span> data = <span class="keyword">await</span> <span class="title function_">fsRead</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure><h3 id="网络请求数据："><a href="#网络请求数据：" class="headerlink" title="网络请求数据："></a>网络请求数据：</h3><ul><li>request，axios：效率比较高，但局限性比较大</li><li>puppeteer： 效率低，局限性比较小</li><li>重点掌握： 页面的分析，数据存放的位置，以及响应的内容</li></ul><h3 id="网络响应数据："><a href="#网络响应数据：" class="headerlink" title="网络响应数据："></a>网络响应数据：</h3><ul><li><p>http.createServer: 就可以创建1个服务器去监听某个端口，并且通过请求事件来处理每个发送过来的请求</p></li><li><p>server.on(‘request’, (req,res) &#x3D;&gt; {<br>  req: 请求数据都会放在请求对象里<br>  res: 能够做出响应对象<br>})</p></li><li><p>路由：根据不同的路径响应不同的内容</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 循环匹配正则路径</span></span><br><span class="line">res.<span class="property">render</span> = render</span><br><span class="line">res.<span class="title function_">setHeader</span>(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;text/html;charset=UTF-8&quot;</span>)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> key <span class="keyword">in</span> <span class="variable language_">this</span>.<span class="property">reqEvent</span>) &#123;</span><br><span class="line"><span class="keyword">let</span> regStr = key</span><br><span class="line"><span class="keyword">let</span> reg = <span class="keyword">new</span> <span class="title class_">RegExp</span>(regStr, <span class="string">&#x27;igs&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span>(reg.<span class="title function_">test</span>(req.<span class="property">url</span>)) &#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">reqEvent</span>[key](req, res)</span><br><span class="line">resState = <span class="literal">true</span></span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="模板："><a href="#模板：" class="headerlink" title="模板："></a>模板：</h3><ul><li>会有固定样式和结构的HTML模板，根据请求的数据不同，显示页面内容。例如新闻网站。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">render</span>(<span class="params">options, path</span>) &#123;</span><br><span class="line">  fs.<span class="title function_">readFile</span>(path,&#123;<span class="attr">encoding</span>: <span class="string">&quot;utf-8&quot;</span>, <span class="attr">flag</span>: <span class="string">&quot;r&quot;</span>&#125;,<span class="function">(<span class="params">err,data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 这里使用箭头函数，使this指向调用的res</span></span><br><span class="line">    <span class="keyword">if</span>(err)&#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(err)</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 匹配普通的变量，并且替换内容</span></span><br><span class="line">      data = <span class="title function_">replaceArr</span>(data,options)</span><br><span class="line">      data = <span class="title function_">replaceVAr</span>(data,options)</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">end</span>(data)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;服务器：本质上是一台PC主机(linux系统，window系统)，部署了后端语言的执行环境，并且能够长时间提供网络服务&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;事件驱动：&quot;&gt;&lt;a href=&quot;#事件驱动：&quot; class=&quot;headerlink&quot; title=&quot;事件</summary>
      
    
    
    
    <category term="Node" scheme="http://example.com/categories/Node/"/>
    
    
  </entry>
  
  <entry>
    <title>梳理框架流程</title>
    <link href="http://example.com/2024/10/31/node/5%E6%A2%B3%E7%90%86%E6%A1%86%E6%9E%B6%E6%B5%81%E7%A8%8B/"/>
    <id>http://example.com/2024/10/31/node/5%E6%A2%B3%E7%90%86%E6%A1%86%E6%9E%B6%E6%B5%81%E7%A8%8B/</id>
    <published>2024-10-31T09:15:22.549Z</published>
    <updated>2024-10-31T09:31:57.781Z</updated>
    
    <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><h2 id="1浏览器发送请求"><a href="#1浏览器发送请求" class="headerlink" title="1浏览器发送请求"></a>1浏览器发送请求</h2><ol><li>用户输入网址地址<ul><li><a href="http://127.0.0.1/">http://127.0.0.1/</a> 或者 localhost:3000</li></ul></li><li>浏览器根据请求转变成HTTP的请求包</li></ol><h2 id="2服务器接受到请求"><a href="#2服务器接受到请求" class="headerlink" title="2服务器接受到请求"></a>2服务器接受到请求</h2><ol><li>http模块里实例化的server对象，server对象监听每一次浏览器发送的请求，每次请求都会触发request事件<ul><li>this.server.on(‘request’,(req,res)&#x3D;&gt; {})</li></ul></li><li>将http的请求包转化为req的请求对象，并且传入到请求事件触发的函数中</li><li>会创建生成一个res响应对象，这个对象可以帮助我们快速实现http的响应</li></ol><h2 id="3解析请求路径，调用不同的页面渲染函数"><a href="#3解析请求路径，调用不同的页面渲染函数" class="headerlink" title="3解析请求路径，调用不同的页面渲染函数"></a>3解析请求路径，调用不同的页面渲染函数</h2><ol><li><p>正则匹配方式进行对路径的匹配</p></li><li><p>以匹配的正则字符串作为KEY，找到需要调用执行的渲染函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 循环匹配正则路径</span></span><br><span class="line">res.<span class="property">render</span> = render</span><br><span class="line">res.<span class="title function_">setHeader</span>(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;text/html;charset=UTF-8&quot;</span>)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> key <span class="keyword">in</span> <span class="variable language_">this</span>.<span class="property">reqEvent</span>) &#123;</span><br><span class="line"><span class="keyword">let</span> regStr = key</span><br><span class="line"><span class="keyword">let</span> reg = <span class="keyword">new</span> <span class="title class_">RegExp</span>(regStr, <span class="string">&#x27;igs&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span>(reg.<span class="title function_">test</span>(req.<span class="property">url</span>)) &#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">reqEvent</span>[key](req, res)</span><br><span class="line">resState = <span class="literal">true</span></span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>调用页面的执行函数，执行模板渲染</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">serverRqquest.<span class="title function_">on</span>(<span class="string">&#x27;/movices&#x27;</span>, <span class="function">(<span class="params">req,res</span>) =&gt;</span> &#123;&#125;)</span><br><span class="line"><span class="comment">// 这里的箭头函数即为真正匹配到的页面执行的函数</span></span><br></pre></td></tr></table></figure></li><li><p>调用模板的渲染函数</p></li></ol><ul><li>res.render(movices[index], ‘.&#x2F;template&#x2F;index0.html’)</li></ul><ol start="5"><li><p>执行渲染函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">render</span>(<span class="params">options, path</span>) &#123;</span><br><span class="line">  fs.<span class="title function_">readFile</span>(path,&#123;<span class="attr">encoding</span>: <span class="string">&quot;utf-8&quot;</span>, <span class="attr">flag</span>: <span class="string">&quot;r&quot;</span>&#125;,<span class="function">(<span class="params">err,data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 这里使用箭头函数，使this指向调用的res</span></span><br><span class="line">    <span class="keyword">if</span>(err)&#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(err)</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line"><span class="comment">// 数组变量的替换</span></span><br><span class="line">data = <span class="title function_">replaceArr</span>(data,options)</span><br><span class="line"><span class="comment">// 单个变量的替换</span></span><br><span class="line">data = <span class="title function_">replaceVAr</span>(data,options)</span><br><span class="line">&#125;<span class="keyword">catch</span>(error) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(error)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 最终输出渲染出来的html</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">end</span>(data)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>数组变量替换</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">replaceArr</span>(<span class="params">data,options</span>) &#123;</span><br><span class="line">  <span class="comment">// 匹配循环的变量，并且替换循环的内容</span></span><br><span class="line">  <span class="keyword">let</span> listreg = <span class="regexp">/\&#123;\%for \&#123;(.*?)\&#125; \%\&#125;(.*?)\&#123;\%endfor\%\&#125;/ig</span>s</span><br><span class="line">  <span class="keyword">let</span> listResult;</span><br><span class="line">  <span class="keyword">while</span>(listResult = listreg.<span class="title function_">exec</span>(data)) &#123;</span><br><span class="line">    <span class="keyword">let</span> list = listResult[<span class="number">1</span>].<span class="title function_">trim</span>()</span><br><span class="line">    <span class="keyword">let</span> listValue = options[list]</span><br><span class="line">    <span class="keyword">let</span> listStr = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    listValue.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item,index</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 替换每一项内容的变量</span></span><br><span class="line">      listStr = listStr + <span class="title function_">replaceVAr</span>(listResult[<span class="number">2</span>], &#123;<span class="string">&quot;item&quot;</span>:item&#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">    data = data.<span class="title function_">replace</span>(listResult[<span class="number">0</span>],listStr)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> data</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>单个变量的替换</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">replaceVAr</span>(<span class="params">data,options</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> reg = <span class="regexp">/\&#123;\&#123;(.*?)\&#125;\&#125;/ig</span>s</span><br><span class="line">  <span class="keyword">let</span> result;</span><br><span class="line">  <span class="keyword">while</span>(result = reg.<span class="title function_">exec</span>(data)) &#123;</span><br><span class="line">    <span class="comment">// 去除key两边的空白字符，并拿到key</span></span><br><span class="line">    <span class="keyword">let</span> strKey = result[<span class="number">1</span>].<span class="title function_">trim</span>()</span><br><span class="line">    <span class="keyword">let</span> strValue = <span class="built_in">eval</span>(<span class="string">&#x27;options.&#x27;</span> + strKey) <span class="comment">// 执行字符串作为JS表达式，并将计算出来的结果返回</span></span><br><span class="line">    data = data.<span class="title function_">replace</span>(result[<span class="number">0</span>],strValue)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> data</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="4匹配路径是否为静态路径，如果时请求静态文件，那么就按照静态文件的形式输出"><a href="#4匹配路径是否为静态路径，如果时请求静态文件，那么就按照静态文件的形式输出" class="headerlink" title="4匹配路径是否为静态路径，如果时请求静态文件，那么就按照静态文件的形式输出"></a>4匹配路径是否为静态路径，如果时请求静态文件，那么就按照静态文件的形式输出</h2><ol><li>首先判断是否响应过，如未响应过，可以判断是否为静态文件，如果是静态文件就正常的输出</li><li>否则，就输出404<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(!resState) &#123;</span><br><span class="line"><span class="keyword">if</span> (pathObj.<span class="property">dir</span> == <span class="variable language_">this</span>.<span class="property">staticPath</span>)&#123;<span class="comment">// 静态目录</span></span><br><span class="line">res.<span class="title function_">setHeader</span>(<span class="string">&quot;Content-Type&quot;</span>, <span class="variable language_">this</span>.<span class="title function_">getContentType</span>(pathObj.<span class="property">ext</span>))</span><br><span class="line"><span class="keyword">let</span> rs = fs.<span class="title function_">createReadStream</span>(<span class="string">&#x27;./static/&#x27;</span> + pathObj.<span class="property">base</span>)</span><br><span class="line">rs.<span class="title function_">pipe</span>(res)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">res.<span class="title function_">setHeader</span>(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;text/html;charset=UTF-8&quot;</span>)</span><br><span class="line">res.<span class="title function_">end</span>(<span class="string">&#x27;&lt;h1&gt;404页面找不到！&lt;/h1&gt;&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="5RES响应对象将res设置的内容最终转化为http的响应包"><a href="#5RES响应对象将res设置的内容最终转化为http的响应包" class="headerlink" title="5RES响应对象将res设置的内容最终转化为http的响应包"></a>5RES响应对象将res设置的内容最终转化为http的响应包</h2><h2 id="6浏览器解析响应包，并将html渲染在页面上"><a href="#6浏览器解析响应包，并将html渲染在页面上" class="headerlink" title="6浏览器解析响应包，并将html渲染在页面上"></a>6浏览器解析响应包，并将html渲染在页面上</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;/h1&gt;&lt;h2 id=&quot;1浏览器发送请求&quot;&gt;&lt;a href=&quot;#1浏览器发送请求&quot; class=&quot;headerlink&quot; title=&quot;1浏览器发送请求&quot;&gt;&lt;/a&gt;1浏览</summary>
      
    
    
    
    <category term="Node" scheme="http://example.com/categories/Node/"/>
    
    
  </entry>
  
  <entry>
    <title>搭建最简单的服务器</title>
    <link href="http://example.com/2024/10/31/node/4%E6%90%AD%E5%BB%BA%E6%9C%80%E7%AE%80%E5%8D%95%E7%9A%84%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <id>http://example.com/2024/10/31/node/4%E6%90%AD%E5%BB%BA%E6%9C%80%E7%AE%80%E5%8D%95%E7%9A%84%E6%9C%8D%E5%8A%A1%E5%99%A8/</id>
    <published>2024-10-31T09:15:22.536Z</published>
    <updated>2024-10-31T09:34:06.477Z</updated>
    
    <content type="html"><![CDATA[<!-- +【案例】这是一个封装好的搭建服务器函数 simple_server.js+【案例】这是一个应用封装的方法，并根据数据与模板动态生成页面的案例 useServer.js --><h1 id="搭建框架的基础"><a href="#搭建框架的基础" class="headerlink" title="搭建框架的基础"></a>搭建框架的基础</h1><h2 id="搭建简单的服务器"><a href="#搭建简单的服务器" class="headerlink" title="搭建简单的服务器"></a>搭建简单的服务器</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> http <span class="keyword">from</span> <span class="string">&quot;http&quot;</span></span><br><span class="line"><span class="comment">// 创建server服务器对象</span></span><br><span class="line"><span class="keyword">const</span> server = http.<span class="title function_">createServer</span>()</span><br><span class="line"><span class="comment">// 监听对当前服务器对象的请求</span></span><br><span class="line">server.<span class="title function_">on</span>(<span class="string">&#x27;request&#x27;</span>, <span class="function">(<span class="params">req,res</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="comment">// req： 请求数据都会放在请求对象里</span></span><br><span class="line"><span class="comment">// res： 能够做出响应对象</span></span><br><span class="line"><span class="comment">// 当服务器被请求时，会触发请求事件，并传入请求对象和响应对象</span></span><br><span class="line"><span class="comment">// 设置响应头</span></span><br><span class="line">res.<span class="title function_">setHeader</span>(<span class="string">&#x27;Content-Type&#x27;</span>,<span class="string">&#x27;text/html;charset=utf-8;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据路径信息显示不同页面</span></span><br><span class="line"><span class="keyword">if</span>(req.<span class="property">url</span> == <span class="string">&quot;/&quot;</span>) &#123;</span><br><span class="line">res.<span class="title function_">end</span>(<span class="string">&#x27;首页&#x27;</span>)</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span> (req.<span class="property">url</span> == <span class="string">&quot;/gnxw&quot;</span>)&#123;</span><br><span class="line">res.<span class="title function_">end</span>(<span class="string">&#x27;国内新闻首页&#x27;</span>)</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span> (req.<span class="property">url</span> == <span class="string">&quot;/ylxw&quot;</span>)&#123;</span><br><span class="line">res.<span class="title function_">end</span>(<span class="string">&#x27;娱乐新闻首页&#x27;</span>)</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">res.<span class="title function_">end</span>(<span class="string">&quot;&lt;h1&gt;404页面查找不到！&lt;/h1&gt;&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 启动服务器</span></span><br><span class="line">server.<span class="title function_">listen</span>(端口号,回调函数)</span><br></pre></td></tr></table></figure><h2 id="优化服务器性能封装服务器的方法"><a href="#优化服务器性能封装服务器的方法" class="headerlink" title="优化服务器性能封装服务器的方法"></a>优化服务器性能封装服务器的方法</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ServerApp</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 创建server服务器对象</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">server</span> = http.<span class="title function_">createServer</span>()</span><br><span class="line"><span class="comment">// 创建请求事件的空对象</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">reqEvent</span> = &#123;&#125;</span><br><span class="line">    <span class="comment">// 暴露目录名：可以让人修改，但实际上不管怎么改都是使用static这个目录，做到混淆他人获取信息</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">staticPath</span> = <span class="string">&quot;/static&quot;</span></span><br><span class="line">    <span class="comment">// 监听对当前服务器对象的请求</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">server</span>.<span class="title function_">on</span>(<span class="string">&#x27;request&#x27;</span>, <span class="function">(<span class="params">req,res</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 解析路径</span></span><br><span class="line">      <span class="keyword">let</span> pathObj = path.<span class="title function_">parse</span>(req.<span class="property">url</span>)</span><br><span class="line">      <span class="keyword">if</span>( pathObj.<span class="property">dir</span> <span class="keyword">in</span> <span class="variable language_">this</span>.<span class="property">reqEvent</span>) &#123;</span><br><span class="line"><span class="comment">// 将渲染函数添加到响应对象中</span></span><br><span class="line">        res.<span class="property">render</span> = render</span><br><span class="line">        res.<span class="title function_">setHeader</span>(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;text/html;charset=UTF-8&quot;</span>)</span><br><span class="line">        req.<span class="property">pathObj</span> = pathObj</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">reqEvent</span>[pathObj.<span class="property">dir</span>](req,res)</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (pathObj.<span class="property">dir</span> == <span class="variable language_">this</span>.<span class="property">staticPath</span>)&#123;</span><br><span class="line">        <span class="comment">// 读取静态目录</span></span><br><span class="line">        res.<span class="title function_">setHeader</span>(<span class="string">&quot;Content-Type&quot;</span>, <span class="variable language_">this</span>.<span class="title function_">getContentType</span>(pathObj.<span class="property">ext</span>))</span><br><span class="line">        <span class="keyword">let</span> rs = fs.<span class="title function_">createReadStream</span>(<span class="string">&#x27;./static/&#x27;</span> + pathObj.<span class="property">base</span>)</span><br><span class="line">        rs.<span class="title function_">pipe</span>(res)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        res.<span class="title function_">setHeader</span>(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;text/html;charset=UTF-8&quot;</span>)</span><br><span class="line">        res.<span class="title function_">end</span>(<span class="string">&#x27;&lt;h1&gt;404页面找不到！&lt;/h1&gt;&#x27;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">// 封装监听请求</span></span><br><span class="line">  <span class="title function_">on</span> (url, fn) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">reqEvent</span>[url] = fn</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">// 服务器启动</span></span><br><span class="line">  <span class="title function_">run</span> (port,callback) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">server</span>.<span class="title function_">listen</span>(port,callback)</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">// 封装对应什么后缀名返回什么头响应模式</span></span><br><span class="line"><span class="title function_">getContentType</span>(<span class="params">extName</span>) &#123;</span><br><span class="line"><span class="keyword">switch</span>(extName) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;.jpg&quot;</span>: </span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;image/jpeg&quot;</span></span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;.html&quot;</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;text/html;charset=utf-8&quot;</span></span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;.js&quot;</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;text/javascript;charset=utf-8&quot;</span></span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;.json&quot;</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;text/json;charset=utf-8&quot;</span></span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;.gif&quot;</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;image/gif&quot;</span></span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;.css&quot;</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;text/css&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> <span class="keyword">default</span> <span class="title class_">ServerApp</span></span><br></pre></td></tr></table></figure><h2 id="根据数据与模板动态生成页面"><a href="#根据数据与模板动态生成页面" class="headerlink" title="根据数据与模板动态生成页面"></a>根据数据与模板动态生成页面</h2><ol><li>根据规则去解析链接，并且获取ID或者索引值</li></ol><ul><li>let index &#x3D; req.pathObj.base</li><li>请求路径： localhost:3000&#x2F;movices&#x2F;1</li></ul><ol start="2"><li><p>根据索引获取数据</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> movices = [&#123;</span><br><span class="line"><span class="attr">name</span>: <span class="string">&#x27;长空之王&#x27;</span>,</span><br><span class="line"><span class="attr">desc</span>: <span class="string">&#x27;试飞员的故事&#x27;</span>,</span><br><span class="line"><span class="attr">author</span>: <span class="string">&#x27;胡军、王一博&#x27;</span>,</span><br><span class="line"><span class="attr">list</span>: [<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>]</span><br><span class="line">&#125;,&#123;</span><br><span class="line"><span class="attr">name</span>: <span class="string">&#x27;热烈&#x27;</span>,</span><br><span class="line"><span class="attr">desc</span>: <span class="string">&#x27;由街舞引申的关于梦想和青春的故事&#x27;</span>,</span><br><span class="line"><span class="attr">author</span>: <span class="string">&#x27;王一博&#x27;</span></span><br><span class="line">&#125;]</span><br><span class="line"><span class="keyword">let</span> pageData = movices[index]</span><br></pre></td></tr></table></figure></li><li><p>根据模板渲染页面</p></li></ol><ul><li>res.render(movices[index], ‘.&#x2F;template&#x2F;index.html’)</li></ul><ol start="4"><li>底层需要实现渲染函数，通过正则匹配，找到需要修改的地方进行一一修改<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">render</span>(<span class="params">options, path</span>) &#123;</span><br><span class="line">  fs.<span class="title function_">readFile</span>(path,&#123;<span class="attr">encoding</span>: <span class="string">&quot;utf-8&quot;</span>, <span class="attr">flag</span>: <span class="string">&quot;r&quot;</span>&#125;,<span class="function">(<span class="params">err,data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 这里使用箭头函数，使this指向调用的res</span></span><br><span class="line">    <span class="keyword">if</span>(err)&#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(err)</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(data)</span><br><span class="line">      <span class="keyword">let</span> reg = <span class="regexp">/\&#123;\&#123;(.*?)\&#125;\&#125;/ig</span>s</span><br><span class="line">      <span class="keyword">let</span> result;</span><br><span class="line">      <span class="keyword">while</span>(result = reg.<span class="title function_">exec</span>(data)) &#123;</span><br><span class="line">        <span class="comment">// 去除key两边的空白字符，并拿到key</span></span><br><span class="line">        <span class="keyword">let</span> strKey = result[<span class="number">1</span>].<span class="title function_">trim</span>()</span><br><span class="line">        <span class="keyword">let</span> strValue = options[strKey]</span><br><span class="line">        data = data.<span class="title function_">replace</span>(result[<span class="number">0</span>],strValue)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">end</span>(data)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="列表的动态渲染"><a href="#列表的动态渲染" class="headerlink" title="列表的动态渲染"></a>列表的动态渲染</h2><ol><li><p>在html页面定义列表循环的标记</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul&gt;</span><br><span class="line">&#123;%<span class="keyword">for</span> &#123;list&#125; %&#125;</span><br><span class="line">&lt;li&gt;&#123;&#123;item&#125;&#125;&lt;/li&gt;</span><br><span class="line">&#123;%endfor%&#125;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure></li><li><p>正则匹配标记</p></li></ol><ul><li><code>let listreg = /\&#123;\%for \&#123;(.*?)\&#125; \%\&#125;(.*?)\&#123;\%endfor\%\&#125;/igs</code></li><li>从中匹配到两个组<ul><li>第一个组匹配出变量的key值</li><li>第二哥组匹配出需要生成的每一项的内容</li></ul></li></ul><ol start="3"><li><p>匹配替换每一项的内容</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">while</span>(listResult = listreg.<span class="title function_">exec</span>(data)) &#123;</span><br><span class="line">    <span class="keyword">let</span> list = listResult[<span class="number">1</span>].<span class="title function_">trim</span>()</span><br><span class="line"><span class="comment">// 通过key值获取数据内容</span></span><br><span class="line">    <span class="keyword">let</span> listValue = options[list]</span><br><span class="line">    <span class="keyword">let</span> listStr = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    listValue.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item,index</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 替换每一项内容的变量</span></span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(item)</span><br><span class="line">      listStr = listStr + <span class="title function_">replaceVAr</span>(listResult[<span class="number">2</span>], &#123;<span class="string">&quot;item&quot;</span>:item&#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">    data = data.<span class="title function_">replace</span>(listResult[<span class="number">0</span>],listStr)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> data</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>通过eval函数，将字符串的表达式计算出来</p></li></ol><ul><li>let strValue &#x3D; eval(‘options.’ + strKey)</li></ul><h2 id="正则路由的设定"><a href="#正则路由的设定" class="headerlink" title="正则路由的设定"></a>正则路由的设定</h2><ul><li>要求：可以根据自己设定的正则匹配路径来执行想应的函数来响应用户的内容</li></ul><ol><li><p>设定正则的匹配路径和响应的执行函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">serverRqquest.<span class="title function_">on</span>(<span class="string">&#x27;^/$&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.<span class="title function_">end</span>(<span class="string">&quot;&lt;h1&gt;首页&lt;/h1&gt;&lt;img src=&#x27;./abc/bg-1.jpg&#x27;&gt;&quot;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>获取正则路径创建正则对象</p></li></ol><ul><li>let reg &#x3D; new RegExp(regStr, ‘igs’)</li></ul><ol start="3"><li><p>匹配路径，并调用相对应的函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(reg.<span class="title function_">test</span>(req.<span class="property">url</span>)) &#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">reqEvent</span>[key](req, res)</span><br><span class="line">resState = <span class="literal">true</span></span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>判断是否正则路径响应过，如果响应过，将不在响应，会报错</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(!resState) &#123;</span><br><span class="line"><span class="keyword">if</span> (pathObj.<span class="property">dir</span> == <span class="variable language_">this</span>.<span class="property">staticPath</span>)&#123;<span class="comment">// 静态目录</span></span><br><span class="line">res.<span class="title function_">setHeader</span>(<span class="string">&quot;Content-Type&quot;</span>, <span class="variable language_">this</span>.<span class="title function_">getContentType</span>(pathObj.<span class="property">ext</span>))</span><br><span class="line"><span class="keyword">let</span> rs = fs.<span class="title function_">createReadStream</span>(<span class="string">&#x27;./static/&#x27;</span> + pathObj.<span class="property">base</span>)</span><br><span class="line">rs.<span class="title function_">pipe</span>(res)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">res.<span class="title function_">setHeader</span>(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;text/html;charset=UTF-8&quot;</span>)</span><br><span class="line">res.<span class="title function_">end</span>(<span class="string">&#x27;&lt;h1&gt;404页面找不到！&lt;/h1&gt;&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;!-- +【案例】这是一个封装好的搭建服务器函数 simple_server.js
+【案例】这是一个应用封装的方法，并根据数据与模板动态生成页面的案例 useServer.js --&gt;
&lt;h1 id=&quot;搭建框架的基础&quot;&gt;&lt;a href=&quot;#搭建框架的基础&quot; class=&quot;he</summary>
      
    
    
    
    <category term="Node" scheme="http://example.com/categories/Node/"/>
    
    
  </entry>
  
  <entry>
    <title>爬虫总结</title>
    <link href="http://example.com/2024/10/31/node/3%E7%88%AC%E8%99%AB/"/>
    <id>http://example.com/2024/10/31/node/3%E7%88%AC%E8%99%AB/</id>
    <published>2024-10-31T09:15:22.528Z</published>
    <updated>2024-10-31T09:36:53.082Z</updated>
    
    <content type="html"><![CDATA[<h2 id="爬虫介绍"><a href="#爬虫介绍" class="headerlink" title="爬虫介绍"></a>爬虫介绍</h2><ul><li>通过模拟浏览器的请求，服务器就会根据我们的请求返回我们想要的数据，将数据解析出来，并且进行保存</li></ul><h2 id="node文件执行命令：-node-文件名"><a href="#node文件执行命令：-node-文件名" class="headerlink" title="node文件执行命令： node . 文件名"></a>node文件执行命令： node . 文件名</h2><h2 id="爬虫流程"><a href="#爬虫流程" class="headerlink" title="爬虫流程"></a>爬虫流程</h2><h3 id="1-目标：确认想要获取的数据"><a href="#1-目标：确认想要获取的数据" class="headerlink" title="1.目标：确认想要获取的数据"></a>1.目标：确认想要获取的数据</h3><ul><li>1.确定想要的数据在什么页面上(一般详细的数据会在详情页)</li><li>2.确定在那些页面可以链接到这些页面(一般分类列表页面会有详情页的链接数据)</li><li>3.寻找页面之间和数据之间的规律</li></ul><h3 id="2-分析页面"><a href="#2-分析页面" class="headerlink" title="2.分析页面"></a>2.分析页面</h3><ul><li>1.获取数据的方式(正则，cherrio)</li><li>2.分析数据是通过ajax请求的数据，还是html里自带的数据</li><li>3.如果是通过AJAX请求的数据，那么需要获取ajax请求的链接，一般请求到的数据都为JSON格式数据，那么就会比较容易解析</li><li>4.如过数据在HTML里面，那么就用cherrio通过选择器将内容选中</li></ul><h3 id="3-编写单个数据获取的案例"><a href="#3-编写单个数据获取的案例" class="headerlink" title="3.编写单个数据获取的案例"></a>3.编写单个数据获取的案例</h3><ul><li>1.解析出分类页的链接地址</li><li>2.解析出列表页的链接地址</li><li>3.解析出详情页的链接地址</li><li>4.解析详情页里面想要获取的数据</li><li>5.将数据进行保存到本地或者数据库</li></ul><h3 id="4-如果遇到阻碍进行反爬虫对抗"><a href="#4-如果遇到阻碍进行反爬虫对抗" class="headerlink" title="4.如果遇到阻碍进行反爬虫对抗"></a>4.如果遇到阻碍进行反爬虫对抗</h3><ul><li>1.User-Agent是否为正常浏览器的信息(如果时axios者只为header)</li><li>2.将请求头设置为跟浏览器一样的内容</li><li>3.因为爬虫的爬取速度过快，会导致封号。(1.降低速度解决 2. 使用代理解决)</li><li>4.如果设置需要凭证，那么可以采用无界浏览器真实模拟</li></ul><h2 id="请求的数据的库"><a href="#请求的数据的库" class="headerlink" title="请求的数据的库"></a>请求的数据的库</h2><ul><li>request：通过库，帮助我们快速实现HTTP请求包的打包<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">request.<span class="title function_">get</span>(<span class="string">&#x27;请求地址&#x27;</span>, &#123;</span><br><span class="line"><span class="string">&#x27;请求头字段&#x27;</span>:<span class="string">&#x27;请求头的value值&#x27;</span></span><br><span class="line">&#125;,<span class="function">(<span class="params">res</span>)=&gt;</span> &#123;处理返回的内容&#125;)</span><br></pre></td></tr></table></figure></li><li>axios：通过库，帮助我们快速实现HTTP请求包的打包,比request更好，前后端通杀，前后端调用方式一致<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">axios</span>(&#123;</span><br><span class="line"><span class="attr">method</span>: <span class="string">&#x27;get&#x27;</span>,</span><br><span class="line"><span class="attr">url</span>: <span class="string">&#x27;请求地址&#x27;</span>,</span><br><span class="line"><span class="attr">resposeType</span>: <span class="string">&#x27;stream&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line">.<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">response</span>) &#123;</span><br><span class="line">response.<span class="property">data</span>.<span class="title function_">pipe</span>(fs.<span class="title function_">createWriteStream</span>(<span class="string">&#x27;写入的文件名&#x27;</span>))</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li>puppeteer: 完全模拟浏览器<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 打开浏览器</span></span><br><span class="line"><span class="keyword">let</span> options = &#123;</span><br><span class="line"><span class="attr">defaultViewport</span>: &#123;</span><br><span class="line"><span class="attr">width</span>: <span class="number">1400</span>,<span class="comment">// 设置视窗宽高</span></span><br><span class="line"><span class="attr">height</span>:<span class="number">800</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">headless</span>: <span class="literal">true</span>,<span class="comment">// 设置为无界面</span></span><br><span class="line"><span class="attr">slowMo</span>: <span class="number">250</span>,<span class="comment">// 调试时设置放慢每个步骤的毫秒数</span></span><br><span class="line">timeout：<span class="number">3000</span>, <span class="comment">// 默认超时3秒钟</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> browser = <span class="keyword">await</span> puppeteer.<span class="title function_">launch</span>(options)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打开新标签页</span></span><br><span class="line"><span class="keyword">let</span> page = <span class="keyword">await</span> browser.<span class="title function_">newPage</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取多有浏览器的页面</span></span><br><span class="line"><span class="keyword">let</span> pages = <span class="keyword">await</span> browser.<span class="title function_">pages</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 关闭浏览器</span></span><br><span class="line">browser.<span class="title function_">close</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将页面跳转至</span></span><br><span class="line"><span class="keyword">await</span> page.<span class="title function_">goto</span>(url)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取页面的对象，并进行操作</span></span><br><span class="line"><span class="keyword">let</span> btn = <span class="keyword">await</span> page.$(selector)</span><br><span class="line"><span class="keyword">let</span> input = <span class="keyword">await</span>.<span class="property">page</span>.$(selector)</span><br><span class="line"><span class="comment">// 点击按钮</span></span><br><span class="line">btn.<span class="title function_">click</span>()</span><br><span class="line"><span class="comment">// 聚焦到输入框</span></span><br><span class="line">input.<span class="title function_">focus</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在页面上写入内容或者键盘按键</span></span><br><span class="line"><span class="keyword">await</span> page.<span class="property">keyboard</span>.<span class="title function_">type</span>(<span class="string">&#x27;content&#x27;</span>)</span><br><span class="line"><span class="keyword">await</span> page.<span class="property">keyboard</span>.<span class="title function_">press</span>(<span class="string">&#x27;content&#x27;</span>)</span><br><span class="line"><span class="keyword">await</span> page.<span class="property">keyboard</span>.<span class="title function_">tdown</span>(<span class="string">&#x27;content&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置鼠标的移动</span></span><br><span class="line"><span class="keyword">await</span> page.<span class="property">mouse</span>.<span class="title function_">move</span>(<span class="number">0</span>,<span class="number">0</span>)</span><br><span class="line"><span class="keyword">await</span> page.<span class="property">mouse</span>.<span class="title function_">down</span>()</span><br><span class="line"><span class="keyword">await</span> page.<span class="property">mouse</span>.<span class="title function_">move</span>(<span class="number">0</span>,<span class="number">100</span>)</span><br><span class="line"><span class="keyword">await</span> page.<span class="property">mouse</span>.<span class="title function_">move</span>(<span class="number">100</span>,<span class="number">0</span>)</span><br><span class="line"><span class="keyword">await</span> page.<span class="property">mouse</span>.<span class="title function_">move</span>(<span class="number">100</span>,<span class="number">1000</span>)</span><br><span class="line"><span class="keyword">await</span> page.<span class="property">mouse</span>.<span class="title function_">up</span>()</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 截获页面请求</span></span><br><span class="line"><span class="keyword">await</span> page.<span class="title function_">setRequestInterception</span>(<span class="literal">true</span>)</span><br><span class="line"><span class="comment">// 监听请求事件并对请求进行拦截</span></span><br><span class="line">page.<span class="title function_">on</span>(<span class="string">&#x27;request&#x27;</span>,<span class="function"><span class="params">request</span> =&gt;</span> &#123;</span><br><span class="line"><span class="comment">// 通过url模块对请求的地址进行解析</span></span><br><span class="line">request.<span class="title function_">url</span>() <span class="comment">// 可以获取请求的网址，request包含了所有的请求信息</span></span><br><span class="line"><span class="keyword">if</span>(想要的条件)&#123;</span><br><span class="line">request.<span class="title function_">continue</span>()</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">request.<span class="title function_">abort</span>([errorCode])</span><br><span class="line">&#125;</span><br><span class="line">&#125;) </span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取浏览器的信息和内容</span></span><br><span class="line">page.$eval(selector,<span class="function">(<span class="params">item</span>)=&gt;</span> item)</span><br><span class="line">page.$$eval(selector,<span class="function">(<span class="params">item</span>)=&gt;</span> item)</span><br></pre></td></tr></table></figure></li></ul><h2 id="反爬虫策略："><a href="#反爬虫策略：" class="headerlink" title="反爬虫策略："></a>反爬虫策略：</h2><ol><li><p>几秒钟请求的次数达到一定程度，就会发送验证码、返回其它数据等方式来检验是否有问题<br>解决方式： 使用代理proxy</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">proxy</span>: &#123;</span><br><span class="line"><span class="attr">host</span>: <span class="string">&#x27;127.0.0.1&#x27;</span>,</span><br><span class="line"><span class="attr">port</span>: <span class="number">9000</span>,</span><br><span class="line"><span class="attr">auth</span>: &#123;</span><br><span class="line"><span class="attr">username</span>: <span class="string">&#x27;mikeymike&#x27;</span>,</span><br><span class="line"><span class="attr">password</span>: <span class="string">&#x27;rapunz3l&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>代理获取途径： 花钱，或者找免费代理，但需要一个个ping ip是否响应<br>代理IP：117.69.201.242  端口：9999<br>代理IP：125.73.220.108  端口：9999<br>代理IP：113.124.85.162  端口：9999<br>代理IP：114.230.69.33   端口：9999</p></li><li><p>获取到的字体图标的数据是乱码的，需要下载它的字体图标并解码，花费时间和精力多，需要考虑清除是否一定要去解码</p></li><li><p>网页不能直接获取源代码，这种叫前端渲染网页，无法爬取。</p><ul><li>   示例：易点租网页。后端渲染的网页可以爬取</li><li>需要分析请求的接口对应哪些内容是<br>let res &#x3D; await axios.get(httpUrl,  {proxy: {<br> host: ‘127.0.0.1’, &#x2F;&#x2F; 找的代理和端口<br> port: 9000,<br>},<br>})</li></ul></li></ol><h2 id="Puppeteer-—-无界面模式"><a href="#Puppeteer-—-无界面模式" class="headerlink" title="Puppeteer — 无界面模式"></a>Puppeteer — 无界面模式</h2><ul><li>不用打开Chrome界面就可以操作Chrome界面</li><li>作用：可以通过api直接控制Cheome模拟大部分用户操作来进行UI Test或者作为爬虫访问页面来收集数据<ul><li>生成页面PDF</li><li>抓取SPA并生成预渲染内容（SSR）</li><li>自动提交表单，进行UI测试，键盘输入</li></ul></li><li>解决了网页为前端渲染，，无法直接爬取的问题。直接将页面直接渲染到源码</li><li>使用方式：<ul><li>使用Chrome打开这个网页打开F12就可以看到详细的网页源代码</li><li>然后直接在控制台中输入document.querySelector(“选择器”).getAttribute(“src”)就可以直接获取对应信息</li><li>图像识别</li></ul></li></ul><h3 id="截屏"><a href="#截屏" class="headerlink" title="截屏"></a>截屏</h3><ul><li>await page.screenshot({path: ‘example.png’});&#x2F;&#x2F; 打开页面的时候截屏,path为截屏的图片名字</li></ul><h3 id="跳转到新页面的方式"><a href="#跳转到新页面的方式" class="headerlink" title="跳转到新页面的方式"></a>跳转到新页面的方式</h3><ul><li>方式一：获取对应信息并自动打开对应链接<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取页面内容</span></span><br><span class="line"><span class="comment">// $$eval函数使得回调函数可以运行在浏览器中，并可以通过浏览器的方式进行输出</span></span><br><span class="line"><span class="keyword">let</span> eles = <span class="keyword">await</span> page.$$eval(<span class="string">&quot;#menu li a&quot;</span>, <span class="function">(<span class="params">elements</span>)=&gt;</span> &#123;</span><br><span class="line"><span class="keyword">let</span> eleArr = []</span><br><span class="line">elements.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item,i</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">var</span> eleObj = &#123;</span><br><span class="line"><span class="attr">href</span>: item.<span class="title function_">getAttribute</span>(<span class="string">&quot;herf&quot;</span>),</span><br><span class="line"><span class="attr">text</span>: item.<span class="property">innerText</span></span><br><span class="line">&#125;</span><br><span class="line">eleArr.<span class="title function_">push</span>(eleObj)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">return</span> eleArr</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 自动打开国内电影的页面</span></span><br><span class="line"><span class="keyword">let</span> gnPage = <span class="keyword">await</span> browser.<span class="property">newPage</span></span><br><span class="line"><span class="keyword">await</span> gnPage.<span class="title function_">goto</span>(eles[<span class="number">2</span>].<span class="property">href</span>)</span><br></pre></td></tr></table></figure></li><li>方式二：点击跳转<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通过点击页面跳转的方式</span></span><br><span class="line">elementHandles = <span class="keyword">await</span> page.$$(<span class="string">&quot;menu li a&quot;</span>)</span><br><span class="line">elementHandles[<span class="number">2</span>].<span class="title function_">click</span>()</span><br></pre></td></tr></table></figure></li><li>方式三：自动打开搜索内容的页面<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通过表单输入进行搜索(看文档是否为promise对象，是+await)</span></span><br><span class="line">inputEle = <span class="keyword">await</span> page.$(<span class="string">&quot;.searchl .formhue&quot;</span>)</span><br><span class="line"><span class="comment">// 让光标进入到输入框</span></span><br><span class="line"><span class="keyword">await</span> inputEle.<span class="title function_">focus</span>()</span><br><span class="line"><span class="comment">// 往输入框输入内容</span></span><br><span class="line"><span class="keyword">await</span> page.<span class="property">keyboard</span>.<span class="title function_">type</span>(<span class="string">&quot;热烈&quot;</span>)</span><br><span class="line"><span class="comment">// 绑定事件，取消冒泡 --- 因为点击按钮，自动冒泡打开了广告</span></span><br><span class="line"><span class="keyword">await</span> page.$eval(<span class="string">&#x27;.bd3rl&gt; .searchr&#x27;</span>, <span class="function">(<span class="params">element</span>) =&gt;</span> &#123;</span><br><span class="line">element.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">e.<span class="property">cancelBubble</span> = <span class="literal">true</span></span><br><span class="line">&#125;)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 点击按钮(找到按钮的选择器)</span></span><br><span class="line"><span class="keyword">let</span> btnEle = <span class="keyword">await</span> page.$(<span class="string">&#x27;.searchr input[name=&quot;Submit&quot;]&#x27;</span>)</span><br><span class="line"><span class="keyword">await</span> btnEle.<span class="title function_">click</span>()</span><br></pre></td></tr></table></figure></li></ul><p>【参考】<a href="https://blog.csdn.net/BLee_0123/article/details/131427517">爬虫基本原理</a><br>【参考】<a href="https://www.bilibili.com/video/BV1i7411G7kW/?p=13&spm_id_from=pageDriver&vd_source=7ff3c1c4d72a6d5534ee6ccf76c617ce">B站视频</a></p><!-- 【案例】位于练习的p_four文件夹下的utils目录的test_cherrio.js , 这个基本上是成功，出来数据多图片加载不出来【案例】位于练习的p_four文件夹下的utils目录的test_reg.js，这个没有完成遍历所有页面【案例】位于练习的p_four文件夹下的utils目录的test_puppeteer.js -->]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;爬虫介绍&quot;&gt;&lt;a href=&quot;#爬虫介绍&quot; class=&quot;headerlink&quot; title=&quot;爬虫介绍&quot;&gt;&lt;/a&gt;爬虫介绍&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;通过模拟浏览器的请求，服务器就会根据我们的请求返回我们想要的数据，将数据解析出来，并且进行保存&lt;/li&gt;
&lt;/u</summary>
      
    
    
    
    <category term="Node" scheme="http://example.com/categories/Node/"/>
    
    
  </entry>
  
  <entry>
    <title>Node的文件系统</title>
    <link href="http://example.com/2024/10/31/node/2node%E7%9A%84%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/"/>
    <id>http://example.com/2024/10/31/node/2node%E7%9A%84%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/</id>
    <published>2024-10-31T09:15:22.513Z</published>
    <updated>2024-10-31T09:40:24.989Z</updated>
    
    <content type="html"><![CDATA[<h1 id="文件系统（File-System）"><a href="#文件系统（File-System）" class="headerlink" title="文件系统（File System）"></a>文件系统（File System）</h1><blockquote><p>通过Node来操作系统中的文件<br>使用文件系统，需要先引入fs模块，fs是核心模块，直接引入不需要下载<br>运行文件: node 文件名带后缀</p></blockquote><h2 id="Buffer-缓冲区"><a href="#Buffer-缓冲区" class="headerlink" title="Buffer(缓冲区)"></a>Buffer(缓冲区)</h2><ul><li>作用<ul><li>专门存储二进制的数据</li><li>在内存空间开辟出固定大小的内存，一旦确定，则不能修改</li><li>效率高</li></ul></li><li>Buffer的结构和数组很像，操作的方法也和数组类似</li><li>在buffer中存储的都是二进制数据，但是在显示时都是以16进制的形式显示</li><li>buffer中每一个元素的范围是从00 - ff，一个元素，占用内存的一个字节<ul><li>8bit &#x3D; 1Byte（字节）</li><li>1024Byte &#x3D; 1KB</li><li>1024KB &#x3D; 1MB</li><li>1024MB &#x3D; 1GB</li><li>1024GB &#x3D; 1TB</li></ul></li></ul><h3 id="Buffer的方法"><a href="#Buffer的方法" class="headerlink" title="Buffer的方法"></a>Buffer的方法</h3><ul><li>Buffer.from(str) — 将字符串转成buffer对象<ul><li>buf.toString() — 将buffer对象转成字符串</li><li>buf.length — 占用内存的大小</li><li>str.length — 字符串的长度</li></ul></li><li>Buffer.alloc(size) — 创建一个指定大小的buffer</li><li>Buffer.allocUnsafe(size) — 创建一个指定大小的buffer，但是可能含有敏感数据，效率高，内存泄漏</li><li>通过索引，来操作buf中的元素 — buf2[1] &#x3D; 255;</li></ul><h2 id="fs模块-—-用来操作系统中的文件"><a href="#fs模块-—-用来操作系统中的文件" class="headerlink" title="fs模块 — 用来操作系统中的文件"></a>fs模块 — 用来操作系统中的文件</h2><blockquote><p>fs模块中的大部分操作都提供了两种方法，同步(带sync)和异步(有回调)</p></blockquote><ul><li>引入fs: let fs &#x3D; require(“fs”);</li></ul><h3 id="同步文件的读写"><a href="#同步文件的读写" class="headerlink" title="同步文件的读写"></a>同步文件的读写</h3><ul><li><h3 id="打开文件-—-fs-openSync-path-flags"><a href="#打开文件-—-fs-openSync-path-flags" class="headerlink" title="打开文件 — fs.openSync(path, flags)"></a>打开文件 — <code>fs.openSync(path, flags)</code></h3><ul><li>path：要打开文件的路径</li><li>flags：打开文件要做的操作的类型<ul><li>r(只读)、w(可写)、a(追加)</li></ul></li><li>返回值：返回一个文件的描述符作为结果</li><li>示例：let fd &#x3D; fs.openSync(“hello.txt” , “w”);</li></ul></li><li><h3 id="向文件中写入内容-—-fs-writeFileSync-file-data-options"><a href="#向文件中写入内容-—-fs-writeFileSync-file-data-options" class="headerlink" title="向文件中写入内容 — fs.writeFileSync(file, data[, options])"></a>向文件中写入内容 — <code>fs.writeFileSync(file, data[, options])</code></h3><ul><li>fd：文件的描述符，需要传递要写入的文件的描述符</li><li>string：要写入的内容</li><li>position：写入的起始位置</li><li>encoding：写入的编码，默认utf-8(不传)</li><li>示例：fs.writeSync(fd , “今天天气真不错”, 2);</li></ul></li><li><h3 id="读取文件-—-fs-readFileSync-path-options"><a href="#读取文件-—-fs-readFileSync-path-options" class="headerlink" title="读取文件 — fs.readFileSync(path[, options])"></a>读取文件 — <code>fs.readFileSync(path[, options])</code></h3><ul><li>readFileSync: read的高度封装</li><li>path: 文件地址</li><li>options: 配置参数，传对象</li><li>示例：fs.readFileSync(“文件地址”, {flag: ‘r’, encoding: “utf-8”})</li></ul></li><li><h3 id="保存并关闭文件-—-fs-closeSync-fd"><a href="#保存并关闭文件-—-fs-closeSync-fd" class="headerlink" title="保存并关闭文件 — fs.closeSync(fd)"></a>保存并关闭文件 — <code>fs.closeSync(fd)</code></h3><ul><li>示例：fs.closeSync(fd);</li></ul></li><li><h3 id="删除文件-—-fs-unlink-路径-callback"><a href="#删除文件-—-fs-unlink-路径-callback" class="headerlink" title="删除文件 — fs.unlink(&#39;路径&#39;, callback)"></a>删除文件 — <code>fs.unlink(&#39;路径&#39;, callback)</code></h3></li></ul><h3 id="异步文件读写-推荐"><a href="#异步文件读写-推荐" class="headerlink" title="异步文件读写(推荐)"></a>异步文件读写(推荐)</h3><ul><li><h3 id="打开文件-—-fs-open-path-flags-callback"><a href="#打开文件-—-fs-open-path-flags-callback" class="headerlink" title="打开文件 — fs.open(path, flags, callback)"></a>打开文件 — <code>fs.open(path, flags, callback)</code></h3><ul><li>callback：当写入完成以后执行的函数<ul><li>err：错误对象，如果没有错误则为null</li><li>data：文件内容</li></ul></li></ul></li><li><h3 id="写入文件-—-fs-writeFile-file-data-options-callback"><a href="#写入文件-—-fs-writeFile-file-data-options-callback" class="headerlink" title="写入文件 — fs.writeFile(file, data[, options], callback)"></a>写入文件 — <code>fs.writeFile(file, data[, options], callback)</code></h3></li><li><h3 id="读取文件-—-fs-readFile-path-options-callback"><a href="#读取文件-—-fs-readFile-path-options-callback" class="headerlink" title="读取文件 — fs.readFile(path[, options], callback)"></a>读取文件 — <code>fs.readFile(path[, options], callback)</code></h3></li><li><h3 id="关闭文件-—-fs-close-fd-callback"><a href="#关闭文件-—-fs-close-fd-callback" class="headerlink" title="关闭文件 — fs.close(fd, callback)"></a>关闭文件 — <code>fs.close(fd, callback)</code></h3><ul><li>想要直接使用读取文件返回的文件名字来打开相同名字的文件，需要去除左右两边的空白符trim()</li><li>示例：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 封装读取的操作</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">fsRead</span> = (<span class="params">url: string</span>) =&gt; &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">fs.<span class="title function_">readFile</span>(url, &#123;<span class="attr">flag</span>: <span class="string">&#x27;r&#x27;</span>, <span class="attr">encoding</span>: <span class="string">&quot;utf-8&quot;</span>&#125;, <span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(!err) &#123;</span><br><span class="line"><span class="title function_">resolve</span>(data)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="title function_">reject</span>(err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;)</span><br><span class="line">&#125; </span><br><span class="line"><span class="title function_">fsRead</span>(<span class="string">&quot;文件地址&quot;</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(res))</span><br><span class="line"><span class="comment">// 封装写入的操作</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">fsWrite</span> = (<span class="params">url: string, data: any</span>) =&gt; &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">fs.<span class="title function_">writeFile</span>(url, data, &#123;<span class="attr">flag</span>: <span class="string">&#x27;a&#x27;</span>, <span class="attr">encoding</span>: <span class="string">&#x27;utf-8&#x27;</span> &#125;, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(!err) &#123;</span><br><span class="line"><span class="title function_">resolve</span>()</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="title function_">reject</span>(err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;fsRead, fsWrite&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="流式文件读写"><a href="#流式文件读写" class="headerlink" title="流式文件读写"></a>流式文件读写</h3><blockquote><p>适用于一些比较大的文件</p></blockquote><ul><li><h3 id="创建一个写入流-—-fs-createWriteStream-path-options"><a href="#创建一个写入流-—-fs-createWriteStream-path-options" class="headerlink" title="创建一个写入流 — fs.createWriteStream(path[, options])"></a>创建一个写入流 — <code>fs.createWriteStream(path[, options])</code></h3><ul><li>示例：let ws &#x3D; fs.createWriteStream(“hello3.txt”, {flag: “w”, encoding: ‘utf-8’});</li></ul></li><li><h3 id="创建一个读取流-—-fs-createReadStream-path-options"><a href="#创建一个读取流-—-fs-createReadStream-path-options" class="headerlink" title="创建一个读取流 — fs.createReadStream(path[, options])"></a>创建一个读取流 — <code>fs.createReadStream(path[, options])</code></h3><ul><li>监听流的关闭中，当数据读取完要先调用关闭流ws.end();</li><li>示例：let rs &#x3D; fs.createReadStream(“hello3.txt”, {flag: “a”, encoding: ‘utf-8’})</li></ul></li><li><h3 id="通过监听流的open、ready和close事件来监听流的打开、准备和关闭状态"><a href="#通过监听流的open、ready和close事件来监听流的打开、准备和关闭状态" class="headerlink" title="通过监听流的open、ready和close事件来监听流的打开、准备和关闭状态"></a>通过监听流的open、ready和close事件来监听流的打开、准备和关闭状态</h3><ul><li>on(事件字符串,回调函数)<ul><li>可以为对象绑定一个事件</li></ul></li><li>once(事件字符串,回调函数)<ul><li>可以为对象绑定一个一次性的事件，该事件将会在触发一次以后自动失效</li></ul></li><li>流打开 — ws.once(“open”,function () {});</li><li>流关闭 — ws.once(“close”,function () {ws.end()});</li></ul></li><li><h3 id="向文件中写入内容-—-ws-write-内容-，callback"><a href="#向文件中写入内容-—-ws-write-内容-，callback" class="headerlink" title="向文件中写入内容 — ws.write(&quot;内容&quot;，callback);"></a>向文件中写入内容 — <code>ws.write(&quot;内容&quot;，callback);</code></h3></li><li><h3 id="关闭流-—-ws-end-callback"><a href="#关闭流-—-ws-end-callback" class="headerlink" title="关闭流 — ws.end(callback)"></a>关闭流 — <code>ws.end(callback)</code></h3><ul><li>如果要读取一个可读流中的数据，必须要为可读流绑定一个data事件，data事件绑定完毕，它会自动开始读取数据</li><li>示例： <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">rs.<span class="title function_">on</span>(<span class="string">&quot;data&quot;</span>, <span class="keyword">function</span> (<span class="params">data</span>) &#123;</span><br><span class="line"><span class="comment">// 读取数据</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(data)</span><br><span class="line"><span class="comment">//将读取到的数据写入到可写流中,相当于复制文件，写入的文件要和读取的文件类型一样</span></span><br><span class="line">ws.<span class="title function_">write</span>(data);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul></li><li><h3 id="pipe-可以将可读流中的内容，直接输出到可写流中-—-rs-pipe-ws"><a href="#pipe-可以将可读流中的内容，直接输出到可写流中-—-rs-pipe-ws" class="headerlink" title="pipe()可以将可读流中的内容，直接输出到可写流中 —- rs.pipe(ws);"></a>pipe()可以将可读流中的内容，直接输出到可写流中 —- rs.pipe(ws);</h3><ul><li>是上面代码的封装</li></ul></li></ul><h3 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h3><ul><li><h3 id="读取目录-—-fs-readdir-path-callback"><a href="#读取目录-—-fs-readdir-path-callback" class="headerlink" title="读取目录 — fs.readdir(path,callback)"></a>读取目录 — <code>fs.readdir(path,callback)</code></h3></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">fsReadDir = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">fs.<span class="title function_">readdir</span>(<span class="string">&quot;..../fs&quot;</span>, <span class="function">(<span class="params">err, files</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="comment">// files 是一个包含该目录所有文件的数组</span></span><br><span class="line"><span class="keyword">if</span>(!err) &#123;</span><br><span class="line"><span class="comment">// 通过循环将该命令下的文件全部追加到txtPath文件下</span></span><br><span class="line">files.<span class="title function_">forEach</span>(<span class="title function_">async</span> (filename,i) =&gt; &#123;</span><br><span class="line"><span class="keyword">let</span> content = <span class="keyword">await</span> <span class="title function_">fsRead</span>(<span class="string">&#x27;目录的路径/&#x27;</span> + filename)</span><br><span class="line"><span class="keyword">await</span> <span class="title function_">fsWrite</span> (txtPath, content)</span><br><span class="line">&#125;)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><h3 id="删除目录-—-fs-rmdir-path-callback"><a href="#删除目录-—-fs-rmdir-path-callback" class="headerlink" title="删除目录 — fs.rmdir(path,callback)"></a>删除目录 — <code>fs.rmdir(path,callback)</code></h3></li></ul><h3 id="输入和输出"><a href="#输入和输出" class="headerlink" title="输入和输出"></a>输入和输出</h3><ul><li><h3 id="引入readline-—-let-readline-require-readline"><a href="#引入readline-—-let-readline-require-readline" class="headerlink" title="引入readline — let readline = require(&#39;readline&#39;)"></a>引入readline — <code>let readline = require(&#39;readline&#39;)</code></h3></li><li><h3 id="创建readline接口实例"><a href="#创建readline接口实例" class="headerlink" title="创建readline接口实例"></a>创建readline接口实例</h3></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> r1 = readline.<span class="title function_">createInterface</span>(&#123;</span><br><span class="line"><span class="attr">output</span>: process.<span class="property">stdout</span>,</span><br><span class="line"><span class="attr">input</span>: process.<span class="property">stdin</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置r1，提问事件</span></span><br><span class="line">r1.<span class="title function_">question</span>(<span class="string">&quot;问题：&quot;</span>, <span class="function">(<span class="params">answer</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;答复：&quot;</span>+ answer)</span><br><span class="line">r1.<span class="title function_">close</span>()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">r1.<span class="title function_">on</span>(<span class="string">&#x27;close&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">process.<span class="title function_">exit</span>(<span class="number">0</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>封装一个函数，用于初始化和创建package.json的程序</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> readline = <span class="built_in">require</span>(<span class="string">&#x27;readline&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> &#123; fsWrite &#125; = <span class="built_in">require</span>(<span class="string">&#x27;路径&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> r1 = readline.<span class="title function_">createInterface</span>(&#123;</span><br><span class="line"><span class="attr">output</span>: process.<span class="property">stdout</span>,</span><br><span class="line"><span class="attr">input</span>: process.<span class="property">stdin</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 封装一个提问函数</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">lxQuestion</span> = (<span class="params">question: string</span>) =&gt; &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">r1.<span class="title function_">question</span>(question + <span class="string">&quot;：&quot;</span>, <span class="function">(<span class="params">answer</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="title function_">resolve</span>(answer)</span><br><span class="line">r1.<span class="title function_">close</span>()</span><br><span class="line">&#125;)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 创建包的提问问题函数</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">createPackage</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; &#123;</span><br><span class="line"><span class="keyword">let</span> name = <span class="keyword">await</span> <span class="title function_">lxQuestion</span>(<span class="string">&quot;你的包名是什么？&quot;</span>)</span><br><span class="line"><span class="keyword">let</span> anthor = <span class="keyword">await</span> <span class="title function_">lxQuestion</span>(<span class="string">&quot;你的作者是什么？&quot;</span>)</span><br><span class="line"><span class="keyword">let</span> main = <span class="keyword">await</span> <span class="title function_">lxQuestion</span>(<span class="string">&quot;你的主文件是什么？&quot;</span>)</span><br><span class="line"><span class="keyword">let</span> desc = <span class="keyword">await</span> <span class="title function_">lxQuestion</span>(<span class="string">&quot;你的描述是什么？&quot;</span>)</span><br><span class="line"><span class="keyword">let</span> version = <span class="keyword">await</span> <span class="title function_">lxQuestion</span>(<span class="string">&quot;你的版本是什么？&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将内容写入package.json文件中</span></span><br><span class="line"><span class="keyword">let</span> content = <span class="string">`&#123;</span></span><br><span class="line"><span class="string">&quot;name&quot;: &quot;<span class="subst">$&#123;name&#125;</span>&quot;,</span></span><br><span class="line"><span class="string">&quot;version&quot;: &quot;<span class="subst">$&#123;version&#125;</span>&quot;,</span></span><br><span class="line"><span class="string">&quot;description&quot;: &quot;<span class="subst">$&#123;desc&#125;</span>&quot;,</span></span><br><span class="line"><span class="string">&quot;scripts&quot;: &#123;</span></span><br><span class="line"><span class="string">  &quot;dev&quot;: &quot;webpack serve --config config/webpack.dev.js&quot;,</span></span><br><span class="line"><span class="string">  &quot;build&quot;: &quot;webpack --config config/webpack.prd.js&quot;,</span></span><br><span class="line"><span class="string">  &quot;test&quot;: &quot;echo Error: no test specified &amp;&amp; exit 1&quot;</span></span><br><span class="line"><span class="string">&#125;,</span></span><br><span class="line"><span class="string">&quot;keywords&quot;: [],</span></span><br><span class="line"><span class="string">&quot;author&quot;: &quot;<span class="subst">$&#123;main&#125;</span>&quot;,</span></span><br><span class="line"><span class="string">&quot;license&quot;: &quot;ISC&quot;,</span></span><br><span class="line"><span class="string">&quot;dependencies&quot;: &#123;&#125;,</span></span><br><span class="line"><span class="string">&quot;devDependencies&quot;: &#123;&#125;</span></span><br><span class="line"><span class="string">&#125;`</span></span><br><span class="line"><span class="keyword">await</span> <span class="title function_">fsWrite</span>(<span class="string">&#x27;package.json&#x27;</span>,content)</span><br><span class="line">r1.<span class="title function_">close</span>()</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">createPackage</span>()</span><br><span class="line">r1.<span class="title function_">on</span>(<span class="string">&#x27;close&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">process.<span class="title function_">exit</span>(<span class="number">0</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;文件系统（File-System）&quot;&gt;&lt;a href=&quot;#文件系统（File-System）&quot; class=&quot;headerlink&quot; title=&quot;文件系统（File System）&quot;&gt;&lt;/a&gt;文件系统（File System）&lt;/h1&gt;&lt;blockquote&gt;
</summary>
      
    
    
    
    <category term="Node" scheme="http://example.com/categories/Node/"/>
    
    
  </entry>
  
  <entry>
    <title>Node基础</title>
    <link href="http://example.com/2024/10/31/node/1%E5%9F%BA%E7%A1%80/"/>
    <id>http://example.com/2024/10/31/node/1%E5%9F%BA%E7%A1%80/</id>
    <published>2024-10-31T09:15:22.499Z</published>
    <updated>2024-10-31T09:42:14.523Z</updated>
    
    <content type="html"><![CDATA[<h3 id="命令行窗口-小黑屏-、CMD窗口、终端、shell-的常用指令："><a href="#命令行窗口-小黑屏-、CMD窗口、终端、shell-的常用指令：" class="headerlink" title="命令行窗口(小黑屏)、CMD窗口、终端、shell 的常用指令："></a>命令行窗口(小黑屏)、CMD窗口、终端、shell 的常用指令：</h3><ul><li>dir 列出当前目录下的所有文件</li><li>cd 目录名 进入到指定的目录</li><li>md 目录名 创建一个文件夹</li><li>rd 目录名 删除一个文件夹</li></ul><p></p><h3 id="Node-js"><a href="#Node-js" class="headerlink" title="Node.js"></a>Node.js</h3><ul><li>一门后端语言(服务器端的程序语言)，能够连接数据库存取数据，能够接受和处理网络请求(服务器的响应，发送请求去获取数据)，单线程事件驱动，异步执行，不等待，提高IO(Input&#x2F;output)的处理速度和效率</li><li>Node是一款对ES标准实现的JS引擎</li><li>Node的中js引擎使用的chrome的v8引擎</li><li>Node仅仅对ES标准进行了实现，所以在Node中不包含DOM 和 BOM</li><li>Node的特点：<ol><li>非阻塞、异步的I&#x2F;O</li><li>事件和回调函数</li><li>单线程（主线程单线程，后台I&#x2F;O线程池）</li><li>跨平台</li></ol></li></ul><h3 id="包（package）"><a href="#包（package）" class="headerlink" title="包（package）"></a>包（package）</h3><ul><li>将多个模块组合为一个完整的功能，就是一个包</li><li>包结构<ul><li>bin — 二进制的可执行文件，一般都是一些工具包中才有</li><li>lib — js文件</li><li>doc — 文档</li><li>test — 测试代码</li><li>package.json — 包的描述文件，json格式<ul><li>name： 包名</li><li>version： 版本</li><li>dependencies： 依赖</li><li>main： 包的主要的文件</li><li>bin： 可执行文件</li></ul></li></ul></li></ul><p></p><h3 id="npm（Node-Package-Manager-node的包管理器）"><a href="#npm（Node-Package-Manager-node的包管理器）" class="headerlink" title="npm（Node Package Manager node的包管理器）"></a>npm（Node Package Manager node的包管理器）</h3><ul><li>npm会在安装完node以后，自动安装</li><li>通过npm下载的包都放到node_modules文件夹中，可以直接通过包名引入即可</li><li>npm的常用指令<ul><li>npm -v — 查看npm的版本</li><li>npm version — 查看所有模块的版本</li><li>npm init — 初始化项目（创建package.json）</li><li>npm i&#x2F;install 包名 — 安装指定的包</li><li>npm i&#x2F;install 包名 –save — 安装指定的包并添加依赖</li><li>npm i&#x2F;install 包名 –save-dev — 安装的包只用于开发环境</li><li>npm i&#x2F;install 包名 -g — 全局安装（一般都是一些工具）</li><li>npm i — 安装当前项目所依赖的包</li><li>npm s&#x2F;search 包名 — 搜索包</li><li>npm r&#x2F;remove 包名 — 删除一个包</li></ul></li></ul><h3 id="node的全局对象-—-global"><a href="#node的全局对象-—-global" class="headerlink" title="node的全局对象 — global"></a>node的全局对象 — global</h3><ul><li>在全局中创建的变量或函数都会作为global的属性或方法保存</li></ul><h2 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h2><ul><li>ES5中没有原生支持模块化，我们只能通过script标签引入js文件来实现模块化</li><li>在Node中为了对模块管理，引入了CommonJS规范</li></ul><h3 id="模块的定义"><a href="#模块的定义" class="headerlink" title="模块的定义"></a>模块的定义</h3><ul><li>在Node中一个js文件就是一个模块</li><li>默认情况下在js文件中编写的内容，都是运行在一个独立的函数中，外部的模块无法访问</li></ul><h3 id="模块的引用-—-require-函数"><a href="#模块的引用-—-require-函数" class="headerlink" title="模块的引用 — require()函数"></a>模块的引用 — require()函数</h3><ul><li>可以传递一个文件的路径作为参数，Node将会自动根据该路径来引入外部模块<ul><li>相对路径的引入：require(“.&#x2F;math”);</li><li>绝对路径的引入：require(“fs”);</li></ul></li><li>引入模块以后，该函数会返回一个对象，这个对象代表的是引入的模块</li><li>引入模块时，使用的就是模块标识，可以通过模块标识来找到指定的模块</li></ul><h3 id="暴露变量或方法-—-exports-module-exports"><a href="#暴露变量或方法-—-exports-module-exports" class="headerlink" title="暴露变量或方法 — exports &#x2F; module.exports"></a>暴露变量或方法 — exports &#x2F; module.exports</h3><blockquote><p>系统默认设置了 exports &#x3D; modules.exports</p></blockquote><ul><li><h3 id="exports"><a href="#exports" class="headerlink" title="exports"></a>exports</h3><ul><li>只需要将需要暴露给外部的变量或方法设置为exports的属性即可</li><li>只能设置单个属性来向外暴露</li><li>向外部暴露属性：exports.属性 &#x3D; 属性值;</li><li>向外部暴露方法：exports.方法名 &#x3D; 函数;</li></ul></li><li><h3 id="module-exports"><a href="#module-exports" class="headerlink" title="module.exports"></a>module.exports</h3><ul><li>module.exports既可以单个设置属性也可以整个赋值，一切以module.exports为准</li><li>module.exports.属性 &#x3D; 属性值</li><li>module.exports.方法名 &#x3D; 函数</li><li>module.exports &#x3D; {}</li></ul></li></ul><p></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">存在</span><br><span class="line"><span class="built_in">exports</span>.<span class="property">a</span> = <span class="number">1</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span>.<span class="property">b</span> = <span class="number">2</span></span><br><span class="line">已知</span><br><span class="line"><span class="built_in">exports</span> = <span class="variable language_">module</span>.<span class="property">exports</span></span><br><span class="line">因此</span><br><span class="line"><span class="built_in">exports</span> = &#123;<span class="attr">c</span>:<span class="number">3</span>&#125; </span><br><span class="line">不成立，输出时仍显示a，b</span><br><span class="line">但</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;<span class="attr">c</span>:<span class="number">3</span>&#125;</span><br><span class="line">成立， 输出为&#123;<span class="attr">c</span>:<span class="number">3</span>&#125;</span><br></pre></td></tr></table></figure><h3 id="模块的初始化"><a href="#模块的初始化" class="headerlink" title="模块的初始化"></a>模块的初始化</h3><ul><li>一个模块中的js代码仅在模块第一次使用时执行一次</li></ul><h3 id="模块的类型"><a href="#模块的类型" class="headerlink" title="模块的类型"></a>模块的类型</h3><ul><li><h3 id="核心模块"><a href="#核心模块" class="headerlink" title="核心模块"></a>核心模块</h3><ul><li>由node引擎提供的模块</li><li>核心模块的标识就是，模块的名字</li></ul></li><li><h3 id="文件模块"><a href="#文件模块" class="headerlink" title="文件模块"></a>文件模块</h3><ul><li>由用户自己创建的模块</li></ul></li><li><h3 id="路径模块"><a href="#路径模块" class="headerlink" title="路径模块"></a>路径模块</h3><ul><li><p>let path &#x3D; require(“path”)</p></li><li><p>获取路径信息扩展名 — <code>path.extname</code></p><ul><li>let info &#x3D; path.extname(“<a href="https://www.baidu.com/">https://www.baidu.com</a>“)</li><li>返回后缀名.com</li></ul></li><li><p>将数组的元素自动拼接成一个路径 — <code>path.resolve()</code></p></li><li><ul><li>let arr &#x3D; [‘&#x2F;sxt’,’xxx’, ‘ppp’]</li><li>let info1 &#x3D; path.resolve(…arr)</li><li>返回：当前文件在的系统盘:\sxt\xxx\ppp</li></ul></li><li><p>获取当前执行目录并拼接 — <code>path.join()</code></p><ul><li>let info2 &#x3D; path.join(__dirname, ‘sxt’, ‘xxx’, ‘ppp’)</li></ul></li><li><p>解析网址 — <code>str.split(&#39;/&#39;)</code></p></li><li><p>解析路径(根路径、目录、扩展名、文件名称、文件名) — <code>path.parse(__filename)</code></p></li><li><p>let url &#x3D; require(‘url’)</p></li><li><p>url.parse(httpUrl) — 解析路径</p></li><li><p>url.resolve(targetUrl, httpUrl) — 将两个路径合理拼接在一起</p></li></ul></li></ul><h3 id="系统模块"><a href="#系统模块" class="headerlink" title="系统模块"></a>系统模块</h3><ul><li>let os &#x3D; require(“os”)</li><li>查看cpu信息 — os.cpus() </li><li>查看整个内存大小 — os.totalmem()</li><li>查看系统架构 — os.arch()</li></ul><h3 id="模块的标识-—-模块的名字或路径"><a href="#模块的标识-—-模块的名字或路径" class="headerlink" title="模块的标识 — 模块的名字或路径"></a>模块的标识 — 模块的名字或路径</h3><ul><li>通过模块的标识来寻找模块的</li><li>对于核心模块（npm中下载的模块），直接使用模块的名字对其进行引入</li><li>对于自定义的文件模块，需要通过文件的路径来对模块进行引入<ul><li>路径可以是绝对路径，如果是相对路径必须以.&#x2F;或 ..&#x2F;开头</li></ul></li></ul><h3 id="模块的运行规则"><a href="#模块的运行规则" class="headerlink" title="模块的运行规则"></a>模块的运行规则</h3><ul><li>当node在执行模块中的代码时，它会将代码放进以下函数中<ul><li>function (exports, require, module, __filename, __dirname) {}</li></ul></li><li>实际上模块中的代码都是包装在一个函数中执行的，并且在函数执行时，同时传递进了5个实参<ul><li>exports — 该对象用来将变量或函数暴露到外部</li><li>require — 函数，用来引入外部的模块</li><li>module — module代表的是当前模块本身</li><li>__filename — 获取当前执行文件的完整路径</li><li>__dirname — 当前执行文件的目录的完整路径</li></ul></li></ul><h3 id="模块的查找规则"><a href="#模块的查找规则" class="headerlink" title="模块的查找规则"></a>模块的查找规则</h3><ul><li><p>node在使用模块名字来引入模块时，它会首先在当前目录的node_modules中寻找是否含有该模块</p><ul><li>如果有则直接使用，如果没有则去上一级目录的node_modules中寻找</li><li>如果有则直接使用，如果没有则再去上一级目录寻找，直到找到为止</li><li>直到找到磁盘的根目录，如果依然没有，则报错</li></ul></li><li><p>arguments.callee</p><ul><li>这个属性保存的是当前执行的函数对象</li></ul></li></ul><h2 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h2><ul><li>发送和接受事件</li><li>let event &#x3D; require(“events”)</li><li>let ee &#x3D; new event.eventEmitter()</li><li>监听事件：let eventEmitter.on(‘事件名’, ()&#x3D;&gt; {})</li><li>触发事件：let eventEmitter.emit(‘事件名’,事件的数据data)</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> events = <span class="built_in">require</span>(<span class="string">&quot;events&quot;</span>)</span><br><span class="line"><span class="keyword">let</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>)</span><br><span class="line"><span class="keyword">let</span> ee = <span class="keyword">new</span> events.<span class="title class_">EventEmitter</span>()</span><br><span class="line"></span><br><span class="line">ee.<span class="title function_">on</span>(<span class="string">&quot;test&quot;</span>, <span class="function">(<span class="params">msg</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(msg)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;输出test&quot;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 同步</span></span><br><span class="line">fsReadDir = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">fs.<span class="title function_">readdir</span>(<span class="string">&quot;./&quot;</span>, <span class="function">(<span class="params">err, files</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="comment">// files 是一个包含该目录所有文件的数组</span></span><br><span class="line"><span class="keyword">if</span>(!err) &#123;</span><br><span class="line">ee.<span class="title function_">emit</span>(<span class="string">&quot;test&quot;</span>,files)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fsReadDir</span>()</span><br><span class="line"><span class="comment">// 异步写法</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">fsRead</span> = (<span class="params">url: string</span>) =&gt; &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">fs.<span class="title function_">readFile</span>(url, &#123;<span class="attr">flag</span>: <span class="string">&#x27;r&#x27;</span>, <span class="attr">encoding</span>: <span class="string">&quot;utf-8&quot;</span>&#125;, <span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(!err) &#123;</span><br><span class="line"><span class="title function_">resolve</span>(data)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="title function_">reject</span>(err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;)</span><br><span class="line">&#125; </span><br><span class="line"><span class="title function_">fsRead</span>(path).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">ee.<span class="title function_">emit</span>(<span class="string">&quot;test&quot;</span>,res)</span><br><span class="line">&#125;)</span><br><span class="line">|| 两者差不多，但下面少一个回调函数</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Test</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; &#123;</span><br><span class="line"><span class="keyword">let</span> res = <span class="keyword">await</span> <span class="title function_">fsRead</span>()</span><br><span class="line">ee.<span class="title function_">emit</span>(<span class="string">&quot;test&quot;</span>,res)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Test</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 老式写法</span></span><br><span class="line"><span class="keyword">let</span> <span class="title class_">Event</span> = &#123;</span><br><span class="line"><span class="attr">event</span>: &#123;&#125;,</span><br><span class="line"><span class="attr">on</span>: <span class="function">(<span class="params">eventName, eventFn</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="comment">// 如果数组中存在这个事件，就及那个对应事件的函数赋给它，不存在则先添加事件名在赋值事件函数</span></span><br><span class="line"><span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">event</span>.<span class="property">eventName</span>) &#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">event</span>[eventName].<span class="title function_">push</span>(eventFn)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">event</span>[eventName] = []</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">event</span>[eventName].<span class="title function_">push</span>(eventFn)</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">emit</span>: <span class="function">(<span class="params">eventName, data</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="comment">// 数组存在这个事件就调用事件函数并返回数据</span></span><br><span class="line"><span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">event</span>[eventName])&#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">event</span>[eventName].<span class="title function_">forEach</span>(<span class="function"><span class="params">itemFn</span> =&gt;</span> &#123;</span><br><span class="line"><span class="title function_">itemFn</span>(data)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">eventEmitter.<span class="title function_">on</span>(<span class="string">&quot;event1&quot;</span>, <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="comment">// ... 一些事件</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;命令行窗口-小黑屏-、CMD窗口、终端、shell-的常用指令：&quot;&gt;&lt;a href=&quot;#命令行窗口-小黑屏-、CMD窗口、终端、shell-的常用指令：&quot; class=&quot;headerlink&quot; title=&quot;命令行窗口(小黑屏)、CMD窗口、终端、shell 的常</summary>
      
    
    
    
    <category term="Node" scheme="http://example.com/categories/Node/"/>
    
    
  </entry>
  
  <entry>
    <title>ES6-字符串</title>
    <link href="http://example.com/2024/10/31/ES6/es6-%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    <id>http://example.com/2024/10/31/ES6/es6-%E5%AD%97%E7%AC%A6%E4%B8%B2/</id>
    <published>2024-10-31T07:54:04.664Z</published>
    <updated>2024-10-31T08:06:03.170Z</updated>
    
    <content type="html"><![CDATA[<h2 id="字符的-Unicode-表示法"><a href="#字符的-Unicode-表示法" class="headerlink" title="字符的 Unicode 表示法"></a>字符的 Unicode 表示法</h2><ul><li><p>采用\uxxxx形式表示一个字符(\u0000~\uFFFF)</p></li><li><p>超范围的字符，必须用两个双字节的形式表示。</p></li><li><p>“\u20BB7”         &#x2F;&#x2F; “7”</p></li><li><p>“\uD842\uDFB7”    &#x2F;&#x2F; “𠮷”</p></li><li><p>“\u{20BB7}”       &#x2F;&#x2F; “𠮷”</p></li></ul><h2 id="js六种方法表字符"><a href="#js六种方法表字符" class="headerlink" title="js六种方法表字符"></a>js六种方法表字符</h2><ul><li>‘\z’ &#x3D;&#x3D;&#x3D; ‘z’  &#x2F;&#x2F; true</li><li>‘\172’ &#x3D;&#x3D;&#x3D; ‘z’ &#x2F;&#x2F; true</li><li>‘\x7A’ &#x3D;&#x3D;&#x3D; ‘z’ &#x2F;&#x2F; true</li><li>‘\u007A’ &#x3D;&#x3D;&#x3D; ‘z’ &#x2F;&#x2F; true</li><li>‘\u{7A}’ &#x3D;&#x3D;&#x3D; ‘z’ &#x2F;&#x2F; true</li></ul><h2 id="for…of循环遍历"><a href="#for…of循环遍历" class="headerlink" title="for…of循环遍历"></a>for…of循环遍历</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> codePoint <span class="keyword">of</span> <span class="string">&#x27;foo&#x27;</span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(codePoint)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Js-规定有5个字符，不能在字符串里面直接使用，只能使用转义形式。"><a href="#Js-规定有5个字符，不能在字符串里面直接使用，只能使用转义形式。" class="headerlink" title="Js 规定有5个字符，不能在字符串里面直接使用，只能使用转义形式。"></a>Js 规定有5个字符，不能在字符串里面直接使用，只能使用转义形式。</h2><ul><li>U+005C：反斜杠（reverse solidus)</li><li>U+000D：回车（carriage return）</li><li>U+2028：行分隔符（line separator）</li><li>U+2029：段分隔符（paragraph separator）</li><li>U+000A：换行符（line feed）</li></ul><h2 id="JSON-stringify-的改造"><a href="#JSON-stringify-的改造" class="headerlink" title="JSON.stringify() 的改造"></a>JSON.stringify() 的改造</h2><ul><li>遇到0xD800到0xDFFF之间的单个码点，或不存在的配对形式，它会返回转义字符串，留给应用自己决定下一步的处理。</li><li>JSON.stringify(‘\u{D834}’)        &#x2F;&#x2F; “”\uD834””</li><li>JSON.stringify(‘\uDF06\uD834’)   &#x2F;&#x2F; “”\udf06\ud834””</li></ul><h2 id="模板字符串（反引号-标识）"><a href="#模板字符串（反引号-标识）" class="headerlink" title="模板字符串（反引号&#96;标识）"></a><code>模板字符串</code>（反引号&#96;标识）</h2><ul><li>模板字符串中嵌入变量，需要将变量名写在${}之中。<ul><li><code>$&#123;x&#125; + $&#123;y&#125; = $&#123;x + y&#125;</code></li></ul></li><li>能调用函数<br><code>foo $&#123;fn()&#125; bar</code></li></ul><h2 id="标签模板"><a href="#标签模板" class="headerlink" title="标签模板"></a>标签模板</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">alert<span class="string">`hello`</span></span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="title function_">alert</span>([<span class="string">&#x27;hello&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">let</span> b = <span class="number">10</span>;</span><br><span class="line"><span class="comment">//先处理参数，之后调用函数</span></span><br><span class="line">tag<span class="string">`Hello <span class="subst">$&#123; a + b &#125;</span> world <span class="subst">$&#123; a * b &#125;</span>`</span>;</span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="title function_">tag</span>([<span class="string">&#x27;Hello &#x27;</span>, <span class="string">&#x27; world &#x27;</span>, <span class="string">&#x27;&#x27;</span>], <span class="number">15</span>, <span class="number">50</span>);</span><br></pre></td></tr></table></figure><h2 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h2><h3 id="1、String-fromCodePoint"><a href="#1、String-fromCodePoint" class="headerlink" title="1、String.fromCodePoint()"></a>1、String.fromCodePoint()</h3><ul><li>从 Unicode 码点返回对应字符</li></ul><h3 id="2、codePointAt"><a href="#2、codePointAt" class="headerlink" title="2、codePointAt()"></a>2、codePointAt()</h3><ul><li>处理4 个字节储存的字符，返回一个字符的码点。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> s = <span class="string">&#x27;𠮷a&#x27;</span>;   <span class="comment">// 0x20BB7</span></span><br><span class="line">s.<span class="title function_">codePointAt</span>(<span class="number">0</span>) <span class="comment">// 20  134071</span></span><br><span class="line">s.<span class="title function_">codePointAt</span>(<span class="number">1</span>) <span class="comment">// BB 57271</span></span><br><span class="line">s.<span class="title function_">codePointAt</span>(<span class="number">2</span>) <span class="comment">// 7 97  </span></span><br><span class="line"></span><br><span class="line">解决字符串参数位置识别不对：</span><br><span class="line"><span class="number">1</span>、<span class="keyword">for</span>...<span class="keyword">of</span>循环</span><br><span class="line"><span class="keyword">let</span> s = <span class="string">&#x27;𠮷a&#x27;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> ch <span class="keyword">of</span> s) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(ch.<span class="title function_">codePointAt</span>(<span class="number">0</span>).<span class="title function_">toString</span>(<span class="number">16</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>、扩展运算符（...）</span><br><span class="line"><span class="keyword">let</span> arr = [...<span class="string">&#x27;𠮷a&#x27;</span>]; <span class="comment">// arr.length === 2</span></span><br><span class="line">arr.<span class="title function_">forEach</span>(</span><br><span class="line"><span class="function"><span class="params">ch</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(ch.<span class="title function_">codePointAt</span>(<span class="number">0</span>).<span class="title function_">toString</span>(<span class="number">16</span>))</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试是否是四个字节</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">is32Bit</span>(<span class="params">c</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> c.<span class="title function_">codePointAt</span>(<span class="number">0</span>) &gt; <span class="number">0xFFFF</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">is32Bit</span>(<span class="string">&quot;𠮷&quot;</span>) <span class="comment">// true</span></span><br><span class="line"><span class="title function_">is32Bit</span>(<span class="string">&quot;a&quot;</span>) <span class="comment">// false</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="3、String-raw"><a href="#3、String-raw" class="headerlink" title="3、String.raw()"></a>3、String.<code>raw()</code></h3><ul><li>原有多少斜杠，<code>实际返回原来斜杠的两倍</code>，但肉眼看不出来</li><li>String.raw<code>Hi\n$&#123;2+3&#125;!</code>  &#x2F;&#x2F; 实际返回 “Hi\n5!”，显示的是转义后的结果 “Hi\n5!”</li><li>String.raw<code>Hi\\n</code> &#x3D;&#x3D;&#x3D; “Hi\\n” &#x2F;&#x2F; true</li></ul><h3 id="4、normalize"><a href="#4、normalize" class="headerlink" title="4、normalize()"></a>4、normalize()</h3><ul><li>将字符的不同表示方法统一为同样的形式，这称为 Unicode 正规化。</li></ul><h3 id="5、includes"><a href="#5、includes" class="headerlink" title="5、includes()"></a>5、includes()</h3><ul><li>返回布尔值，表示是否找到了参数字符串。</li></ul><h3 id="6、startsWith"><a href="#6、startsWith" class="headerlink" title="6、startsWith()"></a>6、startsWith()</h3><ul><li>返回布尔值，表示参数字符串是否在原字符串的头部。</li></ul><h3 id="7、endsWith"><a href="#7、endsWith" class="headerlink" title="7、endsWith()"></a>7、endsWith()</h3><ul><li>返回布尔值，表示参数字符串是否在原字符串的尾部。</li></ul><h3 id="8、repeat"><a href="#8、repeat" class="headerlink" title="8、repeat()"></a>8、repeat()</h3><ul><li>返回一个新字符串，表示将原字符串重复n次。</li><li>‘hello’.repeat(2) &#x2F;&#x2F; “hellohello”</li><li>如果参数是小数会向上取整，负数或无穷会报错，0到-1和NaN等于0，字符串会转数字</li></ul><h3 id="9、padStart-用于头部补全长度，padEnd-用于尾部补全长度。"><a href="#9、padStart-用于头部补全长度，padEnd-用于尾部补全长度。" class="headerlink" title="9、padStart()用于头部补全长度，padEnd()用于尾部补全长度。"></a>9、padStart()用于头部补全长度，padEnd()用于尾部补全长度。</h3><ul><li>注：补全长度要大于原长度</li><li>两个参数，第一个参数是字符串补全生效的最大长度，第二个参数是用来补全的字符串（省略默认空格）过了最大长度，则会截去超出位数的补全字符串。</li><li>补全的字符串+原字符串长度之和超</li></ul><h3 id="10、trimStart-消除字符串头部的空格，trimEnd-消除尾部的空格。返回的是新字符串"><a href="#10、trimStart-消除字符串头部的空格，trimEnd-消除尾部的空格。返回的是新字符串" class="headerlink" title="10、trimStart()消除字符串头部的空格，trimEnd()消除尾部的空格。返回的是新字符串"></a>10、trimStart()消除字符串头部的空格，trimEnd()消除尾部的空格。返回的是新字符串</h3><h3 id="11、matchAll-返回一个正则表达式在当前字符串的所有匹配，以数组的形式"><a href="#11、matchAll-返回一个正则表达式在当前字符串的所有匹配，以数组的形式" class="headerlink" title="11、matchAll()返回一个正则表达式在当前字符串的所有匹配，以数组的形式"></a>11、matchAll()返回一个正则表达式在当前字符串的所有匹配，以数组的形式</h3><h3 id="12、replaceAll-替换前，替换后-方法，全部替换。返回新字符串"><a href="#12、replaceAll-替换前，替换后-方法，全部替换。返回新字符串" class="headerlink" title="12、replaceAll(替换前，替换后)方法，全部替换。返回新字符串"></a>12、replaceAll(替换前，替换后)方法，全部替换。返回新字符串</h3><ul><li>第一个参数：字符串&#x2F;带g的正则表达式</li><li>第二个参数：函数&#x2F;字符串，可以带有特殊字符</li><li>$&amp;：匹配的字符串。</li><li>$&#96; ：匹配结果前面的文本。</li><li>$’：匹配结果后面的文本。</li><li>$n：匹配成功的第n组内容，n是从1开始的自然数。这个参数生效的前提是，第一个参数必须是正则表达式。</li><li>$$：指代美元符号$。</li></ul><h3 id="13、at"><a href="#13、at" class="headerlink" title="13、at()"></a>13、at()</h3><ul><li>接受一个整数作为参数，返回参数指定位置的字符，支持负索引（即倒数的位置）。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;字符的-Unicode-表示法&quot;&gt;&lt;a href=&quot;#字符的-Unicode-表示法&quot; class=&quot;headerlink&quot; title=&quot;字符的 Unicode 表示法&quot;&gt;&lt;/a&gt;字符的 Unicode 表示法&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;采用&#92;uxxxx形</summary>
      
    
    
    
    <category term="es6" scheme="http://example.com/categories/es6/"/>
    
    
  </entry>
  
  <entry>
    <title>ES6-数组的拓展</title>
    <link href="http://example.com/2024/10/31/ES6/es6-%E6%95%B0%E7%BB%84%E7%9A%84%E6%8B%93%E5%B1%95/"/>
    <id>http://example.com/2024/10/31/ES6/es6-%E6%95%B0%E7%BB%84%E7%9A%84%E6%8B%93%E5%B1%95/</id>
    <published>2024-10-31T07:54:04.649Z</published>
    <updated>2024-10-31T08:08:17.410Z</updated>
    
    <content type="html"><![CDATA[<h3 id="扩展运算符：…"><a href="#扩展运算符：…" class="headerlink" title="扩展运算符：…"></a>扩展运算符：…</h3><h3 id="Array-from-：转数组"><a href="#Array-from-：转数组" class="headerlink" title="Array.from()：转数组"></a>Array.from()：转数组</h3><h3 id="Array-of-：将一组值转为数组"><a href="#Array-of-：将一组值转为数组" class="headerlink" title="Array.of()：将一组值转为数组"></a>Array.of()：将一组值转为数组</h3><h3 id="copyWithin-："><a href="#copyWithin-：" class="headerlink" title="copyWithin()："></a>copyWithin()：</h3><ul><li>Array.copyWithin(定位, 从定位开始读, 停止读) ：复制到定位的位置（原有数据会覆盖），返回新数组</li></ul><h3 id="find-，findIndex-，findLast-，findLastIndex"><a href="#find-，findIndex-，findLast-，findLastIndex" class="headerlink" title="find()，findIndex()，findLast()，findLastIndex()"></a>find()，findIndex()，findLast()，findLastIndex()</h3><ul><li>find()：找出第一个符合条件的数组成员，没有返undefined           </li><li>findIndex()：找出第一个符合条件的数组成员，没有返-1</li><li>findLast()： 从后面到前面找起</li><li>findLastIndex()：从后面到前面找起</li></ul><h3 id="fill-填充数，填充起始位，结束位-给值填充一个数组"><a href="#fill-填充数，填充起始位，结束位-给值填充一个数组" class="headerlink" title="fill(填充数，填充起始位，结束位)给值填充一个数组"></a>fill(填充数，填充起始位，结束位)给值填充一个数组</h3><ul><li>[‘a’, ‘b’, ‘c’].fill(7, 1, 2)   &#x2F;&#x2F; [‘a’, 7, ‘c’]</li></ul><h3 id="toReversed-，toSorted-，toSpliced-，with-—-不改变原数组，而是返回原数组操作后的拷贝"><a href="#toReversed-，toSorted-，toSpliced-，with-—-不改变原数组，而是返回原数组操作后的拷贝" class="headerlink" title="toReversed()，toSorted()，toSpliced()，with() — 不改变原数组，而是返回原数组操作后的拷贝"></a>toReversed()，toSorted()，toSpliced()，with() — 不改变原数组，而是返回原数组操作后的拷贝</h3><ul><li>toReversed()对应reverse()，用来颠倒数组成员的位置。</li><li>toSorted()对应sort()，用来对数组成员排序。</li><li>toSpliced()对应splice()，用来在指定位置，删除指定数量的成员，并插入新成员。</li><li>with(index, value)对应splice(index, 1, value)，用来将指定位置的成员替换为新的值。</li></ul><h3 id="⭐-group-、groupToMap-—-将数组成员分组"><a href="#⭐-group-、groupToMap-—-将数组成员分组" class="headerlink" title="⭐ group()、groupToMap() — 将数组成员分组"></a>⭐ group()、groupToMap() — 将数组成员分组</h3><ul><li>group((数组当前成员，该成员的索引，原数组) &#x3D;&gt; {return  条件 ? ‘分组名1’ ：’分组名2’ }) — 按照字符串分组</li><li>groupToMap((数组当前成员，该成员的索引，原数组) &#x3D;&gt; {return  条件 ? 分组对象名1 ：分组对象名2 }) — 按照对象分组<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> array = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">const</span> odd  = &#123; <span class="attr">odd</span>: <span class="literal">true</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> even = &#123; <span class="attr">even</span>: <span class="literal">true</span> &#125;;</span><br><span class="line">array.<span class="title function_">groupToMap</span>(<span class="function">(<span class="params">num, index, array</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">return</span> num % <span class="number">2</span> === <span class="number">0</span> ? <span class="attr">even</span>: odd;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//  Map &#123; &#123;odd: true&#125;: [1, 3, 5], &#123;even: true&#125;: [2, 4] &#125;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="⭐-数组的空位"><a href="#⭐-数组的空位" class="headerlink" title="⭐ 数组的空位"></a>⭐ 数组的空位</h3><ul><li>Array(3) &#x2F;&#x2F; [, , ,]  —- 遍历空位识别为undefined</li><li>Array.from()、扩展运算符（…）、entries()、keys()、values()、find()和findIndex()会将空位处理成undefined。</li><li>copyWithin()会连空位一起拷贝。</li><li>fill()会将空位视为正常的数组位置。</li><li>for…of循环也会遍历空位。</li><li>map()方法遍历，空位是会跳过的。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;扩展运算符：…&quot;&gt;&lt;a href=&quot;#扩展运算符：…&quot; class=&quot;headerlink&quot; title=&quot;扩展运算符：…&quot;&gt;&lt;/a&gt;扩展运算符：…&lt;/h3&gt;&lt;h3 id=&quot;Array-from-：转数组&quot;&gt;&lt;a href=&quot;#Array-from-：转数组&quot; c</summary>
      
    
    
    
    <category term="es6" scheme="http://example.com/categories/es6/"/>
    
    
  </entry>
  
  <entry>
    <title>ES6-数值的拓展</title>
    <link href="http://example.com/2024/10/31/ES6/es6-%E6%95%B0%E5%80%BC%E7%9A%84%E6%8B%93%E5%B1%95/"/>
    <id>http://example.com/2024/10/31/ES6/es6-%E6%95%B0%E5%80%BC%E7%9A%84%E6%8B%93%E5%B1%95/</id>
    <published>2024-10-31T07:54:04.642Z</published>
    <updated>2024-10-31T08:10:31.408Z</updated>
    
    <content type="html"><![CDATA[<h2 id="二八进制表示法"><a href="#二八进制表示法" class="headerlink" title="二八进制表示法"></a>二八进制表示法</h2><ul><li>八进制 前缀0o</li><li>二进制 前缀0b</li><li>转为十进制 使用Number方法</li></ul><h2 id="不支持数值分隔符（-）"><a href="#不支持数值分隔符（-）" class="headerlink" title="不支持数值分隔符（_）"></a>不支持数值分隔符（_）</h2><ul><li>Number()</li><li>parseInt() </li><li>parseFloat()</li></ul><h2 id="Number-isFinite-Number-isNaN"><a href="#Number-isFinite-Number-isNaN" class="headerlink" title="Number.isFinite(), Number.isNaN()"></a>Number.isFinite(), Number.isNaN()</h2><ul><li>Number.isFinite()用来检查一个数值是否为有限的（finite）,不是数值返回false</li><li>Number.isNaN()用来检查一个值是否为NaN。</li><li>Number.isNaN(9&#x2F;NaN) &#x2F;&#x2F; true</li><li>Number.isNaN(‘true’ &#x2F; 0) &#x2F;&#x2F; true</li><li>Number.isNaN(‘true’ &#x2F; ‘true’) &#x2F;&#x2F; true</li></ul><h2 id="Number-isInteger-是否为整数"><a href="#Number-isInteger-是否为整数" class="headerlink" title="Number.isInteger() 是否为整数"></a>Number.isInteger() 是否为整数</h2><ul><li>数值精度最多可以达到 53 个二进制位（1 个隐藏位与 52 个有效位）。如果数值的精度超过这个限度，第54位及后面的位就会被丢弃，这种情况下，Number.isInteger可能会误判。</li><li>Number.isInteger(3.0000000000000002) &#x2F;&#x2F; true</li></ul><h2 id="Number-EPSILON"><a href="#Number-EPSILON" class="headerlink" title="Number.EPSILON"></a>Number.EPSILON</h2><ul><li>表示 1 与大于 1 的最小浮点数之间的差。（最小误差范围）</li></ul><h2 id="Number-MAX-SAFE-INTEGER和Number-MIN-SAFE-INTEGER"><a href="#Number-MAX-SAFE-INTEGER和Number-MIN-SAFE-INTEGER" class="headerlink" title="Number.MAX_SAFE_INTEGER和Number.MIN_SAFE_INTEGER"></a>Number.MAX_SAFE_INTEGER和Number.MIN_SAFE_INTEGER</h2><ul><li><p>这两个常量，用来表示这个范围的上下限</p></li><li><p>Number.MAX_SAFE_INTEGER &#x3D;&#x3D;&#x3D; Math.pow(2, 53) - 1&#x2F;&#x2F; true</p></li><li><p>Number.MAX_SAFE_INTEGER &#x3D;&#x3D;&#x3D; 9007199254740991&#x2F;&#x2F; true</p></li><li><p>Number.MIN_SAFE_INTEGER &#x3D;&#x3D;&#x3D; -Number.MAX_SAFE_INTEGER&#x2F;&#x2F; true</p></li><li><p>Number.MIN_SAFE_INTEGER &#x3D;&#x3D;&#x3D; -9007199254740991&#x2F;&#x2F; true</p></li></ul><h2 id="Number-isSafeInteger-则是用来判断一个整数是否落在这个范围之内。"><a href="#Number-isSafeInteger-则是用来判断一个整数是否落在这个范围之内。" class="headerlink" title="Number.isSafeInteger()则是用来判断一个整数是否落在这个范围之内。"></a>Number.isSafeInteger()则是用来判断一个整数是否落在这个范围之内。</h2><h2 id="Math-trunc-去除一个数的小数部分，返回整数部分。"><a href="#Math-trunc-去除一个数的小数部分，返回整数部分。" class="headerlink" title="Math.trunc()  去除一个数的小数部分，返回整数部分。"></a>Math.trunc()  去除一个数的小数部分，返回整数部分。</h2><ul><li>非数值，先转数值</li><li>控制或无法截取整数的值，返回NAN</li></ul><h2 id="Math-sign方法"><a href="#Math-sign方法" class="headerlink" title="Math.sign方法"></a>Math.sign方法</h2><ul><li>用来判断一个数到底是正数、负数、还是零。对于非数值，会先将其转换为数值。</li><li>参数为正数，返回+1；</li><li>参数为负数，返回-1；</li><li>参数为 0，返回0；</li><li>参数为-0，返回-0;</li><li>其他值，返回NaN。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;二八进制表示法&quot;&gt;&lt;a href=&quot;#二八进制表示法&quot; class=&quot;headerlink&quot; title=&quot;二八进制表示法&quot;&gt;&lt;/a&gt;二八进制表示法&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;八进制 前缀0o&lt;/li&gt;
&lt;li&gt;二进制 前缀0b&lt;/li&gt;
&lt;li&gt;转为十进制 使用</summary>
      
    
    
    
    <category term="es6" scheme="http://example.com/categories/es6/"/>
    
    
  </entry>
  
  <entry>
    <title>ES6-解构赋值</title>
    <link href="http://example.com/2024/10/31/ES6/es6-%E8%A7%A3%E6%9E%84%E8%B5%8B%E5%80%BC/"/>
    <id>http://example.com/2024/10/31/ES6/es6-%E8%A7%A3%E6%9E%84%E8%B5%8B%E5%80%BC/</id>
    <published>2024-10-31T07:54:04.637Z</published>
    <updated>2024-10-31T08:12:51.004Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>从数组和对象中提取值，对变量进行赋值</p></blockquote><h2 id="数组（一-一-对-应）"><a href="#数组（一-一-对-应）" class="headerlink" title="数组（一 一 对 应）"></a>数组（一 一 对 应）</h2><h3 id="完全解构（必须一一对应）："><a href="#完全解构（必须一一对应）：" class="headerlink" title="完全解构（必须一一对应）："></a>完全解构（必须一一对应）：</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> [foo, [[bar], baz]] = [<span class="number">1</span>, [[<span class="number">2</span>], <span class="number">3</span>]];</span><br><span class="line">foo <span class="comment">// 1</span></span><br><span class="line">bar <span class="comment">// 2</span></span><br><span class="line">baz <span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果想赋后面的值的，且前面不赋值，则可以用&#x27;，&#x27;替代前面的参数,多少个参数多少个&#x27;，&#x27;</span></span><br><span class="line"><span class="comment">// 解构不成功的变量，值为undefined                </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> [head, ...tail] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line">head <span class="comment">// 1</span></span><br><span class="line">tail <span class="comment">// [2, 3, 4]</span></span><br></pre></td></tr></table></figure><h3 id="不完全解构（即等号左边的模式，只匹配一部分的等号左边的数组）："><a href="#不完全解构（即等号左边的模式，只匹配一部分的等号左边的数组）：" class="headerlink" title="不完全解构（即等号左边的模式，只匹配一部分的等号左边的数组）："></a>不完全解构（即等号左边的模式，只匹配一部分的等号左边的数组）：</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> [a, [b], d] = [<span class="number">1</span>, [<span class="number">2</span>, <span class="number">3</span>], <span class="number">4</span>];</span><br><span class="line">a <span class="comment">// 1</span></span><br><span class="line">b <span class="comment">// 2</span></span><br><span class="line">d <span class="comment">// 4</span></span><br></pre></td></tr></table></figure><h2 id="默认值"><a href="#默认值" class="headerlink" title="默认值"></a>默认值</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> [foo = <span class="literal">true</span>] = [];</span><br><span class="line">foo <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> [x, y = <span class="string">&#x27;b&#x27;</span>] = [<span class="string">&#x27;a&#x27;</span>]; <span class="comment">// x=&#x27;a&#x27;, y=&#x27;b&#x27;</span></span><br><span class="line"><span class="keyword">let</span> [x, y = <span class="string">&#x27;b&#x27;</span>] = [<span class="string">&#x27;a&#x27;</span>, <span class="literal">undefined</span>]; <span class="comment">// x=&#x27;a&#x27;, y=&#x27;b&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 数组/对象成员严格等于undefined，默认值才会生效。</span></span><br><span class="line"><span class="comment">// 数组/对象成员是null，默认值就不会生效</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> [x = <span class="number">1</span>] = [<span class="literal">undefined</span>];    </span><br><span class="line">x <span class="comment">// 1 </span></span><br><span class="line"><span class="string">``</span><span class="string">`        </span></span><br><span class="line"><span class="string">## 对象</span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>javascript</span><br><span class="line"><span class="comment">// 解构失败，返回undefined</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> &#123; opp &#125; = &#123; <span class="attr">foo</span>: <span class="string">&#x27;aaa&#x27;</span>, <span class="attr">bar</span>: <span class="string">&#x27;bbb&#x27;</span> &#125;;</span><br><span class="line">opp <span class="comment">// undefined</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// console.log赋值到log变量</span></span><br><span class="line"><span class="keyword">const</span> &#123; log &#125; = <span class="variable language_">console</span>;</span><br><span class="line"><span class="title function_">log</span>(<span class="string">&#x27;hello&#x27;</span>) <span class="comment">// hello</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 变量名与属性名不一致（真正被赋值的是后者，而不是前者。）</span></span><br><span class="line"><span class="keyword">let</span> &#123; <span class="attr">foo</span>: baz &#125; = &#123; <span class="attr">foo</span>: <span class="string">&#x27;aaa&#x27;</span>, <span class="attr">bar</span>: <span class="string">&#x27;bbb&#x27;</span> &#125;;</span><br><span class="line">baz <span class="comment">// &quot;aaa&quot;</span></span><br><span class="line">foo <span class="comment">// error: foo is not defined</span></span><br></pre></td></tr></table></figure><h2 id="嵌套"><a href="#嵌套" class="headerlink" title="嵌套"></a>嵌套</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line"><span class="attr">p</span>: [</span><br><span class="line"><span class="string">&#x27;Hello&#x27;</span>,</span><br><span class="line">&#123; <span class="attr">y</span>: <span class="string">&#x27;World&#x27;</span> &#125;</span><br><span class="line">]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> &#123; p, <span class="attr">p</span>: [x, &#123; y &#125;] &#125; = obj;</span><br><span class="line">x <span class="comment">// &quot;Hello&quot;</span></span><br><span class="line">y <span class="comment">// &quot;World&quot;</span></span><br><span class="line">p <span class="comment">// [&quot;Hello&quot;, &#123;y: &quot;World&quot;&#125;] </span></span><br></pre></td></tr></table></figure><h2 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h2><p>1）如果要将一个<code>已经声明的变量</code>用于解构赋值，必须非常小心。</p><pre><code>    // 错误的写法                // 正确的写法    let x;                      let x;    &#123;x&#125; = &#123;x: 1&#125;;               (&#123;x&#125; = &#123;x: 1&#125;);</code></pre><p>2）解构赋值允许等号左边的模式之中，不放置任何变量名</p><ul><li>示例：({} &#x3D; [true, false]);</li></ul><p>3）数组本质是特殊的对象，因此对数组进行对象属性的解构。</p><pre><code>let arr = [1, 2, 3];let &#123;0 : first, [arr.length - 1] : last&#125; = arr;first // 1last // 3</code></pre><p>4）不要使用圆括号</p><h2 id="字符串（被转换成了一个类数组的对象）"><a href="#字符串（被转换成了一个类数组的对象）" class="headerlink" title="字符串（被转换成了一个类数组的对象）"></a>字符串（被转换成了一个类数组的对象）</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 类似数组中length属性</span></span><br><span class="line"><span class="keyword">let</span> &#123;length : len&#125; = <span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line">len <span class="comment">// 5</span></span><br></pre></td></tr></table></figure><h2 id="数值、布尔值（等号右边不管是什么，会先转为对象）"><a href="#数值、布尔值（等号右边不管是什么，会先转为对象）" class="headerlink" title="数值、布尔值（等号右边不管是什么，会先转为对象）"></a>数值、布尔值（等号右边不管是什么，会先转为对象）</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123;<span class="attr">toString</span>: s&#125; = <span class="number">123</span>;</span><br><span class="line">s === <span class="title class_">Number</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span> <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> &#123;<span class="attr">toString</span>: s&#125; = <span class="literal">true</span>;</span><br><span class="line">s === <span class="title class_">Boolean</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span> <span class="comment">// true </span></span><br><span class="line"></span><br><span class="line"><span class="comment">// undefined和null无法转为对象，会报错</span></span><br></pre></td></tr></table></figure><h2 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h2><ul><li>遍历时数组存在undefined，则会被默认值替代<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="literal">undefined</span>, <span class="number">3</span>].<span class="title function_">map</span>(<span class="function">(<span class="params">x = <span class="string">&#x27;yes&#x27;</span></span>) =&gt;</span> x);</span><br><span class="line"><span class="comment">// [ 1, &#x27;yes&#x27;, 3 ]</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;从数组和对象中提取值，对变量进行赋值&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;数组（一-一-对-应）&quot;&gt;&lt;a href=&quot;#数组（一-一-对-应）&quot; class=&quot;headerlink&quot; title=&quot;数组（一 一 对 应）&quot;&gt;&lt;/a&gt;</summary>
      
    
    
    
    <category term="es6" scheme="http://example.com/categories/es6/"/>
    
    
  </entry>
  
  <entry>
    <title>ES6-函数的拓展</title>
    <link href="http://example.com/2024/10/31/ES6/es6-%E5%87%BD%E6%95%B0%E7%9A%84%E6%8B%93%E5%B1%95/"/>
    <id>http://example.com/2024/10/31/ES6/es6-%E5%87%BD%E6%95%B0%E7%9A%84%E6%8B%93%E5%B1%95/</id>
    <published>2024-10-31T07:54:04.635Z</published>
    <updated>2024-10-31T08:15:36.080Z</updated>
    
    <content type="html"><![CDATA[<h2 id="默认值"><a href="#默认值" class="headerlink" title="默认值"></a>默认值</h2><ul><li>ES6 允许为函数的参数设置默认值，即直接写在参数定义的后面。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">log</span>(<span class="params">x, y = <span class="string">&#x27;World&#x27;</span></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(x, y);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="函数的-length-属性"><a href="#函数的-length-属性" class="headerlink" title="函数的 length 属性"></a>函数的 length 属性</h2><ul><li>有默认值的长度不被计算且后面不管是否有默认值都忽略                    </li><li>(function (a) {}).length &#x2F;&#x2F; 1</li><li>(function (a &#x3D; 5) {}).length &#x2F;&#x2F; 0</li><li>(function (a, b, c &#x3D; 5) {}).length &#x2F;&#x2F; 2</li></ul><h2 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h2><ul><li>如果x没有赋值就指向全局，赋值后指向所附的值<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params">x, y = x</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">f</span>(<span class="number">2</span>)</span><br><span class="line">rest参数 ...不算长度</span><br></pre></td></tr></table></figure></li></ul><h2 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h2><ul><li>变量  &#x3D; 形参 &#x3D;&gt; 返回的表达式或数值<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title function_">sum</span> = (<span class="params">num1, num2</span>) =&gt; num1 + num2;</span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="keyword">var</span> sum = <span class="keyword">function</span>(<span class="params">num1, num2</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> num1 + num2;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li>this的指向：嵌套箭头函数的this最终指向最外层函数的this（因为箭头函数没有自己的this），</li><li>不能用call()、apply()、bind()这些方法去改变this的指向。</li><li>定义对象和动态this不使用箭头函数</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;默认值&quot;&gt;&lt;a href=&quot;#默认值&quot; class=&quot;headerlink&quot; title=&quot;默认值&quot;&gt;&lt;/a&gt;默认值&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;ES6 允许为函数的参数设置默认值，即直接写在参数定义的后面。&lt;figure class=&quot;highlight java</summary>
      
    
    
    
    <category term="es6" scheme="http://example.com/categories/es6/"/>
    
    
  </entry>
  
  <entry>
    <title>ES6-对象的拓展</title>
    <link href="http://example.com/2024/10/31/ES6/es6-%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%8B%93%E5%B1%95/"/>
    <id>http://example.com/2024/10/31/ES6/es6-%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%8B%93%E5%B1%95/</id>
    <published>2024-10-31T07:54:04.629Z</published>
    <updated>2024-10-31T08:21:35.365Z</updated>
    
    <content type="html"><![CDATA[<h1 id="对象的拓展"><a href="#对象的拓展" class="headerlink" title="对象的拓展"></a>对象的拓展</h1><h2 id="属性名表达式"><a href="#属性名表达式" class="headerlink" title="属性名表达式"></a>属性名表达式</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方法一：用标识符作为属性名</span></span><br><span class="line">obj.<span class="property">foo</span> = <span class="literal">true</span></span><br><span class="line"><span class="comment">// 方法二： 用表达式作为属性名</span></span><br><span class="line">obj[<span class="string">&#x27;a&#x27;</span> + <span class="string">&#x27;bc&#x27;</span>] = <span class="number">123</span></span><br><span class="line"></span><br><span class="line">注意：<span class="string">`属性名表达式`</span>如果是一个<span class="string">`对象`</span>，默认情况下会自动将对象<span class="string">`转为`</span>字符串<span class="string">`[object Object]`</span></span><br><span class="line"><span class="comment">// 对象字面量</span></span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  [<span class="string">&#x27;a&#x27;</span> + <span class="string">&#x27;bc&#x27;</span>]: <span class="number">123</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 定义方法名</span></span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  [<span class="string">&#x27;h&#x27;</span> + <span class="string">&#x27;ello&#x27;</span>]()&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;hi&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">obj.<span class="title function_">hello</span>()</span><br></pre></td></tr></table></figure><h2 id="函数的name属性，返回函数名。对象方法也是函数"><a href="#函数的name属性，返回函数名。对象方法也是函数" class="headerlink" title="函数的name属性，返回函数名。对象方法也是函数"></a>函数的name属性，返回函数名。对象方法也是函数</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line"><span class="title function_">sayName</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line">&#125;,</span><br><span class="line"><span class="keyword">get</span> <span class="title function_">foo</span>() &#123;&#125;,</span><br><span class="line"><span class="keyword">set</span> <span class="title function_">foo</span>(<span class="params">x</span>) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line">person.<span class="property">sayNAme</span>.<span class="property">name</span>  <span class="comment">// &#x27;sayName&#x27;</span></span><br><span class="line"></span><br><span class="line">如果对象的方法使用了取值函数（getter）和存值函数（setter），则name再该方法的属性的get和set上</span><br><span class="line"><span class="keyword">const</span> desc = <span class="title class_">Object</span>.<span class="title function_">getOwnProertyDescriptor</span>(person,<span class="string">&#x27;foo&#x27;</span>)</span><br><span class="line">desc.<span class="property">get</span>.<span class="property">name</span> <span class="string">&quot;get foo&quot;</span></span><br><span class="line">desc.<span class="property">set</span>.<span class="property">name</span> <span class="string">&quot;set foo&quot;</span></span><br><span class="line"></span><br><span class="line">特殊情况： </span><br><span class="line"><span class="number">1</span>、bind方法创造的函数，name属性返回bound 加上原函数名；<span class="title class_">Function</span>构造函数创造的函数，返回<span class="title function_">anonymous</span></span><br><span class="line">(<span class="keyword">new</span> <span class="title class_">Function</span>()).<span class="property">name</span> <span class="comment">// &quot;anonymous&quot;</span></span><br><span class="line"><span class="keyword">var</span> doSomething = <span class="keyword">function</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">doSomething.<span class="title function_">bind</span>().<span class="property">name</span> <span class="comment">//&quot;bound doSOmething&quot;</span></span><br><span class="line"><span class="number">2</span>、对象方法是一个<span class="title class_">Symbol</span>值</span><br><span class="line"><span class="keyword">const</span> key1 = <span class="title class_">Symbol</span>(<span class="string">&#x27;description&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">[key1]() &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line">obj[key1].<span class="property">name</span> <span class="comment">// &#x27;description&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="属性的遍历"><a href="#属性的遍历" class="headerlink" title="属性的遍历"></a>属性的遍历</h2><h3 id="for…in"><a href="#for…in" class="headerlink" title="for…in"></a>for…in</h3><ul><li>for…in循环遍历对象自身的和继承的可枚举属性（不含 Symbol 属性）。</li></ul><h3 id="Object-keys-obj"><a href="#Object-keys-obj" class="headerlink" title="Object.keys(obj)"></a>Object.keys(obj)</h3><ul><li>Object.keys返回一个数组，包括对象自身的（不含继承的）所有可枚举属性（不含 Symbol 属性）的键名。</li></ul><h3 id="Object-getOwnPropertyNames-obj"><a href="#Object-getOwnPropertyNames-obj" class="headerlink" title="Object.getOwnPropertyNames(obj)"></a>Object.getOwnPropertyNames(obj)</h3><ul><li>Object.getOwnPropertyNames返回一个数组，包含对象自身的所有属性（不含 Symbol 属性，但是包括不可枚举属性）的键名。</li></ul><h3 id="Object-getOwnPropertySymbols-obj"><a href="#Object-getOwnPropertySymbols-obj" class="headerlink" title="Object.getOwnPropertySymbols(obj)"></a>Object.getOwnPropertySymbols(obj)</h3><ul><li>Object.getOwnPropertySymbols返回一个数组，包含对象自身的所有 Symbol 属性的键名。</li></ul><h3 id="Reflect-ownKeys-obj"><a href="#Reflect-ownKeys-obj" class="headerlink" title="Reflect.ownKeys(obj)"></a>Reflect.ownKeys(obj)</h3><ul><li>Reflect.ownKeys返回一个数组，包含对象自身的（不含继承的）所有键名，不管键名是 Symbol 或字符串，也不管是否可枚举。</li></ul><h3 id="遍历顺序"><a href="#遍历顺序" class="headerlink" title="遍历顺序"></a>遍历顺序</h3><ul><li>首先遍历所有数值键，按照数值升序排列。</li><li>其次遍历所有字符串键，按照加入时间升序排列。</li><li>最后遍历所有 Symbol 键，按照加入时间升序排列。</li><li>Reflect.ownKeys({ [Symbol()]:0, b:0, 10:0, 2:0, a:0 }) &#x2F;&#x2F; [‘2’, ‘10’, ‘b’, ‘a’, Symbol()]</li></ul><h2 id="super-指向当前对象的原型对象"><a href="#super-指向当前对象的原型对象" class="headerlink" title="super 指向当前对象的原型对象"></a>super 指向当前对象的原型对象</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> proto = &#123;</span><br><span class="line">  <span class="attr">x</span>: <span class="string">&#x27;hello&#x27;</span>,</span><br><span class="line">  <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">x</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">x</span>: <span class="string">&#x27;world&#x27;</span>,</span><br><span class="line">  <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>.<span class="title function_">foo</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//将proto设置为obj的原型</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">setPrototypeOf</span>(obj, proto);</span><br><span class="line">obj.<span class="title function_">foo</span>()</span><br></pre></td></tr></table></figure><h2 id="扩展运算符…"><a href="#扩展运算符…" class="headerlink" title="扩展运算符…"></a>扩展运算符…</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> z = &#123; <span class="attr">a</span>: <span class="number">3</span>, <span class="attr">b</span>: <span class="number">4</span> &#125;</span><br><span class="line"><span class="keyword">let</span> n = &#123; ...z &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> foo = &#123; ...[<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>]&#125;</span><br><span class="line">foo <span class="comment">// &#123;0:&quot;a&quot;,1:&quot;b&quot;,z:&quot;c&quot;&#125;</span></span><br></pre></td></tr></table></figure><ul><li>对象的扩展运算符等同于使用Object.assign()方法。</li></ul><h2 id="对象的新增方法"><a href="#对象的新增方法" class="headerlink" title="对象的新增方法"></a>对象的新增方法</h2><h3 id="Object-is-值1，值2-判断两个值是否严格相等（-）"><a href="#Object-is-值1，值2-判断两个值是否严格相等（-）" class="headerlink" title="Object.is(值1，值2), 判断两个值是否严格相等（&#x3D;&#x3D;&#x3D;）"></a>Object.is(值1，值2), 判断两个值是否严格相等（&#x3D;&#x3D;&#x3D;）</h3><ul><li>+0不等于-0，NAN等于自身</li></ul><h3 id="Object-assign-方法用于对象的合并-浅拷贝"><a href="#Object-assign-方法用于对象的合并-浅拷贝" class="headerlink" title="Object.assign()方法用于对象的合并(浅拷贝)"></a>Object.assign()方法用于对象的合并(浅拷贝)</h3><ul><li>多参：<ul><li>Object.assign(复制存放地, 被复制对象, 被复制对象，…);</li></ul></li><li>一参：返回该参数<ul><li>undefined，null做首参则报错</li><li>参数非对象，转对象在返回</li><li>不拷贝enumerable: false</li></ul></li></ul><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><ol><li>浅拷贝：只要修改其中一个，其它的也会改变<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj1 = &#123;<span class="attr">a</span>: &#123;<span class="attr">b</span>:<span class="number">1</span>&#125;&#125;;</span><br><span class="line"><span class="keyword">const</span> obj2 = <span class="title class_">Object</span>.<span class="title function_">assign</span>(&#123;&#125;,obj1);</span><br><span class="line"></span><br><span class="line">obj1.<span class="property">a</span>.<span class="property">b</span> = <span class="number">2</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj2.<span class="property">a</span>.<span class="property">b</span>)  </span><br><span class="line"></span><br><span class="line">obj2.<span class="property">a</span>.<span class="property">b</span> = <span class="number">4</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj1.<span class="property">a</span>.<span class="property">b</span>)</span><br></pre></td></tr></table></figure></li><li>同名属性替换（复制存放的对象属性如果跟被复制的对象属性一样，替换）</li><li>可以处理数组，但是会把数组视为对象</li></ol><h3 id="常见用途"><a href="#常见用途" class="headerlink" title="常见用途"></a>常见用途</h3><ol><li>为对象添加属性<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//将x属性和y属性添加到Point类的对象实例</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Point</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">x, y</span>) &#123;</span><br><span class="line">    <span class="title class_">Object</span>.<span class="title function_">assign</span>(<span class="variable language_">this</span>, &#123;x, y&#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>为对象添加 方法<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//给SomeClass.prototype添加方法</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">assign</span>(<span class="title class_">SomeClass</span>.<span class="property"><span class="keyword">prototype</span></span>, &#123;</span><br><span class="line">  <span class="title function_">someMethod</span>(<span class="params">arg1, arg2</span>) &#123;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">anotherMethod</span>(<span class="params"></span>) &#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li>克隆对象<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">clone</span>(<span class="params">origin</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> originProto = <span class="title class_">Object</span>.<span class="title function_">getPrototypeOf</span>(origin);</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Object</span>.<span class="title function_">assign</span>(<span class="title class_">Object</span>.<span class="title function_">create</span>(originProto), origin);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>合并多个对象<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">merge</span> = (<span class="params">target, ...sources</span>) =&gt; <span class="title class_">Object</span>.<span class="title function_">assign</span>(target, ...sources);</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;对象的拓展&quot;&gt;&lt;a href=&quot;#对象的拓展&quot; class=&quot;headerlink&quot; title=&quot;对象的拓展&quot;&gt;&lt;/a&gt;对象的拓展&lt;/h1&gt;&lt;h2 id=&quot;属性名表达式&quot;&gt;&lt;a href=&quot;#属性名表达式&quot; class=&quot;headerlink&quot; title=&quot;属</summary>
      
    
    
    
    <category term="es6" scheme="http://example.com/categories/es6/"/>
    
    
  </entry>
  
  <entry>
    <title>ES6-编程风格</title>
    <link href="http://example.com/2024/10/31/ES6/es6-%E7%BC%96%E7%A8%8B%E9%A3%8E%E6%A0%BC/"/>
    <id>http://example.com/2024/10/31/ES6/es6-%E7%BC%96%E7%A8%8B%E9%A3%8E%E6%A0%BC/</id>
    <published>2024-10-31T07:54:04.619Z</published>
    <updated>2024-10-31T08:24:36.148Z</updated>
    
    <content type="html"><![CDATA[<ul><li><h3 id="1、块级作用域和上下文会改变用let"><a href="#1、块级作用域和上下文会改变用let" class="headerlink" title="1、块级作用域和上下文会改变用let"></a>1、块级作用域和上下文会改变用let</h3></li><li><h3 id="2、全局用常量const，表示不应该改变"><a href="#2、全局用常量const，表示不应该改变" class="headerlink" title="2、全局用常量const，表示不应该改变"></a>2、全局用常量const，表示不应该改变</h3></li><li><h3 id="3、静态字符串一律使用单引号或反引号。动态字符串使用反引号。"><a href="#3、静态字符串一律使用单引号或反引号。动态字符串使用反引号。" class="headerlink" title="3、静态字符串一律使用单引号或反引号。动态字符串使用反引号。"></a>3、静态字符串一律使用单引号或反引号。动态字符串使用反引号。</h3></li><li><h3 id="4、使用数组-对象成员对变量赋值时和返回多个值时，优先使用解构赋值。"><a href="#4、使用数组-对象成员对变量赋值时和返回多个值时，优先使用解构赋值。" class="headerlink" title="4、使用数组&#x2F;对象成员对变量赋值时和返回多个值时，优先使用解构赋值。"></a>4、使用数组&#x2F;对象成员对变量赋值时和返回多个值时，优先使用解构赋值。</h3></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> [first, second] = arr;</span><br></pre></td></tr></table></figure><ul><li><h3 id="5、单行定义的对象，最后不以逗号结尾。多行，最后以逗号结尾"><a href="#5、单行定义的对象，最后不以逗号结尾。多行，最后以逗号结尾" class="headerlink" title="5、单行定义的对象，最后不以逗号结尾。多行，最后以逗号结尾"></a>5、单行定义的对象，最后不以逗号结尾。多行，最后以逗号结尾</h3></li><li><h3 id="6、使用扩展运算符（…）拷贝数组，使用Array-from-方法，将类数组的对象转为数组"><a href="#6、使用扩展运算符（…）拷贝数组，使用Array-from-方法，将类数组的对象转为数组" class="headerlink" title="6、使用扩展运算符（…）拷贝数组，使用Array.from 方法，将类数组的对象转为数组"></a>6、使用扩展运算符（…）拷贝数组，使用Array.from 方法，将类数组的对象转为数组</h3></li><li><h3 id="7、立即执行函数可以写成箭头函数的形式。"><a href="#7、立即执行函数可以写成箭头函数的形式。" class="headerlink" title="7、立即执行函数可以写成箭头函数的形式。"></a>7、立即执行函数可以写成箭头函数的形式。</h3></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 匿名函数</span></span><br><span class="line">(<span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Welcome to the Internet.&#x27;</span>))();</span><br><span class="line"></span><br><span class="line"><span class="comment">// best</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].<span class="title function_">map</span>(<span class="function"><span class="params">x</span> =&gt;</span> x * x);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 箭头函数(取代Function.prototype.bind，不应再用 self/_this/that 绑定 this)</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">args</span> = (<span class="params"></span>) =&gt; &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// best</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">boundMethod</span> = (<span class="params">...params</span>) =&gt; method.<span class="title function_">apply</span>(<span class="variable language_">this</span>, params);</span><br></pre></td></tr></table></figure><ul><li><h3 id="9、所有配置项都应该集中在一个对象，放在最后一个参数，布尔值不可以直接作为参数。"><a href="#9、所有配置项都应该集中在一个对象，放在最后一个参数，布尔值不可以直接作为参数。" class="headerlink" title="9、所有配置项都应该集中在一个对象，放在最后一个参数，布尔值不可以直接作为参数。"></a>9、所有配置项都应该集中在一个对象，放在最后一个参数，布尔值不可以直接作为参数。</h3></li></ul><p><code>function divide(a, b, &#123; option = false &#125; = &#123;&#125;) &#123;&#125;</code></p><ul><li><h3 id="10、不要在函数体内使用-arguments-变量，使用-rest-运算符（…）代替"><a href="#10、不要在函数体内使用-arguments-变量，使用-rest-运算符（…）代替" class="headerlink" title="10、不要在函数体内使用 arguments 变量，使用 rest 运算符（…）代替"></a>10、不要在函数体内使用 arguments 变量，使用 rest 运算符（…）代替</h3></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">concatenateAll</span>(<span class="params">...args</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> args.<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><h3 id="11、使用默认值语法设置函数参数的默认值。"><a href="#11、使用默认值语法设置函数参数的默认值。" class="headerlink" title="11、使用默认值语法设置函数参数的默认值。"></a>11、使用默认值语法设置函数参数的默认值。</h3></li></ul><p><code>function handleThings(opts = &#123;&#125;) &#123;&#125;</code></p><ul><li><h3 id="12、key-value的数据结构，使用-Map-结构，模拟现实世界的实体对象时，使用-Object"><a href="#12、key-value的数据结构，使用-Map-结构，模拟现实世界的实体对象时，使用-Object" class="headerlink" title="12、key: value的数据结构，使用 Map 结构，模拟现实世界的实体对象时，使用 Object"></a>12、key: value的数据结构，使用 Map 结构，模拟现实世界的实体对象时，使用 Object</h3></li><li><h3 id="13、用class取代需要-prototype-的操作，使用extends实现继承"><a href="#13、用class取代需要-prototype-的操作，使用extends实现继承" class="headerlink" title="13、用class取代需要 prototype 的操作，使用extends实现继承"></a>13、用class取代需要 prototype 的操作，使用extends实现继承</h3></li><li><h3 id="14、import取代require-、export取代module-exports"><a href="#14、import取代require-、export取代module-exports" class="headerlink" title="14、import取代require()、export取代module.exports"></a>14、import取代require()、export取代module.exports</h3></li><li><h3 id="15、模块只有一个输出值，使用export-defaul，"><a href="#15、模块只有一个输出值，使用export-defaul，" class="headerlink" title="15、模块只有一个输出值，使用export defaul，"></a>15、模块只有一个输出值，使用export defaul，</h3><ul><li>输出的<code>函数名</code>的首字母应该<code>小写</code>，<code>对象名</code>的首字母应该<code>大写</code></li></ul></li><li><h3 id="16、在项目的根目录安装-ESLint"><a href="#16、在项目的根目录安装-ESLint" class="headerlink" title="16、在项目的根目录安装 ESLint"></a>16、在项目的根目录安装 ESLint</h3></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev eslint</span><br><span class="line">npm install --save-dev eslint-config-airbnb</span><br><span class="line">npm install --save-dev eslint-plugin-import eslint-plugin-jsx-a11y eslint-plugin-react</span><br><span class="line"></span><br><span class="line">在项目的根目录下新建一个.eslintrc文件，配置 ESLint。</span><br><span class="line">&#123;</span><br><span class="line">    &quot;extends&quot;: &quot;eslint-config-airbnb&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;&lt;h3 id=&quot;1、块级作用域和上下文会改变用let&quot;&gt;&lt;a href=&quot;#1、块级作用域和上下文会改变用let&quot; class=&quot;headerlink&quot; title=&quot;1、块级作用域和上下文会改变用let&quot;&gt;&lt;/a&gt;1、块级作用域和上下文会改变用let&lt;/h3&gt;</summary>
      
    
    
    
    <category term="es6" scheme="http://example.com/categories/es6/"/>
    
    
  </entry>
  
  <entry>
    <title>ES6-Set/Map构造函数</title>
    <link href="http://example.com/2024/10/31/ES6/es6-set%E5%92%8Cmap/"/>
    <id>http://example.com/2024/10/31/ES6/es6-set%E5%92%8Cmap/</id>
    <published>2024-10-31T07:54:04.609Z</published>
    <updated>2024-10-31T08:25:46.716Z</updated>
    
    <content type="html"><![CDATA[<h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul><li>Set构造函数</li><li>Map构造函数</li><li>Set &#x2F; Map 共同方法</li><li>累加器reduce</li><li>Set &#x2F; Map 遍历示例</li><li>互转结构</li><li>Map构造函数求value最大值</li></ul><h2 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h2><blockquote><p>去重小能手</p></blockquote><h3 id="set去重"><a href="#set去重" class="headerlink" title="set去重"></a>set去重</h3><ol><li><p>去重数组成员: […set]</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> set =  <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">5</span>]) </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>([...set]) <span class="comment">// [1,2,3,4,5]</span></span><br></pre></td></tr></table></figure></li><li><p>去重字符串里面重复的字符:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[...<span class="keyword">new</span> <span class="title class_">Set</span>(<span class="string">&#x27;ababbc&#x27;</span>)].<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>)<span class="comment">// &quot;abc&quot;</span></span><br></pre></td></tr></table></figure></li><li><p>Array.from的去重数组成员</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">dedupe</span> = (<span class="params">array</span>) =&gt; <span class="title class_">Array</span>.<span class="title function_">from</span>(<span class="keyword">new</span> <span class="title class_">Set</span>(array))</span><br><span class="line"><span class="title function_">dedupe</span>([<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])<span class="comment">//[1,2,3]</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="创建Set构造函数：new-Set"><a href="#创建Set构造函数：new-Set" class="headerlink" title="创建Set构造函数：new Set()"></a>创建Set构造函数：<code>new Set()</code></h3><h3 id="set操作方法："><a href="#set操作方法：" class="headerlink" title="set操作方法："></a>set操作方法：</h3><ul><li><code>Set.add(value)</code>：添加某个值，返回set结构本身</li><li><code>Set.delete(value):</code> 删除某个值，返回一个布尔值表删除是否成功</li><li><code>Set.has(value)</code>： 返回一个布尔值，表该值是否为set成员</li><li><code>Set.clear()</code>： 清除所有成员，无返回值</li><li>注意： <code>NAN相等，两个&#123;&#125;不相等</code></li></ul><h3 id="Set结构转数组-Array-from"><a href="#Set结构转数组-Array-from" class="headerlink" title="Set结构转数组:Array.from()"></a>Set结构转数组:<code>Array.from()</code></h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> array = <span class="title class_">Array</span>.<span class="title function_">from</span>(<span class="keyword">new</span> <span class="title class_">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]))</span><br></pre></td></tr></table></figure><h2 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h2><h3 id="创建一个Map构造函数：new-Map"><a href="#创建一个Map构造函数：new-Map" class="headerlink" title="创建一个Map构造函数：new Map()"></a>创建一个Map构造函数：<code>new Map()</code></h3><h3 id="Map操作方法"><a href="#Map操作方法" class="headerlink" title="Map操作方法"></a>Map操作方法</h3><ul><li><code>.set(key，value)</code>：添加某个值,如果key已经有值就更新</li><li><code>.get(key)</code>：读取值，找不到key，返回undefined</li><li><code>.has(key)</code>：返回一个布尔值，表示某个键是否在当前 Map 对象中</li><li><code>.delete(key)</code>：删除某个键，返回一个布尔值表删除是否成功</li><li><code>.clear()</code>：无返回值，清除所有成员</li></ul><h2 id="Set-Map-共同方法"><a href="#Set-Map-共同方法" class="headerlink" title="Set &#x2F; Map 共同方法"></a>Set &#x2F; Map 共同方法</h2><h3 id="遍历方法"><a href="#遍历方法" class="headerlink" title="遍历方法"></a>遍历方法</h3><blockquote><p>Map默认entries， Set默认keys，Set中没有values，因为Set结构没有键名只有键值</p></blockquote><ul><li>.keys()：返回键名的遍历器</li><li>.values()：返回键值的遍历器</li><li>.entries()：返回键值对的遍历器([键名,键值]）</li><li>.forEach()：使用回调函数遍历每个成员</li></ul><h3 id="实例属性："><a href="#实例属性：" class="headerlink" title="实例属性："></a>实例属性：</h3><ul><li><code>.size</code>：返回Set&#x2F;Map实例的成员总数</li></ul><h2 id="reduce-累加器"><a href="#reduce-累加器" class="headerlink" title="reduce 累加器"></a>reduce 累加器</h2><ul><li><code>reduce((previousValue, currentValue, currentIndex, array) =&gt; &#123; /* ... */ &#125;, initialValue)</code></li><li>previousValue:数组第0位及后面相加返回的值，可指定初始值initial</li><li>currentValue:数值的第二位起</li><li>currentIndex:当前值位置</li></ul><h3 id="map-遍历"><a href="#map-遍历" class="headerlink" title=".map():遍历"></a>.map():遍历</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> set =<span class="keyword">new</span> <span class="title class_">Set</span>([<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">69</span>,<span class="number">74</span>,<span class="number">45</span>])</span><br><span class="line">set = <span class="keyword">new</span> <span class="title class_">Set</span>([...set].<span class="title function_">map</span>(<span class="function"><span class="params">x</span> =&gt;</span> (x * <span class="number">2</span>)));</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> map= <span class="keyword">new</span> <span class="title class_">Map</span>()</span><br><span class="line">.<span class="title function_">set</span>(<span class="number">1</span>,<span class="string">&quot;a&quot;</span>)</span><br><span class="line">.<span class="title function_">set</span>(<span class="number">2</span>,<span class="string">&quot;f&quot;</span>)</span><br><span class="line">.<span class="title function_">set</span>(<span class="number">3</span>,<span class="string">&quot;g&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> map1 = <span class="keyword">new</span> <span class="title class_">Map</span>([...map].<span class="title function_">map</span>(<span class="function">(<span class="params">[k,v]</span>) =&gt;</span> [k * <span class="number">2</span>, <span class="string">&#x27;_&#x27;</span>+v]))</span><br></pre></td></tr></table></figure><h3 id="filter-过滤"><a href="#filter-过滤" class="headerlink" title=".filter():过滤"></a>.filter():过滤</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> set =<span class="keyword">new</span> <span class="title class_">Set</span>([<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">69</span>,<span class="number">74</span>,<span class="number">45</span>])</span><br><span class="line">set = <span class="keyword">new</span> <span class="title class_">Set</span>([...set].<span class="title function_">filter</span>(<span class="function"><span class="params">x</span> =&gt;</span> (x * <span class="number">2</span>) &gt; <span class="number">100</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> map2 = <span class="keyword">new</span> <span class="title class_">Map</span>([...map].<span class="title function_">filter</span>(<span class="function">(<span class="params">[k,v]</span>) =&gt;</span> k == <span class="number">2</span>))</span><br></pre></td></tr></table></figure><h2 id="互转结构"><a href="#互转结构" class="headerlink" title="互转结构"></a>互转结构</h2><h3 id="map-转数组：-…map"><a href="#map-转数组：-…map" class="headerlink" title="map 转数组： […map]"></a>map 转数组： […map]</h3><h3 id="数组转map：new-Map-array"><a href="#数组转map：new-Map-array" class="headerlink" title="数组转map：new Map([array])"></a>数组转map：new Map([array])</h3><h3 id="map转对象"><a href="#map转对象" class="headerlink" title="map转对象"></a>map转对象</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 情况一： 键名为字符串，无损</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">strMapToObj</span> = (<span class="params">strMap</span>) =&gt; &#123;</span><br><span class="line"><span class="keyword">let</span> obj = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="literal">null</span>)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span>[k,v] <span class="keyword">of</span> strMap) &#123;</span><br><span class="line">obj[k] = v</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> obj</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> myMap = <span class="keyword">new</span> <span class="title class_">Map</span>()</span><br><span class="line">.<span class="title function_">set</span>(<span class="string">&#x27;yes&#x27;</span>,<span class="literal">true</span>)</span><br><span class="line">.<span class="title function_">set</span>(<span class="string">&#x27;no&#x27;</span>, <span class="literal">false</span>)</span><br><span class="line"><span class="title function_">strMapToObj</span>(<span class="params">myMap</span>) &#123;<span class="attr">yes</span>:<span class="literal">true</span>, <span class="attr">no</span>: <span class="literal">false</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 情况二：键名为非字符串，先转为字符串在作为对象键名</span></span><br></pre></td></tr></table></figure><h3 id="对象转Map-Object-entries"><a href="#对象转Map-Object-entries" class="headerlink" title="对象转Map: Object.entries()"></a>对象转Map: Object.entries()</h3><pre><code>let obj = &#123;&quot;a&quot;:1, &quot;b&quot;:2&#125;;let map = new Map(Object.entries(obj));</code></pre><h3 id="Map转JSON"><a href="#Map转JSON" class="headerlink" title="Map转JSON"></a>Map转JSON</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 情况一： 键名都是字符串（对象JSON）</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">strMapToJson</span> = (<span class="params">strMap</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(<span class="title function_">strMapToObj</span>(strMap));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> myMap = <span class="keyword">new</span> <span class="title class_">Map</span>().<span class="title function_">set</span>(<span class="string">&#x27;yes&#x27;</span>, <span class="literal">true</span>).<span class="title function_">set</span>(<span class="string">&#x27;no&#x27;</span>, <span class="literal">false</span>);</span><br><span class="line"><span class="title function_">strMapToJson</span>(myMap)<span class="comment">// &#x27;&#123;&quot;yes&quot;:true,&quot;no&quot;:false&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 情况二： 键名有非字符串（数组 JSON）</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">mapToArrayJson</span> = (<span class="params">map</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">JSON</span>.<span class="title function_">stringify</span>([...map]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> myMap = <span class="keyword">new</span> <span class="title class_">Map</span>().<span class="title function_">set</span>(<span class="literal">true</span>, <span class="number">7</span>).<span class="title function_">set</span>(&#123;<span class="attr">foo</span>: <span class="number">3</span>&#125;, [<span class="string">&#x27;abc&#x27;</span>]);</span><br><span class="line"><span class="title function_">mapToArrayJson</span>(myMap)<span class="comment">// &#x27;[[true,7],[&#123;&quot;foo&quot;:3&#125;,[&quot;abc&quot;]]]&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="JSON转Map"><a href="#JSON转Map" class="headerlink" title="JSON转Map"></a>JSON转Map</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 正常情况，所有键名都是字符串</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">jsonToStrMap</span> = (<span class="params">jsonStr</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">objToStrMap</span>(<span class="title class_">JSON</span>.<span class="title function_">parse</span>(jsonStr));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">jsonToStrMap</span>(<span class="string">&#x27;&#123;&quot;yes&quot;: true, &quot;no&quot;: false&#125;&#x27;</span>)</span><br><span class="line"><span class="comment">// Map &#123;&#x27;yes&#x27; =&gt; true, &#x27;no&#x27; =&gt; false&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 特殊情况，整个 JSON 就是一个数组，且每个数组成员本身，又是一个有两个成员的数组。这时，它可以一一对应地转为 Map。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">jsonToMap</span> = (<span class="params">jsonStr</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Map</span>(<span class="title class_">JSON</span>.<span class="title function_">parse</span>(jsonStr));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">jsonToMap</span>(<span class="string">&#x27;[[true,7],[&#123;&quot;foo&quot;:3&#125;,[&quot;abc&quot;]]]&#x27;</span>)</span><br><span class="line"><span class="comment">// Map &#123;true =&gt; 7, Object &#123;foo: 3&#125; =&gt; [&#x27;abc&#x27;]&#125;</span></span><br></pre></td></tr></table></figure><h2 id="Map构造函数求value最大值"><a href="#Map构造函数求value最大值" class="headerlink" title="Map构造函数求value最大值"></a>Map构造函数求value最大值</h2><ul><li>只取value的最大值： Math.max(…m.values())</li><li>取最大值的key，value： […m.entries()].reduce((a, e) &#x3D;&gt; e[1] &gt; a[1] ? e : a) 缺点： 有多个相等的最大值获取不到</li><li>取最大值的key，value：（相等也可）<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">maxList</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line"><span class="keyword">let</span> <span class="title class_">MaxEle</span> = []</span><br><span class="line"><span class="keyword">let</span> max = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> [key, value] <span class="keyword">of</span> map) &#123;</span><br><span class="line">max = max &gt; value ? max : value</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">MaxEle</span> = [...map.<span class="title function_">entries</span>()].<span class="title function_">filter</span>(<span class="function"><span class="params">item</span> =&gt;</span> item[<span class="number">1</span>] === max)</span><br><span class="line"><span class="keyword">return</span> <span class="title class_">MaxEle</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;目录&quot;&gt;&lt;a href=&quot;#目录&quot; class=&quot;headerlink&quot; title=&quot;目录&quot;&gt;&lt;/a&gt;目录&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Set构造函数&lt;/li&gt;
&lt;li&gt;Map构造函数&lt;/li&gt;
&lt;li&gt;Set &amp;#x2F; Map 共同方法&lt;/li&gt;
&lt;li&gt;累</summary>
      
    
    
    
    <category term="es6" scheme="http://example.com/categories/es6/"/>
    
    
  </entry>
  
  <entry>
    <title>ES6-Promise(resolve,reject)</title>
    <link href="http://example.com/2024/10/31/ES6/es6-Promise/"/>
    <id>http://example.com/2024/10/31/ES6/es6-Promise/</id>
    <published>2024-10-31T07:54:04.602Z</published>
    <updated>2024-10-31T08:37:28.507Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>⭐ Promise的三个状态:<br> <code>pending</code>(进行时),<code>fulfilled</code>(已成功),<code>rejected</code>(已失败)</p></blockquote><h3 id="Promise-对象的状态改变，只有两种可能："><a href="#Promise-对象的状态改变，只有两种可能：" class="headerlink" title="Promise 对象的状态改变，只有两种可能："></a>Promise 对象的状态改变，只有两种可能：</h3><ul><li>从<code>pending</code>变为<code>fulfilled</code>和从<code>pending</code>变为<code>rejected</code>。</li><li>只要这两种情况发生，则称为 <code>resolved</code>（已定型）。<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">配置请求器的基本格式：</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">request</span> = (<span class="params">url, data = &#123;&#125;, method = <span class="string">&#x27;GET&#x27;</span></span>) =&gt; &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123; </span><br><span class="line">wx.<span class="title function_">request</span>(&#123;</span><br><span class="line">url,</span><br><span class="line">method,</span><br><span class="line"><span class="attr">data</span>: &#123; ...data, <span class="attr">cross</span>: <span class="number">1</span> &#125;,</span><br><span class="line"><span class="title function_">success</span>(<span class="params">res</span>) &#123;</span><br><span class="line"><span class="comment">//返回一个成功的数据 </span></span><br><span class="line"><span class="title function_">resolve</span>(res.<span class="property">data</span>)</span><br><span class="line">&#125;,</span><br><span class="line"><span class="title function_">fail</span>(<span class="params">err</span>) &#123;</span><br><span class="line"><span class="comment">//错误时返回错误信息</span></span><br><span class="line"><span class="title function_">reject</span>(err.<span class="property">errMsg</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="Promise有两个参数-且是函数-—-resolve和reject"><a href="#Promise有两个参数-且是函数-—-resolve和reject" class="headerlink" title="Promise有两个参数,且是函数 — resolve和reject"></a>Promise有两个参数,且是函数 — <code>resolve</code>和<code>reject</code></h3><ul><li><p>async会返回一个promise,可通过传入promise函数来判断它的状态</p></li><li><p>resolve(): 成功的回调</p></li><li><p>reject()：失败的回调</p></li><li><p>.then(resolved的回调函数,rejected的回调函数)：为 Promise 实例添加状态改变时的回调函数，返回的是一个新的Promise实例</p></li><li><p>.catch()：发生错误时的回调函数</p></li><li><p>.finally()：不管 Promise 对象最后状态如何，都会执行的操作(then方法的特例)</p></li><li><p>.all()：用于将多个 Promise 实例，包装成一个新的 Promise 实例</p><ul><li>const p &#x3D; Promise.all([p1, p2, p3]);</li></ul><ol><li>只有p1、p2、p3的状态<code>都变成fulfilled</code>，<code>p</code>的状态才会变成<code>fulfilled</code>，此时p1、p2、p3的返回值组成一个数组，传递给p的回调函数。</li><li>只要p1、p2、p3之中有<code>一个rejected</code>，<code>p</code>的状态就变成<code>rejected</code>，此时第一个被reject的实例的返回值，会传递给p的回调函数。</li></ol></li><li><p>.allSettled()：确定一组异步操作是否都结束了（不管成功或失败），才会执行下一步</p></li><li><p>.any()：等到所有参数 Promise 变成rejected状态才会结束。</p></li></ul><h3 id="Promise-try（）同步函数同步执行，异步函数异步执行"><a href="#Promise-try（）同步函数同步执行，异步函数异步执行" class="headerlink" title="Promise.try（）同步函数同步执行，异步函数异步执行"></a>Promise.try（）同步函数同步执行，异步函数异步执行</h3><ul><li>const f &#x3D; () &#x3D;&gt; console.log(‘now’);</li><li>Promise.try(f);</li><li>console.log(‘next’);</li></ul><h3 id="Promise-then第二参数和catch的区别？"><a href="#Promise-then第二参数和catch的区别？" class="headerlink" title="Promise then第二参数和catch的区别？"></a>Promise then第二参数和catch的区别？</h3><ul><li>两者都是用于处理Promise的rejected状态的情况</li><li>then方法的第二个参数<ul><li>如果Promise的状态变为rejected，then方法的第二个参数会被调用。该参数是一个函数，可以接受一个参数，即Promise返回的错误信息。当Promise被reject时，then方法的第二个参数会被调用，并打印出错误信息</li></ul></li><li>catch 方法<ul><li>相当于then方法的第二个参数，也用于处理Promise的rejected状态的情况。不同在于catch方法可以链式调用，而不需要在每次调用then方法时都传递第二个参数。当Promise被reject时，catch方法会被调用，并打印出错误信息</li></ul></li></ul><h3 id="async-函数的返回值"><a href="#async-函数的返回值" class="headerlink" title="async 函数的返回值"></a>async 函数的返回值</h3><ul><li>async函数在抛出返回值时，会根据返回值类型开启不同数目的微任务<ul><li>如果<code>返回值</code>为 <code>非then，非promise</code>， 则不等待其他结果，<code>先返回自身</code></li><li>如果<code>返回值</code>为 <code>then</code>， 则<code>等待1个then</code>的时间，然后返回自身，再继续往下走</li><li>如果<code>返回值</code>为 <code>promise</code>， 则<code>等待2个then</code>的时间，然后返回自身，再继续往下走</li></ul></li><li>例子：<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 返回值为 `非then，非promise`</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">testA</span> (<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">testA</span>().<span class="title function_">then</span>(<span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>));</span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">resolve</span>()</span><br><span class="line">.<span class="title function_">then</span>(<span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>))</span><br><span class="line">.<span class="title function_">then</span>(<span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span>));</span><br><span class="line"><span class="comment">// 1 2 3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回值为 `then`</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">testB</span> (<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line"><span class="title function_">then</span> (cb) &#123;</span><br><span class="line"><span class="title function_">cb</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">testB</span>().<span class="title function_">then</span>(<span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>));</span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">resolve</span>()</span><br><span class="line">.<span class="title function_">then</span>(<span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>))</span><br><span class="line">.<span class="title function_">then</span>(<span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span>))</span><br><span class="line"><span class="comment">// 2 1 3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回值 `promise`</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">testC</span> (<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="title function_">resolve</span>()</span><br><span class="line">&#125;)</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="title function_">testC</span>().<span class="title function_">then</span>(<span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>));</span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">resolve</span>()</span><br><span class="line">.<span class="title function_">then</span>(<span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>))</span><br><span class="line">.<span class="title function_">then</span>(<span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span>))</span><br><span class="line">.<span class="title function_">then</span>(<span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">4</span>))</span><br><span class="line"><span class="comment">// 2 3 1 4</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">async1</span> (<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;1&#x27;</span>) ------------------------------ <span class="number">2</span> 执行async1函数，得到<span class="number">1</span></span><br><span class="line"><span class="keyword">await</span> <span class="title function_">async2</span>() -------------------------------- <span class="number">3</span> 执行async2函数</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;AAA&#x27;</span>) ---------------------------- <span class="number">9</span> 等待async2函数执行完，得到<span class="variable constant_">AAA</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">async2</span> (<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;3&#x27;</span>) ------------------------------ <span class="number">3</span> 执行async2函数，得到<span class="number">3</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="title function_">resolve</span>() --------------------------------- <span class="number">5</span> 执行<span class="title class_">Promise</span>，返回值为<span class="title class_">Promise</span>，等待两个then</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;4&#x27;</span>) -------------------------- <span class="number">4</span> <span class="title class_">Promise</span>构造器中代码属于同步代码，得到<span class="number">4</span></span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;5&#x27;</span>)------------------------------- <span class="number">1</span> 同步代码先执行</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;6&#x27;</span>) ------------------------------ <span class="number">11</span> 放入宏任务异步队列中</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="title function_">async1</span>() ------------------------------------------ <span class="number">2</span> 执行async1函数</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;7&#x27;</span>) ------------------------------ <span class="number">5</span> 执行<span class="title class_">Promise</span>，得到 <span class="number">7</span></span><br><span class="line"><span class="title function_">resolve</span>()</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;8&#x27;</span>) ------------------------------ <span class="number">7</span> 等待第一个then，得到 <span class="number">8</span></span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;9&#x27;</span>) ------------------------------ <span class="number">8</span> 等待第二个then，得到 <span class="number">9</span></span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;10&#x27;</span>) ----------------------------- <span class="number">10</span> 执行最后一个微任务then，得到 <span class="number">10</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;11&#x27;</span>) --------------------------------- <span class="number">6</span> 同步代码，得到 <span class="number">11</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="await-右值类型区别"><a href="#await-右值类型区别" class="headerlink" title="await 右值类型区别"></a>await 右值类型区别</h3><ul><li>非 then：会立即向微任务队列添加一个微任务then，但不需等待</li><li>then：需要等待一个 then 的时间之后执行</li><li>promise：接Promise类型(有确定的返回值)，会立即向微任务队列添加一个微任务then，但不需等待</li><li>示例：<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*then*/</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">test</span> (<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">await</span> &#123;</span><br><span class="line"><span class="title function_">then</span> (cb) &#123;</span><br><span class="line"><span class="title function_">cb</span>();</span><br><span class="line">&#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">test</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">resolve</span>()</span><br><span class="line">.<span class="title function_">then</span>(<span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">4</span>))</span><br><span class="line">.<span class="title function_">then</span>(<span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">5</span>))</span><br><span class="line">.<span class="title function_">then</span>(<span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">6</span>))</span><br><span class="line">.<span class="title function_">then</span>(<span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">7</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//  1 3 4 2 5 6 7</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*promise*/</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">test</span> (<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">await</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="title function_">resolve</span>() <span class="comment">// 保持pending</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">test</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">resolve</span>()</span><br><span class="line">.<span class="title function_">then</span>(<span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">4</span>))</span><br><span class="line">.<span class="title function_">then</span>(<span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">5</span>))</span><br><span class="line">.<span class="title function_">then</span>(<span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">6</span>))</span><br><span class="line">.<span class="title function_">then</span>(<span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">7</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//  1 3 2 4 5 6 7</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;⭐ Promise的三个状态:&lt;br&gt; &lt;code&gt;pending&lt;/code&gt;(进行时),&lt;code&gt;fulfilled&lt;/code&gt;(已成功),&lt;code&gt;rejected&lt;/code&gt;(已失败)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 i</summary>
      
    
    
    
    <category term="es6" scheme="http://example.com/categories/es6/"/>
    
    
  </entry>
  
  <entry>
    <title>ES6-Module</title>
    <link href="http://example.com/2024/10/31/ES6/es6-Module/"/>
    <id>http://example.com/2024/10/31/ES6/es6-Module/</id>
    <published>2024-10-31T07:54:04.590Z</published>
    <updated>2024-10-31T08:41:26.065Z</updated>
    
    <content type="html"><![CDATA[<h2 id="模块功能主要由两个命令构成：export和import"><a href="#模块功能主要由两个命令构成：export和import" class="headerlink" title="模块功能主要由两个命令构成：export和import"></a>模块功能主要由两个命令构成：export和import</h2><ul><li>输出：export default 名字</li><li>引入文件：import 变量名 from ‘默认输出文件的路径’;</li><li>输出方法：export const 方法名 &#x3D; (变量) &#x3D;&gt; { return 返回的结果 }</li><li>引入方法：import { 方法名 } from ‘路径’</li></ul><h3 id="export"><a href="#export" class="headerlink" title="export"></a>export</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> firstName = <span class="string">&#x27;Michael&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> lastName = <span class="string">&#x27;Jackson&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> year = <span class="number">1958</span>;</span><br><span class="line"><span class="comment">//输出变量</span></span><br><span class="line"><span class="keyword">export</span> &#123; firstName, lastName, year &#125;;</span><br><span class="line"><span class="comment">//函数</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line">可以使用<span class="keyword">as</span>关键字重命名。</span><br><span class="line"><span class="keyword">export</span> &#123; firstName <span class="keyword">as</span>  f, lastName, year &#125;;</span><br></pre></td></tr></table></figure><h3 id="import"><a href="#import" class="headerlink" title="import"></a>import</h3><ul><li>import { 输入的对象 } from ‘路径’;</li><li>多次执行同一语句，只执行一次</li></ul><h3 id="export-default-默认指定输出"><a href="#export-default-默认指定输出" class="headerlink" title="export default 默认指定输出"></a>export default 默认指定输出</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;foo&#x27;</span>);<span class="comment">// 默认指定输出foo</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">其它文件引入时可直接另起名字</span><br><span class="line"><span class="keyword">import</span> customName <span class="keyword">from</span> <span class="string">&#x27;默认输出文件的路径&#x27;</span>;</span><br><span class="line"><span class="title function_">customName</span>(); <span class="comment">// &#x27;foo&#x27;</span></span><br><span class="line"></span><br><span class="line">对比：<span class="keyword">import</span>是否用&#123; &#125;                    </span><br><span class="line">如果想在一条<span class="keyword">import</span>语句中，同时输入默认方法和其他接口，可以写成下面这样。</span><br><span class="line"><span class="keyword">import</span> _, &#123; each, forEach &#125; <span class="keyword">from</span> <span class="string">&#x27;lodash&#x27;</span>; <span class="comment">//each as forEach    </span></span><br></pre></td></tr></table></figure><h3 id="export-与-import-的复合写法"><a href="#export-与-import-的复合写法" class="headerlink" title="export 与 import 的复合写法"></a>export 与 import 的复合写法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> * <span class="keyword">as</span> ns <span class="keyword">from</span> <span class="string">&quot;mod&quot;</span>; <span class="comment">// *表输出这个模块的所有模块和方法，但会忽略该模块的default方法</span></span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> ns <span class="keyword">from</span> <span class="string">&quot;mod&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> &#123;ns&#125;;<span class="comment">//但当前模块不能直接使用ns</span></span><br></pre></td></tr></table></figure><h3 id="import-类似于-Node-js-的require-方法，区别主要是前者是异步加载，后者是同步加载"><a href="#import-类似于-Node-js-的require-方法，区别主要是前者是异步加载，后者是同步加载" class="headerlink" title="import()类似于 Node.js 的require()方法，区别主要是前者是异步加载，后者是同步加载"></a>import()类似于 Node.js 的require()方法，区别主要是前者是异步加载，后者是同步加载</h3><ol><li>按需加载<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">button.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="params">event</span> =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">import</span>(<span class="string">&#x27;./dialogBox.js&#x27;</span>)</span><br><span class="line">.<span class="title function_">then</span>(<span class="function"><span class="params">dialogBox</span> =&gt;</span> &#123;</span><br><span class="line">dialogBox.<span class="title function_">open</span>();</span><br><span class="line">&#125;)</span><br><span class="line">.<span class="title function_">catch</span>(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line"><span class="comment">/* Error handling */</span></span><br><span class="line">&#125;)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li>条件加载 （if…else）  </li><li>动态模块路径</li></ol><ul><li>import(f())</li><li>.then(…);</li></ul><h3 id="注意：不使用require"><a href="#注意：不使用require" class="headerlink" title="注意：不使用require()"></a>注意：不使用require()</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;模块功能主要由两个命令构成：export和import&quot;&gt;&lt;a href=&quot;#模块功能主要由两个命令构成：export和import&quot; class=&quot;headerlink&quot; title=&quot;模块功能主要由两个命令构成：export和import&quot;&gt;&lt;/a&gt;模块功能主</summary>
      
    
    
    
    <category term="es6" scheme="http://example.com/categories/es6/"/>
    
    
  </entry>
  
  <entry>
    <title>ES6-Generator遍历器</title>
    <link href="http://example.com/2024/10/31/ES6/es6-Generator/"/>
    <id>http://example.com/2024/10/31/ES6/es6-Generator/</id>
    <published>2024-10-31T07:54:04.579Z</published>
    <updated>2024-10-31T08:43:56.885Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Generator 是一种特殊的函数类型，可以在函数执行过程中暂停和恢复执行。它通过使用 yield 表达式来实现中断和恢复执行的功能。</p></blockquote><ul><li>当 Generator 函数被调用时，它并不会立即执行，而是返回一个迭代器对象。每次调用迭代器对象的 next() 方法时，Generator 函数会<code>从上一次执行的位置继续执行</code>，直到<code>遇到下一个 yield 表达式或函数结束</code>。此时，Generator 函数将返回一个包含当前值和执行状态的对象，其中 <code>value</code> 属性表示<code> yield 表达式的结果</code>，<code>done</code> 属性表示<code>是否执行完毕</code>。</li></ul><h2 id="Iterator-的遍历过程"><a href="#Iterator-的遍历过程" class="headerlink" title="Iterator 的遍历过程:"></a>Iterator 的遍历过程:</h2><ol><li>创建一个指针对象，指向当前数据结构的起始位置。</li></ol><ul><li>var it &#x3D; makeIterator([‘a’, ‘b’]);</li></ul><ol start="2"><li>第一次调用指针对象的next方法，可以将指针指向数据结构的第一个成员。</li></ol><ul><li>it.next() &#x2F;&#x2F; { value: “a”, done: false }</li><li>返回两个值，value：当前成员的值，done：是否遍历结束，返回布尔值</li></ul><ol start="3"><li>第二次调用指针对象的next方法，指针就指向数据结构的第二个成员。</li></ol><ul><li>it.next() &#x2F;&#x2F; { value: “b”, done: false }</li></ul><ol start="4"><li>不断调用指针对象的next方法，直到它指向数据结构的结束位置。</li></ol><ul><li>it.next() &#x2F;&#x2F; { value: undefined, done: true }</li></ul><h2 id="Generator-function"><a href="#Generator-function" class="headerlink" title="Generator (function*)"></a>Generator (function*)</h2><pre><code>函数体内部使用yield表达式，定义不同的内部状态</code></pre><h2 id="yield-后面跟的是一个可遍历的结构，它会调用该结构的遍历器接口"><a href="#yield-后面跟的是一个可遍历的结构，它会调用该结构的遍历器接口" class="headerlink" title="yield* 后面跟的是一个可遍历的结构，它会调用该结构的遍历器接口"></a>yield* 后面跟的是一个可遍历的结构，它会调用该结构的遍历器接口</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">yield</span> 用在表达式中要加一个圆括号</span><br><span class="line"><span class="keyword">let</span> generator = <span class="keyword">function</span>* () &#123;</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">yield</span>* [<span class="number">2</span>,<span class="number">4</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> iterator = <span class="title function_">generator</span>();</span><br><span class="line">iterator.<span class="title function_">next</span>() <span class="comment">// &#123; value: 1, done: false &#125;</span></span><br><span class="line">iterator.<span class="title function_">next</span>() <span class="comment">// &#123; value: 2, done: false &#125;</span></span><br><span class="line">iterator.<span class="title function_">next</span>() <span class="comment">// &#123; value: 4, done: false &#125;</span></span><br><span class="line">iterator.<span class="title function_">next</span>() <span class="comment">// &#123; value: undefined, done: true &#125;</span></span><br></pre></td></tr></table></figure><ul><li>普通的对象，for…of不能用，用for…in</li></ul><h3 id="作为对象属性的-Generator-函数"><a href="#作为对象属性的-Generator-函数" class="headerlink" title="作为对象属性的 Generator 函数"></a>作为对象属性的 Generator 函数</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  * <span class="title function_">myGeneratorMethod</span>(<span class="params"></span>) &#123;</span><br><span class="line">    ···</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;Generator 是一种特殊的函数类型，可以在函数执行过程中暂停和恢复执行。它通过使用 yield 表达式来实现中断和恢复执行的功能。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;当 Generator 函数被调用时，它并不会立即执行，</summary>
      
    
    
    
    <category term="es6" scheme="http://example.com/categories/es6/"/>
    
    
  </entry>
  
  <entry>
    <title>ES6-Date</title>
    <link href="http://example.com/2024/10/31/ES6/es6-Date()%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/"/>
    <id>http://example.com/2024/10/31/ES6/es6-Date()%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/</id>
    <published>2024-10-31T07:54:04.572Z</published>
    <updated>2024-10-31T08:46:35.979Z</updated>
    
    <content type="html"><![CDATA[<ul><li><h3 id="new-Date"><a href="#new-Date" class="headerlink" title="new Date()"></a>new Date()</h3></li><li><h3 id="new-Date-年，月，日（可选），…"><a href="#new-Date-年，月，日（可选），…" class="headerlink" title="new Date(年，月，日（可选），…)"></a>new Date(年，月，日（可选），…)</h3></li><li><h3 id="getFullYear-获取年"><a href="#getFullYear-获取年" class="headerlink" title=".getFullYear() 获取年"></a><code>.getFullYear() </code>获取年</h3></li><li><h3 id="getMonth-获取月"><a href="#getMonth-获取月" class="headerlink" title=".getMonth() 获取月"></a><code>.getMonth()</code> 获取月</h3></li><li><h3 id="getDate-获取日"><a href="#getDate-获取日" class="headerlink" title=".getDate() 获取日"></a><code>.getDate()</code> 获取日</h3></li><li><h3 id="getDay-获取一周中每天的对应数值"><a href="#getDay-获取一周中每天的对应数值" class="headerlink" title=".getDay()获取一周中每天的对应数值"></a><code>.getDay()</code>获取一周中每天的对应数值</h3></li></ul><p>（可以将需要展示对应天数的文本用数组形式显示，然后通过下标获取）</p><ul><li><h3 id="day-传-0-表示获取上个月最后一天"><a href="#day-传-0-表示获取上个月最后一天" class="headerlink" title="day 传 0 表示获取上个月最后一天"></a>day 传 0 表示获取上个月最后一天</h3></li></ul><p><code>const endDate = new Date(年, 月, 0)</code></p><ul><li><h3 id="valueOf-转换成时间戳"><a href="#valueOf-转换成时间戳" class="headerlink" title=".valueOf  转换成时间戳"></a><code>.valueOf</code>  转换成时间戳</h3></li><li><h3 id="toTimeString-时间戳转字符串"><a href="#toTimeString-时间戳转字符串" class="headerlink" title=".toTimeString() 时间戳转字符串"></a><code>.toTimeString()</code> 时间戳转字符串</h3></li><li><h3 id="setHours-小时，分钟，秒-设置时间"><a href="#setHours-小时，分钟，秒-设置时间" class="headerlink" title=".setHours(小时，分钟，秒) 设置时间"></a><code>.setHours(小时，分钟，秒)</code> 设置时间</h3></li><li><h3 id="习惯使用-，弱类型转换，把string类型转number类型"><a href="#习惯使用-，弱类型转换，把string类型转number类型" class="headerlink" title="习惯使用+，弱类型转换，把string类型转number类型"></a>习惯使用+，弱类型转换，把string类型转number类型</h3></li><li><h3 id="借助插件减少代码量和一些工作"><a href="#借助插件减少代码量和一些工作" class="headerlink" title="借助插件减少代码量和一些工作"></a>借助插件减少代码量和一些工作</h3><ul><li>DayJs —- <a href="https://dayjs.fenxianglu.cn/">https://dayjs.fenxianglu.cn/</a><br>dayjs().format(‘YYYY-MM-DD HH:mm:ss’)<br>当使用一些查询的方法时，有些依赖一些插件<br>要注意调用dayjs.extend(插件)，最好放在全局调用</li></ul></li></ul><h1 id="时区"><a href="#时区" class="headerlink" title="时区"></a>时区</h1><ul><li>GMT 格林威治时间与东八区相差 8 个小时</li><li><h3 id="UTC-0时区与本地时区的差值，单位为分钟"><a href="#UTC-0时区与本地时区的差值，单位为分钟" class="headerlink" title="UTC+0时区与本地时区的差值，单位为分钟"></a>UTC+0时区与本地时区的差值，单位为分钟</h3>  new Date().getTimezoneOffset()</li><li><h3 id="解决时区不同时间不同的问题"><a href="#解决时区不同时间不同的问题" class="headerlink" title="解决时区不同时间不同的问题"></a>解决时区不同时间不同的问题</h3><ul><li><p>首先获取零时区的时间</p></li><li><p>const diff &#x3D; new Date().getTimezoneOffset() &#x2F;&#x2F; 先获取当前地区与零时区的时间差</p></li><li><p>const absTime &#x3D; new Date.getTime() + diff * 60 * 1000 &#x2F;&#x2F; 根据本地时间与时间差获取格林威治时间</p></li><li><p>其次获取不同地区与零时区的时差</p></li><li><p>let localTime &#x3D; new Date(absTime + timeZone * 60 * 60 *1000)  &#x2F;&#x2F; timeZone 传进来的时间单位小时，东为正西为负</p></li><li><p>用零时区的时间加减与零时区的视察，得到各地的绝对时间</p></li><li><p>考虑夏令时<br>  根据资料，获得美国和澳大利亚的夏令时规则：</p><p>  美国:<br>  每年的3月第二个星期日02:00:00，时钟向前调整1小时，变为03:00:00，开始夏令时。</p><p>  每年的11月第一个星期日02:00:00，时钟向后调整1小时，变为01:00:00，结束夏令时。</p><p>  澳大利亚:<br>  每年的10月第一个星期日02:00:00，时钟向前调整1小时，变为03:00:00，开始夏令时。</p><p>  每年的4月第一个星期日03:00:00，时钟向后调整1小时，变为02:00:00，结束夏令时。</p></li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * timeZone: 东n区为正，西n区为负, 单位为小时</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">getFullTimeInfo</span> = (<span class="params">timeZone, country, spliter</span>) =&gt; &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取本地时间与格林威治时间的时间差(注意是分钟，记得转换)</span></span><br><span class="line"><span class="keyword">const</span> diff = <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">getTimezoneOffset</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//根据本地时间和时间差获得格林威治时间</span></span><br><span class="line"><span class="keyword">const</span> absTime = <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">getTime</span>() + diff * <span class="number">60</span> * <span class="number">1000</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//根据格林威治时间和各地时区，得到各地时区的时间</span></span><br><span class="line"><span class="keyword">let</span> localTime = <span class="keyword">new</span> <span class="title class_">Date</span>(absTime + timeZone * <span class="number">60</span> * <span class="number">60</span> * <span class="number">1000</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 考虑夏令时</span></span><br><span class="line"><span class="comment">// judgeDST是我封装好的一个判断夏令时的方法</span></span><br><span class="line"><span class="keyword">const</span> isDST = <span class="title function_">judgeDST</span>(localTime, country);</span><br><span class="line"><span class="keyword">if</span> (isDST) &#123;</span><br><span class="line">localTime = <span class="keyword">new</span> <span class="title class_">Date</span>(absTime + (timeZone + <span class="number">1</span>) * <span class="number">60</span> * <span class="number">60</span> * <span class="number">1000</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line"><span class="attr">time</span>: <span class="title function_">formatTime</span>(localTime, spliter).<span class="title function_">split</span>(<span class="string">&#x27;:&#x27;</span>).<span class="title function_">slice</span>(<span class="number">0</span>,<span class="number">2</span>).<span class="title function_">join</span>(<span class="string">&#x27;:&#x27;</span>), </span><br><span class="line">isDST</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;&lt;h3 id=&quot;new-Date&quot;&gt;&lt;a href=&quot;#new-Date&quot; class=&quot;headerlink&quot; title=&quot;new Date()&quot;&gt;&lt;/a&gt;new Date()&lt;/h3&gt;&lt;/li&gt;
&lt;li&gt;&lt;h3 id=&quot;new-Date-年，月，日（可选）</summary>
      
    
    
    
    <category term="es6" scheme="http://example.com/categories/es6/"/>
    
    
  </entry>
  
</feed>
