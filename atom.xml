<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2024-11-20T09:02:54.291Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>UUOVO</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JS-定时器与延时器</title>
    <link href="http://example.com/2024/11/19/JS/%E5%AE%9A%E6%97%B6%E5%99%A8%E4%B8%8E%E5%BB%B6%E6%97%B6%E5%99%A8/"/>
    <id>http://example.com/2024/11/19/JS/%E5%AE%9A%E6%97%B6%E5%99%A8%E4%B8%8E%E5%BB%B6%E6%97%B6%E5%99%A8/</id>
    <published>2024-11-19T02:03:17.253Z</published>
    <updated>2024-11-20T09:02:54.291Z</updated>
    
    <content type="html"><![CDATA[<style>    .en {        color: green;        font-weight: 600;    }    .desc {        color: #CD853F;        font-weight: 600;        font-size:14px;    }</style><h2 id="定时器"><a href="#定时器" class="headerlink" title="定时器"></a>定时器</h2><h3 id="setInterval"><a href="#setInterval" class="headerlink" title="setInterval"></a>setInterval</h3><ul><li><span class="en">用于重复执行一个函数或代码片段</span>，每次调用之间都有一个<span class="en">固定的时间</span>延迟。它</li><li>参数：<ol><li>回调函数，该函数会每隔一段时间被调用一次</li><li>每次调用间隔的时间，单位是毫秒</li></ol></li><li>返回值：<ul><li>返回一个 Number 类型的数据，这个数字用来作为定时器的唯一标识</li></ul></li><li>当调用 setInterval 时，它会在<span class="en">初始延迟后安排执行</span>指定的函数的第一次执行。随后的执行将根据指定的延迟重复发生。(<span class="desc">所以如果要从0毫秒开始执行，要提前调用指定函数</span>)</li><li><span class="desc">需要注意的是 setInterval 不是完全精确的。</span></li><li>可以接受无限数量的参数</li></ul><h3 id="clearInterval"><a href="#clearInterval" class="headerlink" title="clearInterval"></a>clearInterval</h3><ul><li>取消先前通过调用 setInterval 建立的定时重复操作</li><li>参数：setInterval 返回的间隔 ID</li></ul><h3 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h3><ul><li>编辑应用中的自动保存</li><li>动画和幻灯片播放定时</li><li>基于时间的提醒</li><li>间隔取消</li></ul><h3 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">cancellable</span>(<span class="params">fn: <span class="built_in">Function</span>, args: any[], t: number</span>): <span class="title class_">Function</span> &#123;</span><br><span class="line">    <span class="title function_">fn</span>(...args); <span class="comment">// 从0开始执行</span></span><br><span class="line">    <span class="keyword">const</span> timer = <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> <span class="title function_">fn</span>(...args), t); <span class="comment">// 从t开始执行</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">cancelFn</span> = (<span class="params"></span>) =&gt; <span class="built_in">clearInterval</span>(timer);</span><br><span class="line">    <span class="keyword">return</span> cancelFn;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="延时器"><a href="#延时器" class="headerlink" title="延时器"></a>延时器</h2><h3 id="setTimeout"><a href="#setTimeout" class="headerlink" title="setTimeout"></a>setTimeout</h3><ul><li>允许在指定的延迟之后安排一个函数的执行</li><li>接受无限数量的参数，但通常前两个参数总是要执行的函数和以毫秒为单位的延迟时间。</li></ul><h3 id="clearTimeout"><a href="#clearTimeout" class="headerlink" title="clearTimeout"></a>clearTimeout</h3><ul><li>取消先前通过调用 setTimeout 建立的延时操作</li><li>参数：setTimeout 返回的间隔 ID</li></ul><h3 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h3><ul><li>当调用 setTimeout 时，它启动一个计时器，并设置它在指定的延迟后运行</li><li>在延迟到期后，JavaScript事件循环将指定的函数放入执行队列。</li><li>一旦调用堆栈为空，函数就会被执行，其中的任何相关代码都会运行。</li><li>如果在延迟到期之前取消了 setTimeout 函数，计划的函数将不会被执行。</li></ul><h3 id="使用示例-1"><a href="#使用示例-1" class="headerlink" title="使用示例"></a>使用示例</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">delayedFunction</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;延迟函数执行！&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> delay = <span class="number">2000</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> timerId = <span class="built_in">setTimeout</span>(delayedFunction, delay);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在延迟到期之前取消执行：</span></span><br><span class="line"><span class="built_in">clearTimeout</span>(timerId);</span><br></pre></td></tr></table></figure><h2 id="延时器和定时器的区别"><a href="#延时器和定时器的区别" class="headerlink" title="延时器和定时器的区别"></a>延时器和定时器的区别</h2><ul><li>定时调用会执行多次，而延时调用只会执行一次</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;style&gt;
    .en {
        color: green;
        font-weight: 600;
    }
    .desc {
        color: #CD853F;
        font-weight: 600;
      </summary>
      
    
    
    
    <category term="JavaScript" scheme="http://example.com/categories/JavaScript/"/>
    
    
    <category term="定时器" scheme="http://example.com/tags/%E5%AE%9A%E6%97%B6%E5%99%A8/"/>
    
    <category term="延时器" scheme="http://example.com/tags/%E5%BB%B6%E6%97%B6%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>微信小程序-项目遇到的问题合集</title>
    <link href="http://example.com/2024/11/04/WeChatMini/%E9%A1%B9%E7%9B%AE%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98%E5%90%88%E9%9B%86/"/>
    <id>http://example.com/2024/11/04/WeChatMini/%E9%A1%B9%E7%9B%AE%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98%E5%90%88%E9%9B%86/</id>
    <published>2024-11-04T01:57:32.116Z</published>
    <updated>2024-11-22T04:05:14.193Z</updated>
    
    <content type="html"><![CDATA[<style>.en {  color: #3D82AC;  font-weight: 600;}.ans {  font-size:14px;}</style><h2 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a>注意事项：</h2><ul><li>重复调用请求影响服务器性能尤其是全局调用时要多检查</li><li>微信小程序的三目运算格式中冒号前后如果是字符串的一定要用双引号或单引号包起来，否则不生效。示例：a ? ‘b’ : ‘c’</li></ul><p></p><h2 id="tailwind-、taro-、小程序之间的问题"><a href="#tailwind-、taro-、小程序之间的问题" class="headerlink" title="tailwind 、taro 、小程序之间的问题"></a>tailwind 、taro 、小程序之间的问题</h2><h3 id="解决构建后生成的miniprogram-npm包太大，主包超过2M"><a href="#解决构建后生成的miniprogram-npm包太大，主包超过2M" class="headerlink" title="解决构建后生成的miniprogram_npm包太大，主包超过2M"></a>解决构建后生成的miniprogram_npm包太大，主包超过2M</h3><ul><li>在project.config.json中的setting设置<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;ignoreDevUnusedFiles&quot;</span>: <span class="literal">true</span>, <span class="comment">// 预览、真机调试和本地模拟器等开发阶段是否过滤无依赖文件，默认为true</span></span><br><span class="line"><span class="string">&quot;ignoreUploadUnusedFiles&quot;</span>: <span class="literal">true</span> <span class="comment">// 上传时过滤无依赖文件</span></span><br></pre></td></tr></table></figure></li><li>其他配置参考<a href="https://developers.weixin.qq.com/miniprogram/dev/devtools/projectconfig.html">微信小程序项目配置文件</a></li></ul><h3 id="解决vscode中ts插件与小程序的api的飘红线问题"><a href="#解决vscode中ts插件与小程序的api的飘红线问题" class="headerlink" title="解决vscode中ts插件与小程序的api的飘红线问题"></a>解决vscode中ts插件与小程序的api的飘红线问题</h3><ul><li>在typings&#x2F;index上添加<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference path=&quot;../node_modules/miniprogram-api-typings/index.d.ts&quot; /&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="解决tsconfig-json报错【找不到“sass”的类型定义文件。程序包含该文件是因为-隐式类型库-“sass”-的入口点】"><a href="#解决tsconfig-json报错【找不到“sass”的类型定义文件。程序包含该文件是因为-隐式类型库-“sass”-的入口点】" class="headerlink" title="解决tsconfig.json报错【找不到“sass”的类型定义文件。程序包含该文件是因为:隐式类型库 “sass” 的入口点】"></a>解决tsconfig.json报错【找不到“sass”的类型定义文件。程序包含该文件是因为:隐式类型库 “sass” 的入口点】</h3><ul><li>1.安装<span class="en">npm install –save-dev @types&#x2F;<a href="mailto:&#x73;&#97;&#x73;&#x73;&#x40;&#x31;&#46;&#52;&#51;&#46;&#49;">&#x73;&#97;&#x73;&#x73;&#x40;&#x31;&#46;&#52;&#51;&#46;&#49;</a></span></li><li>2.然后重启vscode</li><li>3.如果还飘红，则在tsconfig.json中添加以下配置项<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;compilerOptions&quot;</span>: &#123;</span><br><span class="line">  <span class="string">&quot;types&quot;</span>: [<span class="string">&quot;sass&quot;</span>] </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="解决tailwindcss和小程序的结合后-tailwind-base-之类的增加到app-scss中微信小程序报错【app-wxss-unexpected-token-“-”】"><a href="#解决tailwindcss和小程序的结合后-tailwind-base-之类的增加到app-scss中微信小程序报错【app-wxss-unexpected-token-“-”】" class="headerlink" title="解决tailwindcss和小程序的结合后 @tailwind base;之类的增加到app.scss中微信小程序报错【app.wxss unexpected token “;”】"></a>解决tailwindcss和小程序的结合后 @tailwind base;之类的增加到app.scss中微信小程序报错【app.wxss unexpected token “;”】</h3><ul><li>1.执行<span class="en">npx tailwindcss -o .&#x2F;src&#x2F;style&#x2F;tailwind.css</span></li><li>2.在index.html中的head标签添加<span class="en"><code>&lt;link href=&quot;./style/tailwind.css&quot; rel=&quot;stylesheet&quot; /&gt;</code></span></li></ul><h3 id="解决发现tailwind的样式在小程序中不生效"><a href="#解决发现tailwind的样式在小程序中不生效" class="headerlink" title="解决发现tailwind的样式在小程序中不生效"></a>解决发现tailwind的样式在小程序中不生效</h3><ul><li>参考文档：<a href="https://juejin.cn/post/7246328828838510653">Taro项目引入Tailwindcss的几种方式</a></li><li>1.安装<span class="en">npm install -D tailwindcss postcss autoprefixer weapp-tailwindcss</span></li><li>2.初始化配置<span class="en">npx tailwindcss init</span></li><li>3.在tailwindcss.config.js增加配置<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** <span class="doctag">@type</span> &#123;<span class="type">import(&#x27;tailwindcss&#x27;).Config</span>&#125; */</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="comment">// 不在 content 包括的文件内编写的 class，不会生成对应的工具类</span></span><br><span class="line">  <span class="attr">content</span>: [<span class="string">&#x27;./public/index.html&#x27;</span>, <span class="string">&#x27;./src/**/*.&#123;html,js,ts,jsx,tsx,vue&#125;&#x27;</span>],</span><br><span class="line">  <span class="comment">// 其他配置项</span></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="attr">corePlugins</span>: &#123;</span><br><span class="line">    <span class="comment">// 不需要 preflight，因为这主要是给 h5 的，如果你要同时开发小程序和 h5 端，你应该使用环境变量来控制它</span></span><br><span class="line">    <span class="attr">preflight</span>: <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>4.创建postcss.config.js,并注册tailwindcss<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// postcss.config.js</span></span><br><span class="line"><span class="comment">// 假如你使用的框架/工具不支持 postcss.config.js，则可以使用内联的写法</span></span><br><span class="line"><span class="comment">// 其中 `autoprefixer` 有可能已经内置了，假如框架内置了可以去除</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">plugins</span>: &#123;</span><br><span class="line">    <span class="attr">tailwindcss</span>: &#123;&#125;,</span><br><span class="line">    <span class="attr">autoprefixer</span>: &#123;&#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>5.在项目的配置文件 config&#x2F;index中注册weapp-tailwindcss:<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// config/index.js</span></span><br><span class="line"><span class="keyword">const</span> &#123; <span class="title class_">UnifiedWebpackPluginV5</span> &#125; = <span class="title function_">require</span>(<span class="params"><span class="string">&#x27;weapp-tailwindcss/webpack&#x27;</span></span>)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">mini</span>: &#123;</span><br><span class="line">    <span class="title function_">webpackChain</span>(<span class="params">chain, webpack</span>) &#123;</span><br><span class="line">      chain.<span class="title function_">merge</span>(&#123;</span><br><span class="line">        <span class="attr">plugin</span>: &#123;</span><br><span class="line">          <span class="attr">install</span>: &#123;</span><br><span class="line">            <span class="attr">plugin</span>: <span class="title class_">UnifiedWebpackPluginV5</span>,</span><br><span class="line">            <span class="attr">args</span>: [&#123;</span><br><span class="line">              <span class="attr">appType</span>: <span class="string">&#x27;taro&#x27;</span></span><br><span class="line">            &#125;]</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>6.和@tarojs&#x2F;plugin-html 一起使用时，需要配置下 postcss-html-transform 这个插件，不然它会移除整个 Tailwindcss 注入的  css var 区域块，造成所有 tw-* 相关变量找不到。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// config/index.js</span></span><br><span class="line">config = &#123;</span><br><span class="line">  <span class="attr">mini</span>: &#123;</span><br><span class="line">    <span class="attr">postcss</span>: &#123;</span><br><span class="line">      <span class="attr">htmltransform</span>: &#123;</span><br><span class="line">        <span class="attr">enable</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="comment">// 设置成 false 表示 不去除 * 相关的选择器区块</span></span><br><span class="line">        <span class="comment">// 假如开启这个配置，它会把 tailwindcss 整个 css var 的区域块直接去除掉</span></span><br><span class="line">        <span class="comment">// 需要用 config 套一层，官方文档上是错的</span></span><br><span class="line">        <span class="attr">config</span>: &#123;</span><br><span class="line">          <span class="attr">removeCursorStyle</span>: <span class="literal">false</span>,</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>7.在项目入口(app.scss)引入tailwindcss<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">import</span> <span class="string">&quot;tailwindcss/base&quot;</span>;</span><br><span class="line">@<span class="keyword">import</span> <span class="string">&quot;tailwindcss/utilities&quot;</span>;</span><br><span class="line">@<span class="keyword">import</span> <span class="string">&quot;tailwindcss/components&quot;</span>;</span><br></pre></td></tr></table></figure></li></ul><h2 id="关于js、node配置的问题"><a href="#关于js、node配置的问题" class="headerlink" title="关于js、node配置的问题"></a>关于js、node配置的问题</h2><h3 id="运行js文件时"><a href="#运行js文件时" class="headerlink" title="运行js文件时"></a>运行js文件时</h3><ul><li>解决提示<span class="ans">【Warning: To load an ES module, set “type” - “module” in JS】</span></li><li>在package.json中配置<span class="en">type:”module”</span>即可</li></ul><h3 id="运行js文件时-1"><a href="#运行js文件时-1" class="headerlink" title="运行js文件时"></a>运行js文件时</h3><ul><li>解决提示<span class="ans">【Invalid package config E:\practice\p-four\node_modules\iconv-lite\package.json while importing “iconv-lite” from xxxx.js. Unexpected token &lt; in JSON at position 101】</span></li><li>运行<span class="en">npm install</span></li></ul><h3 id="运行项目"><a href="#运行项目" class="headerlink" title="运行项目"></a>运行项目</h3><ul><li>解决提示<span class="ans">【Error [ERR_MODULE_NOT_FOUND]: Cannot find module ‘xxx\config\webpack.common’ imported from xxx\config\webpack.dev.js】</span></li><li>把package.json的type去掉</li></ul><h3 id="运行项目网页"><a href="#运行项目网页" class="headerlink" title="运行项目网页"></a>运行项目网页</h3><ul><li>解决提示<span class="ans">【Refused to apply style from ‘<a href="http://localhost:9000/comp/asset/main.css">http://localhost:9000/comp/asset/main.css</a>‘ because its MIME type (‘text&#x2F;html’) is not a supported stylesheet MIME type, and strict MIME checking is enabled.】</span></li><li>webpack.config.js 添加 publicPath 属性<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">path</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;build&quot;</span>),</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&quot;build.[contenthash:10].js&quot;</span>,</span><br><span class="line">    <span class="attr">publicPath</span>: <span class="string">&quot;/&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>参考文章：<a href="https://juejin.cn/post/6979855519490474021">该文章最后一个问题</a></li></ul><h3 id="项目运行后"><a href="#项目运行后" class="headerlink" title="项目运行后"></a>项目运行后</h3><ul><li>解决刷新就会提示<span class="ans">【GET <a href="http://localhost:9000/comp/asset/image/gongzuotai.png">http://localhost:9000/comp/asset/image/gongzuotai.png</a> 404 (Not Found)】</span></li><li>图片的路径不对，在所有使用图片的路径中使用<span class="en"><code>/asset/image/xxx.jpg</code></span> 而不是<code>asset/image.xxx.jpg</code></li></ul><h3 id="遇到提示"><a href="#遇到提示" class="headerlink" title="遇到提示"></a>遇到提示</h3><ul><li>解决<code>&lt;view&gt;</code>…之类的标签报错问题或者template_v0_p1之类的问题，大概率是项目中不支持该标签</li><li>排查标签使用是否正确。例如：遇到页面使用<code>&lt;div&gt;</code>标签，然后用来小程序使用的<code>&lt;view&gt;</code>标签</li></ul><h3 id="npm报错"><a href="#npm报错" class="headerlink" title="npm报错"></a>npm报错</h3><ul><li><span class="ans">request to <a href="https://registry.npm.taobao.org/">https://registry.npm.taobao.org</a> failed, reason certificate has expired</span></li><li>解决提示淘宝镜像过期</li><li>1.<span class="en">npm config list</span> 查看当前的npm镜像</li><li>2.<span class="en">npm cache clean –force</span> 清空缓存</li><li>3.<span class="en">npm config set registry <a href="https://registry.npmmirror.com/">https://registry.npmmirror.com</a></span> 【推荐】 修改镜像</li><li>或者 <span class="en">npm config set registry <a href="https://registry.npmjs.org/">https://registry.npmjs.org/</a></span> (或npm config delete registry) </li><li>即修改完毕可正常使用</li></ul><h3 id="npm构建报错"><a href="#npm构建报错" class="headerlink" title="npm构建报错"></a>npm构建报错</h3><ul><li>解决构建不出miniprogram_npm</li><li>在project.config.json中添加配置   <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;packNpmManually&quot;</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="string">&quot;packNpmRelationList&quot;</span>: [</span><br><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;packageJsonPath&quot;</span>: <span class="string">&quot;./package.json&quot;</span>,</span><br><span class="line"><span class="string">&quot;miniprogramNpmDistDir&quot;</span>: <span class="string">&quot;./&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">],</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;style&gt;
.en {
  color: #3D82AC;
  font-weight: 600;
}

.ans {
  font-size:14px;
}

&lt;/style&gt;

&lt;h2 id=&quot;注意事项：&quot;&gt;&lt;a href=&quot;#注意事项：&quot; class=&quot;headerli</summary>
      
    
    
    
    <category term="微信小程序" scheme="http://example.com/categories/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
    
    <category term="问题与方案" scheme="http://example.com/tags/%E9%97%AE%E9%A2%98%E4%B8%8E%E6%96%B9%E6%A1%88/"/>
    
  </entry>
  
  <entry>
    <title>微信小程序-小程序优化 | 学习笔记</title>
    <link href="http://example.com/2024/11/04/WeChatMini/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%BC%98%E5%8C%96/"/>
    <id>http://example.com/2024/11/04/WeChatMini/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%BC%98%E5%8C%96/</id>
    <published>2024-11-04T01:57:32.100Z</published>
    <updated>2024-11-22T04:05:13.804Z</updated>
    
    <content type="html"><![CDATA[<style>.en {  color: #3D82AC;  font-weight: 600;}.desc {  color: #CD853F;  font-weight: 600;  font-size:14px;}.key {  color: #483D8B;  font-weight: 700;}</style><h2 id="启动流程"><a href="#启动流程" class="headerlink" title="启动流程"></a>启动流程</h2><ul><li><h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><ul><li>小程序运行进程及运行环境的准备</li><li>代码包下载、校验及初始化</li><li>视图层系统组件、webview容器和原生组件的初始化</li><li>逻辑层JS引擎初始化及域创建</li></ul></li><li><h3 id="代码注入"><a href="#代码注入" class="headerlink" title="代码注入"></a>代码注入</h3><ul><li>框架及第三方基础代码的初始化 — <span class="desc">小程序基础库、扩展库、插件，自定义组件</span></li><li>开发者代码注入<ul><li>开发者逻辑层代码 — <span class="desc">派发<code>App.onLaunch还有App.onShow</code>这些事件</span></li><li>开发者视图层代码 — <span class="desc">公共代码以及页面代码的注入</span></li></ul></li></ul></li><li><h3 id="首屏渲染"><a href="#首屏渲染" class="headerlink" title="首屏渲染"></a>首屏渲染</h3><ul><li>逻辑层页面的初始化，这个时间点是initDataSendTime的一个触发时机，会派发<span class="key">Page.onLoad</span>事件</li><li>视图层时间点走到viewLayerReaderStartTime，会派发<span class="key">Page.onShow</span>事件</li><li>开发者代码从后端拉取数据，准备data数据</li><li>页面的整体的渲染</li><li>视图层时间点走到viewLayerReaderEndTime，会派发<span class="key">Page.onReady</span>事件，标志着首屏渲染的完成</li></ul></li></ul><h2 id="启动方式"><a href="#启动方式" class="headerlink" title="启动方式"></a>启动方式</h2><h3 id="冷启动"><a href="#冷启动" class="headerlink" title="冷启动"></a>冷启动</h3><ul><li>用户设备上第一次打开或销毁后再打开小程序，进入后台<span class="key">30分钟以后</span>再次进入前台冷启动</li></ul><h3 id="热启动"><a href="#热启动" class="headerlink" title="热启动"></a>热启动</h3><ul><li>小程序启动的一种优化机制，小程序进入后台<span class="key">30分钟以内</span>再次进入前台，可以直接从后台状态然后恢复到前台，前面的启动流程都不会执行</li></ul><h2 id="小程序性能的优化"><a href="#小程序性能的优化" class="headerlink" title="小程序性能的优化"></a>小程序性能的优化</h2><h3 id="冷启动性能的优化"><a href="#冷启动性能的优化" class="headerlink" title="冷启动性能的优化"></a>冷启动性能的优化</h3><h4 id="涉及的生命周期函数"><a href="#涉及的生命周期函数" class="headerlink" title="涉及的生命周期函数"></a>涉及的生命周期函数</h4><ul><li><code>App.onLaunch</code>: 监听小程序初始化 — <span class="desc">启动流程，一次性</span></li><li><code>App.onHide</code>：监听小程序切后台 — <span class="desc">运行时性能</span></li><li><code>App.onShow</code>：监听小程序启动或切前台 — <span class="desc">视图显示时派发，重复派发与启动流程相关的事件,运行时性能</span></li></ul><h4 id="涉及的页面生命周期函数"><a href="#涉及的页面生命周期函数" class="headerlink" title="涉及的页面生命周期函数"></a>涉及的页面生命周期函数</h4><ul><li><code>Page.onLoad</code>：监听页面加载 — <span class="desc">启动流程，一次性</span></li><li><code>Page.onShow</code>：监听页面显示 — <span class="desc">视图显示时派发，重复派发与启动流程优化相关的一次性事件</span></li><li><code>Page.onHide</code>：监听页面隐藏 — <span class="desc">运行时性能</span></li><li><code>Page.onReady</code>：监听页面初次渲染完成 — <span class="desc">启动流程，一次性</span></li><li><code>Page.onUnload</code>：监听页面卸载 — <span class="desc">运行时性能</span></li></ul><h4 id="顺着整个过程和涉及的生命周期函数的可优化节点"><a href="#顺着整个过程和涉及的生命周期函数的可优化节点" class="headerlink" title="顺着整个过程和涉及的生命周期函数的可优化节点"></a>顺着整个过程和涉及的生命周期函数的可优化节点</h4><ul><li>环境准备阶段、拉取小程序基本信息阶段 — <span class="desc">拉取信息是同步(用户使用越多启动性能越好，提高轮询机制的命中率)</span></li><li>紧跟小程序基础库更新 — <span class="desc">提高预加载环境的命中率</span></li><li>代码注入阶段 — <span class="desc">减少代码的注入量和复杂度，以期减少启动时间</span></li><li>合适的生命周期函数节点 — <span class="desc">首屏渲染要从后端拉取数据并在首页进行渲染时，使用异步转同步的编程范式以及使用并发复合命令，在多个文件里边对齐这个代码的执行点</span></li><li><code>Page.onReady</code>时间派发、首屏渲染完成阶段 — <span class="desc">使用动态数据加载的，使用骨架屏技巧、压缩图片、提高服务器接口响应效率和数据传输效率</span></li><li>数据预拉去和周期性更新机制 — <span class="desc">微信提供了数据预加载周期性更新机制</span></li><li>低端机首次渲染需要较长时间的情况下 — <span class="desc">微信提供了初始渲染缓存机制</span></li></ul><h3 id="运行时渲染性能的优化"><a href="#运行时渲染性能的优化" class="headerlink" title="运行时渲染性能的优化"></a>运行时渲染性能的优化</h3><h4 id="双线程运行机制"><a href="#双线程运行机制" class="headerlink" title="双线程运行机制"></a>双线程运行机制</h4><ul><li>微信小程序可以看作是由逻辑层、视图层两个线程协同完成运行的</li><li><span class="key">逻辑层负责执行JS代码，视图层负责渲染UI页面。</span>逻辑层与视图层之间的事件触发以及数据传递，即<span class="key">setData方法的调用全是由底层的Native层负责中转完成的</span>。</li><li><span class="key">setData函数用于更新视图数据</span>，按照微信小程序的性能评判标准，setData每次传递的数据大小不能超过256KB，超过这个限制页面就容易卡顿。在页面或者是列表组件scroll事件里面，频繁地调用setData,视图层来不及渲染也会出现明显的卡顿现象。</li></ul><h4 id="冷启动时以及运行时可以使用的性能优化技巧"><a href="#冷启动时以及运行时可以使用的性能优化技巧" class="headerlink" title="冷启动时以及运行时可以使用的性能优化技巧"></a>冷启动时以及运行时可以使用的性能优化技巧</h4><ul><li>使用WXS脚本，在视图层完成事件处理</li><li>重渲染机制</li><li>支持<code>WXWebAssembly</code></li><li>允许开发者另开<code>Worker</code>线程 — <span class="desc">针对JS是单线程执行</span></li><li>分页渲染、使用虚拟<code>DOM</code> — <span class="desc">针对长列表页面setData单次传递的数据不能超过256KB限制</span></li><li>使用<code>LocalStorange</code>接口数据缓存于本地 — <span class="desc">针对每次拉取动态数据需要时间</span></li><li>5s的“挂起”状态 — <span class="desc">进入后台后有5秒挂起状态，在这种状态下setData没有必要执行</span></li><li>启用<code>Http2、Quic</code>协议 — <span class="desc">与后台进行数据交互的时候可以启用Http2 Quic等协议</span></li><li><code>getCurrentPages()</code>接口 — <span class="desc">在page.Unload中将定时器以及wx.onxx的全局监听和与全局对象有关的事件监听全部移除</span></li><li>原生的<code>Context</code>节点 — <span class="desc">原生组件，可以通过SelectorQuery查询到这个原生节点，然后再利用这个原生节点直接操作和更新视图</span></li><li>本地图片上传到云</li></ul><h2 id="骨架屏"><a href="#骨架屏" class="headerlink" title="骨架屏"></a>骨架屏</h2><ul><li>优缺点：<span class="key">不能使首屏渲染加快</span>，但在白屏时给用户提供反馈，<span class="key">减缓用户焦虑</span>等待的情绪</li><li>在data中默认设置<span class="key">loading:true</span>，在数据加载完成后设置<span class="key">loading:false</span>，在页面中可以通过<span class="key">wx:if 和 wx:else来避免</span>数据先加载出来导致和骨架屏页面<span class="key">重叠</span></li><li>不要直接修改生成的骨架屏代码<ul><li>修改配置以后要重新生成骨架屏代码，wxml或js代码后续有修改也要重新生成骨架屏</li></ul></li><li>骨架屏只给主页使用</li></ul><h2 id="使用虚拟DOM，优化长列表内容"><a href="#使用虚拟DOM，优化长列表内容" class="headerlink" title="使用虚拟DOM，优化长列表内容"></a>使用虚拟DOM，优化长列表内容</h2><ul><li>使用<span class="key">recycle-view组件</span>(平台能力-&gt;扩展能力-&gt;扩展组件)</li><li><span class="en">npm install –save miniprogram-recycle-view</span> 安装完成后，构建npm</li><li>在页面的json文件中将<code>recycle-view</code>和<code>recycle-item</code>引用到usingComponent</li><li>很好的实现了虚拟DMOM</li><li>结合滚动事件scrolltolower，还可以实现逐页加载与更新列表数据</li><li>本身已经<span class="key">默认开启throttle函数</span>节流机制</li><li>预留了插槽，方便开发者添加个性业务</li></ul><h2 id="页面容器page-container"><a href="#页面容器page-container" class="headerlink" title="页面容器page-container"></a>页面容器page-container</h2><ul><li>做弹窗</li></ul><h2 id="优化视图页动画效果"><a href="#优化视图页动画效果" class="headerlink" title="优化视图页动画效果"></a>优化视图页动画效果</h2><ul><li>使用Animation对象实现的CSS动画 — <span class="desc">效率最低</span></li><li>使用页面或组件对象拥有的animate，实现<code>关键帧</code>动画 — <span class="desc">第一推荐,效率非最高</span></li><li>滚动事件驱动的响应式动画 — <span class="desc">推荐的低成本创建响应式页面效果的方式</span><ul><li><span class="key">本质上响应式动画也是通过animation接口实现的</span></li><li>依据scroller这个组件的滚动而变化</li><li>通过<span class="en"><code>wx.createSelectorQuery().select(&#39;#id&#39;).fields()</code></span>去查询scroller组件</li><li>然后再回调里面调用animate去设置它的对象，然后再onReady中调用</li></ul></li><li>通过WXS脚本实现的样式动画 —  <span class="desc">效率最高，适用高频动画，但目前只支持es5</span><ul><li>由.wxs脚本实现，事件绑定再一个WXS脚本导出的事件句柄函数</li><li>通过<span class="key">事件句柄函数的ownerInstance</span>调用的<span class="key">selectAllComponents或者selectComponent</span>去查询页面上的组件，查询后通过<span class="key">setStyle</span>设置组件的样式</li></ul></li></ul><h2 id="重渲染与自定义组件优化"><a href="#重渲染与自定义组件优化" class="headerlink" title="重渲染与自定义组件优化"></a>重渲染与自定义组件优化</h2><blockquote><p>重渲染： 使用新的节点树，有目标地将原节点树上需要更新的节点一一更新的过程</p></blockquote><ul><li>将界面功能组件化 — <span class="desc">频繁改动的功能</span></li><li>去掉不必要的数据设置，减少每次setData设置的数据量</li><li>通过wxs脚本改写组件，可以在视图层完成的代码逻辑<ul><li>wxml增加了wxs模块的引入，并且在view中添加<span class="key">change:mode&#x3D;”“ mode&#x3D;”“</span>,wxs脚本中通过函数判断mode来调用对应模式的函数或代码</li><li>使用<span class="key">page.requestAnimationFrame()</span>可以防止跟不上渲染造成卡顿</li></ul></li></ul><h2 id="代码按需注入与初始渲染缓存"><a href="#代码按需注入与初始渲染缓存" class="headerlink" title="代码按需注入与初始渲染缓存"></a>代码按需注入与初始渲染缓存</h2><ul><li><span class="key">“lazyCodeLoading”: “requiredComponents”</span>, 按需注入</li><li><span class="key">“initialRenderingCache”:”xxx”</span>, 使视图层不需要等待逻辑层初始化完毕<ul><li>参数：<code>static</code> 静态初始渲染缓存 | <code>dynamic</code> 动态缓存</li><li><span class="key">this.setInitialRenderingCache({swiperlist: swipers})</span> 设置需要动态缓存的数据</li></ul></li><li>静态导航页用初始渲染缓存，动态详情页用骨架屏</li></ul><h2 id="使用独立分包和分包预加载"><a href="#使用独立分包和分包预加载" class="headerlink" title="使用独立分包和分包预加载"></a>使用独立分包和分包预加载</h2><ul><li><span class="key">this.selectComponent(‘#id’).select(2)</span>指定tarbar默认选中那个索引</li><li>tarbar最好使用自定的组件</li><li>独立分包，获取<code>getApp(&#123;allowDefault : true&#125;)</code><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;preloadRule&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;页面路径&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;nrework&quot;</span><span class="punctuation">:</span> <span class="string">&quot;all&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;packages&quot;</span><span class="punctuation">:</span> <span class="string">&quot;__APP__&quot;</span> <span class="comment">//代表主包</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="独立分包使用占位组件-—-分包异步化"><a href="#独立分包使用占位组件-—-分包异步化" class="headerlink" title="独立分包使用占位组件 — 分包异步化"></a>独立分包使用占位组件 — 分包异步化</h2><ul><li>前提项目已经启用懒加载机制，代码是按需加载注入的，使用占位组件，给自定义组件安排一个替身，在真实的自定义组件加载并注入之前先用替身展示，进一步优化启动的性能</li></ul><h3 id="组件的分包异步化及主页中占位组件的使用"><a href="#组件的分包异步化及主页中占位组件的使用" class="headerlink" title="组件的分包异步化及主页中占位组件的使用"></a>组件的分包异步化及主页中占位组件的使用</h3><ul><li>将首页使用的所有自定义组件移动到分包中，然后再使用占位组件延迟加载它们</li><li>app.json创建组件分包,可以没有页面，把组件放在该分包中</li><li>修改主页配置，将组件由全局用用改为页面引用，并进行占位的组件声明，</li><li>在页面的<code>componentPlaceholder</code>选项下设置组件替身{“原组件名”：”自定义组件|标准组件view”}， 使用自定义组件的话要先引入，然后使用自定义组件名即可</li></ul><h3 id="使用封面页"><a href="#使用封面页" class="headerlink" title="使用封面页"></a>使用封面页</h3><ul><li>创建一个空白效果的页面，作为伪首页只放一个logo和名称，在onReady中添加跳转到真首页代码，作用加载主包中的所有基础内容，加载完成后跳转真首页</li><li>封面页位于主包内，真首页移到分包中，同时preloadRule开启最该分包的预加载</li></ul><h4 id="非独立分包中的页面被访问时主包同时也会被下载，但其他普通分包不会被下载。"><a href="#非独立分包中的页面被访问时主包同时也会被下载，但其他普通分包不会被下载。" class="headerlink" title="非独立分包中的页面被访问时主包同时也会被下载，但其他普通分包不会被下载。"></a>非独立分包中的页面被访问时主包同时也会被下载，但其他普通分包不会被下载。</h4><h4 id="独立分包它并不加载主包，放在主包里边的共享代码，在独立分包里无法直接使用"><a href="#独立分包它并不加载主包，放在主包里边的共享代码，在独立分包里无法直接使用" class="headerlink" title="独立分包它并不加载主包，放在主包里边的共享代码，在独立分包里无法直接使用"></a>独立分包它并不加载主包，放在主包里边的共享代码，在独立分包里无法直接使用</h4><h2 id="JS代码的分包异步化"><a href="#JS代码的分包异步化" class="headerlink" title="JS代码的分包异步化"></a>JS代码的分包异步化</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">;(<span class="title function_">async</span> () =&gt; &#123;&#125;</span><br><span class="line"><span class="keyword">const</span> &#123;<span class="attr">default</span>:getNavList&#125; = <span class="keyword">await</span> <span class="built_in">require</span>.<span class="title function_">async</span>(<span class="string">&quot;../相对路径&quot;</span>)&#125;)&#123;&#125;</span><br><span class="line"><span class="keyword">const</span> &#123;<span class="attr">default</span>:getNavList&#125; = <span class="keyword">await</span> getApp.<span class="title function_">requireAsync</span>(<span class="string">&quot;/绝对地址&quot;</span>)&#125;)&#123;&#125;</span><br></pre></td></tr></table></figure><ul><li>在app.js文件中定义两个支持绝对路径的方法，代替默认的require以及require.async(少用)</li></ul><h3 id="项目插件化"><a href="#项目插件化" class="headerlink" title="项目插件化"></a>项目插件化</h3><ul><li>在插件模式下，静态依赖分析工作不了</li><li>使用插件模式，创建plugin目录，在app.json中给使用的分包配置plugin选项，在app.json中添加pluginRoot选项，配置plugin的放置位置</li><li>在onReady中 <span class="en">requirePlugin(‘myPlugin’,plugin &#x3D;&gt; {})</span></li><li>或 <span class="en">requirePlugin.async(“myPlugin”).then(plugin &#x3D;&gt; {})</span></li><li>使用立即执行函数<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">;(<span class="title function_">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="title function_">requirePlugin</span>(<span class="string">&#x27;myPlugin&#x27;</span>,<span class="function"><span class="params">plugin</span> =&gt;</span> &#123;&#125;)</span><br><span class="line">  <span class="comment">// 或 let plugin = await requirePlugin.async(&quot;myPlugin&quot;).catch()</span></span><br><span class="line">&#125;)&#123;&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="使用WXWebAssembly优化运算性能"><a href="#使用WXWebAssembly优化运算性能" class="headerlink" title="使用WXWebAssembly优化运算性能"></a>使用WXWebAssembly优化运算性能</h2><blockquote><p>允许开发者使用Go、C、C++等后端强类型语言编写代码，然后将其编译为一种类似于汇编代码的二进制代码，弥补解析新语言JS在执行性能上的不足</p></blockquote><ul><li>编写go语言 –&gt; 编译压缩为wasm文件 –&gt; 从Go语言源码里面拷贝并且修改wasm_exec.js文件(必不可少),同时也需要一个text_encoder.js文件</li><li>在项目的根目录创建一个目录，放置Go语言代码<ol><li>先安装Go语言包（Go版本和文件想对应，所以版本安装要谨慎）</li><li>在调用前关闭环境变量 <span class="en">go env -w GO111MODULE&#x3D;off</span></li><li>调用<span class="en">.&#x2F;build.sh (GO111MODULE&#x3D;off GOOS-js GOARCH&#x3D;wasm go build -o 编译后的名字.wasm 编译的文件.go)</span></li><li>压缩文件, 安装<span class="en">brew install brotli</span>,目标位置删除 <span class="en">rm -f 目标路径&#x2F;xx.wasm.br</span>, <span class="en">brotli -o 文件的位置&#x2F;xxx.wasm.br xxx.wasm</span></li></ol></li><li>将相关的js文件、wasm文件全部拷贝至对应的目录，并在次目录下依照原组件的代码，创建新组件</li></ul><h2 id="使用异步转同步的编程范式"><a href="#使用异步转同步的编程范式" class="headerlink" title="使用异步转同步的编程范式"></a>使用异步转同步的编程范式</h2><blockquote><p>异步编程： 除了主线程以外还有一个或者多个异步线程，异步线程处理worker timer定时器、网络请求、用户输入监听、事件派发等任务,<code>当异步线程有回调函数代码需要执行的时候，异步代码将这些代码推入到主线程的执行队列里面去，由主线程在不是很忙碌的时候尽快将这些代码进行执行。</code></p></blockquote><ul><li>编写异步转同步函数:promisify替代request，文件放在公共的位置</li><li>require不支持绝对路径，但在app.js文件中可以使用绝对路径<ul><li>全局的全部示例app可以通过getApp()取到，app.js文件位于项目的根目录下方便标记</li><li>函数调用时为了避免程序报错，在后面一定要加上一个默认的catch设置。</li><li>使用promisify函数的父函数，由于添加了async关键字，已经是同步函数，要避免在主线程上以阻塞的方式，即<span class="key">添加await关键字的方式调用函数</span></li></ul></li></ul><h2 id="使用复合命令模式对齐代码的执行点"><a href="#使用复合命令模式对齐代码的执行点" class="headerlink" title="使用复合命令模式对齐代码的执行点"></a>使用复合命令模式对齐代码的执行点</h2><blockquote><p>复合命令模式是一个设计模式，它和异步转同步的编程范式一样主要作用在于使我们这个代码结构变得更加清晰,易于维护，其次它还可以优化代码的调用逻辑，统筹安排代码的一个执行时机。</p></blockquote><ul><li>在App.onLaunch事件在开始拉取动态数据，将App.onLaunch和首页的Page.onLoad这两个时间节点使用并发的复合命令模式管理起来，让它们可以并发执行</li></ul><h2 id="使用worker开启新线程进行耗时运算"><a href="#使用worker开启新线程进行耗时运算" class="headerlink" title="使用worker开启新线程进行耗时运算"></a>使用worker开启新线程进行耗时运算</h2><blockquote><p>worker：依托于寄主的环境而存在的，可以在后台并行执行JS代码，不影响页面渲染的技术，将worker看作异步线程，可以在异步线程中执行一些比较耗时的计算代码，在计算代码执行完成以后再将执行结果同步给主线程使用</p></blockquote><ul><li>创建worker线程<ul><li>在app.json文件中<code>配置workers:workers&quot;</code></li></ul></li><li>创建组件，只有js改动，在使用后主动销毁worker<ul><li><span class="en">this.worker&#x3D;wx.createWorker(“目录位置”,{useExperimentalworker:true})</sapn></li></ul></li><li>worker和wxs都是异步执行worker比wxs的限制<ul><li>不能使用wx开头的小程序接口</li><li>workers目录下面可以有很多的worker文件，但同时只能有一个worker线程在开启，如果想要开新的线程，需要将原来的先给停掉，销毁掉，并且如果系统资源紧张，worker线程还有可能被系统回收掉</li><li>worker只能放在特定的已经配置好的目录下面，不能随意地放置在其他目录下</li><li>通讯不方便，worker线程和主线程之间的通讯只能使用postMessage和onMessage进行相互通讯，这是相当于观察者模式的一种通讯机制</li></ul></li></ul><h2 id="在后端使用Go语言异步执行逻辑运算代码（如何将前端工作后移）"><a href="#在后端使用Go语言异步执行逻辑运算代码（如何将前端工作后移）" class="headerlink" title="在后端使用Go语言异步执行逻辑运算代码（如何将前端工作后移）"></a>在后端使用Go语言异步执行逻辑运算代码（如何将前端工作后移）</h2><ul><li>创建后端计算接口，存放在server目录</li><li>main.go 会有启动代码，在终端中使用<span class="en">npm dev</span>，要先启用go语言模块化</li><li>扩展接口，将go代码的要扩展的接口主要的代码和相关变量，函数拷贝的项目中要使用页面的其他代码上方</li><li>用curl测试api地址<span class="en">curl api地址</span></li></ul><h2 id="使用串发命令模式延迟同步请求-如何使用数据缓存"><a href="#使用串发命令模式延迟同步请求-如何使用数据缓存" class="headerlink" title="使用串发命令模式延迟同步请求(如何使用数据缓存)"></a>使用串发命令模式延迟同步请求(如何使用数据缓存)</h2><blockquote><p>同步会阻塞主流线程<br>有些接口虽然名称上由Sync结尾，但实际却仍是同步接口，如wx.getSystemInfo、wx.getStorage、wx.setStorage这三个接口经常在App.onLaunch还有Page.onLoad中用到</p></blockquote><ul><li><h3 id="用分接口获取系统信息"><a href="#用分接口获取系统信息" class="headerlink" title="用分接口获取系统信息"></a>用分接口获取系统信息</h3><ul><li><code>wx.getSystemSetting</code> 获取设备设置</li><li><code>wx.getAppAuthorizeSetting</code> 获取微信APP授权设置</li><li><code>wx.getDeviceInfo</code> 获取设备基础信息</li><li><code>wx.getWindowInfo</code> 获取窗口信息</li><li><code>wx.getAppBaseInfo</code> 获取微信APP基础信息</li></ul></li><li><h3 id="启动过程先使用默认参数，启动完成后-即Page-onReady事件派发后-再进行相关接口的调用和缓存后端接口数据的本地缓存存取代码"><a href="#启动过程先使用默认参数，启动完成后-即Page-onReady事件派发后-再进行相关接口的调用和缓存后端接口数据的本地缓存存取代码" class="headerlink" title="启动过程先使用默认参数，启动完成后(即Page.onReady事件派发后)再进行相关接口的调用和缓存后端接口数据的本地缓存存取代码"></a>启动过程先使用默认参数，启动完成后(即Page.onReady事件派发后)再进行相关接口的调用和缓存后端接口数据的本地缓存存取代码</h3></li><li><h3 id="创建SystemInfoManager模块，这样系统信息的获取在首屏渲染后"><a href="#创建SystemInfoManager模块，这样系统信息的获取在首屏渲染后" class="headerlink" title="创建SystemInfoManager模块，这样系统信息的获取在首屏渲染后"></a>创建SystemInfoManager模块，这样系统信息的获取在首屏渲染后</h3><ul><li><span class="key">global.asyncRetrieveSystemInfo.getCommand(0).markComplete()</span>允许异步拉取系统信息 </li><li>拉去系统信息的代码卸载onLaunch</li><li>分页拉取数据，默认page&#x3D;1</li></ul></li></ul><h2 id="首页动态数据的优化"><a href="#首页动态数据的优化" class="headerlink" title="首页动态数据的优化"></a>首页动态数据的优化</h2><ul><li>在App.onLaunch节点开始加载数据</li><li>只加载首页首次渲染所需的一页数据</li></ul><h2 id="小程序切换后台后，关闭对setData的一个调用（监听App进入后台）"><a href="#小程序切换后台后，关闭对setData的一个调用（监听App进入后台）" class="headerlink" title="小程序切换后台后，关闭对setData的一个调用（监听App进入后台）"></a>小程序切换后台后，关闭对setData的一个调用（监听App进入后台）</h2><ul><li><code>wx.onAppHide</code>监听小程序进入后台事件或者 <code>App.onHide</code>捕捉小程序进入后台的时机</li><li>劫持Page对象，再page.js文件中先劫持onLoad和setData，在onLoad中获得setData的引用，然后在app.js文件里面调用page.js文件</li><li>定义工具函数mySetData，在原来所有调用setData的地方改为调用mySetData，<span class="key">不建议</span></li><li>如果必须要发生劫持的话一定要把劫持代码同意放在程序的入口处</li></ul><h2 id="在项目外使用数据预拉取与周期性更新（弱网情况）"><a href="#在项目外使用数据预拉取与周期性更新（弱网情况）" class="headerlink" title="在项目外使用数据预拉取与周期性更新（弱网情况）"></a>在项目外使用数据预拉取与周期性更新（弱网情况）</h2><ul><li>数据预拉取：在小程序启动时，由微信异步调用开发者设置的原函数或数据接口，待拿到数据后，在传递给小程序使用</li><li>周期性更新：微信每隔12小时轮询开发者设置的云函数或数据接口，由开发者在小程序中取用</li><li>在微信小程序平台开启</li><li>使用并发复合命令的竞赛模式拉取数据<ul><li><code>wx.onBackgroundFetchData</code> 微信在拿到预拉取数据的时候设置一个回调函数</li><li><code>wx.getBackgroundFetchData</code> 主动获取微信在本地缓存的预拉取数据，本地没有则拉取失败</li></ul></li></ul><h2 id="优化后端接口及网络请求参数-wx-request"><a href="#优化后端接口及网络请求参数-wx-request" class="headerlink" title="优化后端接口及网络请求参数(wx.request)"></a>优化后端接口及网络请求参数(wx.request)</h2><ul><li>enableCache，开启cache</li><li>enableHttp2，开启http2 — <span class="desc">后端需要开启相关支持</span></li><li>enableQuic，开启quic — <span class="desc">第三代网络，后端需要开启相关支持</span></li></ul><h2 id="视图代码优化技巧"><a href="#视图代码优化技巧" class="headerlink" title="视图代码优化技巧"></a>视图代码优化技巧</h2><ul><li><h3 id="在动态列表渲染优化wx-key使用"><a href="#在动态列表渲染优化wx-key使用" class="headerlink" title="在动态列表渲染优化wx:key使用"></a>在动态列表渲染优化<code>wx:key</code>使用</h3><ul><li>如果列表元素是<span class="key">单一</span>的基本数据类型，并且是唯一的，直接写成<span class="key"><code>*this</code></span>，*this就代表当前数据列表中的元素item</li><li>如果列表元素是<span class="key">对象</span>类型，可以填写列表元素对象中的一个<span class="key">字段名</span>，这个字段名在整个数据列表中必须是唯一的</li><li>列表<span class="key">不是动态</span>的，只渲染一次，wx:key设置为<span class="key">index</span></li></ul></li><li><h3 id="绑定视图事件"><a href="#绑定视图事件" class="headerlink" title="绑定视图事件"></a>绑定视图事件</h3><ul><li>使用<code>catch</code>代替<code>bind</code>，不需要冒泡只在特定节点监听事件</li><li>回传额外信息用<code>data-</code>的形式</li></ul></li><li><h3 id="使用节流函数和防抖函数，防止按钮误单击与scroll事件函数频繁触发"><a href="#使用节流函数和防抖函数，防止按钮误单击与scroll事件函数频繁触发" class="headerlink" title="使用节流函数和防抖函数，防止按钮误单击与scroll事件函数频繁触发"></a>使用节流函数和防抖函数，防止按钮误单击与scroll事件函数频繁触发</h3><ul><li>节流：控制某段JS代码的执行频率</li><li>防抖：避免一次事件当作多次处理</li><li>对于scroll高频事件要节流，使用节流函数<code>throttle</code></li><li>对于用户的<code>单击</code>事件，可以适当使用防抖函数<code>debounce</code></li></ul></li><li><h3 id="重渲染与使用wxml标签要克制"><a href="#重渲染与使用wxml标签要克制" class="headerlink" title="重渲染与使用wxml标签要克制"></a>重渲染与使用wxml标签要克制</h3><ul><li>减少wxml节点的数量,总页面节点数少于1000个，节点数深度层级少于30层，子节点数不大于60个</li><li>控制setData每次传递的数据量</li><li>能不用容器标签就不用</li></ul></li></ul><h2 id="WXSS优化技巧"><a href="#WXSS优化技巧" class="headerlink" title="WXSS优化技巧"></a>WXSS优化技巧</h2><ul><li>给滚动组件开启惯性滚动<ul><li>添加<span class="key">-webkit-overflow-scrolling: touch;</span>样式</li></ul></li><li>使用<span class="key">hover-class</span>实现按钮的单击态<ul><li>代替:active伪类</li></ul></li><li>使用<code>gulp</code>工具删除无用wxss样式 — <span class="desc">只能静态甄别不能动态</span><ul><li><span class="en">npm install gulp -g</span></li><li><span class="en">npm install –save-dev gulp gulp-cleanwxss</span></li><li>创建一个gulpfile.js文件</li><li>执行 gulp<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// gulpfile.js文件</span></span><br><span class="line"><span class="keyword">const</span> gulp = <span class="built_in">require</span>(<span class="string">&quot;gulp&quot;</span>)</span><br><span class="line"><span class="keyword">const</span> cleanwxss = <span class="built_in">require</span>(<span class="string">&quot;gulp-cleanwxss&quot;</span>)</span><br><span class="line">gulp.<span class="title function_">task</span>(<span class="string">&quot;default&quot;</span>, <span class="function">(<span class="params">done</span>) =&gt;</span> &#123; <span class="comment">// 默认执行</span></span><br><span class="line">  gulp.<span class="title function_">arc</span>(<span class="string">&quot;../miniprogram/index/page/*/*.wxss&quot;</span>) <span class="comment">// 处理的文件</span></span><br><span class="line">      .<span class="title function_">pipe</span>(<span class="title function_">cleanwxss</span>(&#123;<span class="attr">log</span>: <span class="literal">true</span>&#125;))</span><br><span class="line">      .<span class="title function_">pipe</span>(gulp.<span class="title function_">dest</span>(<span class="string">&quot;./dist&quot;</span>))  <span class="comment">//处理结果放在该目录下</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="UI交互技巧"><a href="#UI交互技巧" class="headerlink" title="UI交互技巧"></a>UI交互技巧</h2><ul><li>使用<span class="key">padding改变单击区域大小</span></li><li>使用<span class="key">伪元素改变点击区域大小</span><ul><li>给父元素reletive，伪类为absolute，且top、left、right、bottom设置为负值，扩大点击区域</li></ul></li></ul><h2 id="脚本优化技巧"><a href="#脚本优化技巧" class="headerlink" title="脚本优化技巧"></a>脚本优化技巧</h2><ul><li>如果对象被异步线程引用，或者是被全局对象引用，会造成内存泄漏</li><li>定时器是异步线程里的东西，离开页面一定要记得销毁</li><li><span class="key">使用wx.onXXX全局绑定一定要小心，有一个监听必须有一个反监听，在onUnload事件销毁</span></li><li>主题切换事件在模拟器可以通过在app.json配置”darkmode”:true</li><li>使用全局对象要小心<ul><li>所有在global上或者在app上定义的全局数据，或者在上面添加的事件监听</li><li>要及时清理，自定义对象要定义一个dispose方法</li></ul></li><li>使用this对象要谨慎（在周期性发生的异步回调函数里面）</li></ul><h2 id="setData调用优化"><a href="#setData调用优化" class="headerlink" title="setData调用优化"></a>setData调用优化</h2><ul><li>小程序切换到后台后，setData不再调用，可以结合小程序的双线程运行机制和重渲染机制</li><li>不要多次分开调用setData，尽量要合并调用</li><li>不准备渲染的数据不要放在data数据对象里边<ul><li><span class="key">只有需要触发视图更新的数据才需要放在data对象</span></li><li>不需要触发的，可以放在data对象外面（即当前页面对象上），通过this直接取用</li></ul></li><li>通过index局部更新长列表数据<ul><li>使用索引或计算属性更新局部数据</li><li>直接使用当前组件上下文对象的update方法</li></ul></li></ul><h2 id="网络请求优化之使用本地缓存-并发请求的优先级不一致"><a href="#网络请求优化之使用本地缓存-并发请求的优先级不一致" class="headerlink" title="网络请求优化之使用本地缓存 并发请求的优先级不一致"></a>网络请求优化之使用本地缓存 并发请求的优先级不一致</h2><ul><li><h3 id="减少不必要的网络请求，使用本地缓存的数据代替从后端接口拉取的数据"><a href="#减少不必要的网络请求，使用本地缓存的数据代替从后端接口拉取的数据" class="headerlink" title="减少不必要的网络请求，使用本地缓存的数据代替从后端接口拉取的数据"></a>减少不必要的网络请求，使用本地缓存的数据代替从后端接口拉取的数据</h3><ul><li>在首页的JS文件里边有加载小程序导航数据的代码，可以再这里尝试使用本地缓存技术</li><li>首先从本地缓存中尝试取出缓存数据，然后向后端发起网络请求，拿到最新的导航数据以后再调用setData重新设置一下数据，并把本地数据也刷新一遍，避免本地缓存过时（优化：改用并发复合命令或两个异步函数）</li></ul></li><li><h3 id="优化网络请求参数，提高网络请求的通讯效率-—-前面讲wx-request参数已讲"><a href="#优化网络请求参数，提高网络请求的通讯效率-—-前面讲wx-request参数已讲" class="headerlink" title="优化网络请求参数，提高网络请求的通讯效率 — 前面讲wx.request参数已讲"></a>优化网络请求参数，提高网络请求的通讯效率 — 前面讲wx.request参数已讲</h3></li><li><h3 id="优化网络请求的并发数，让优先级高的请求先执行"><a href="#优化网络请求的并发数，让优先级高的请求先执行" class="headerlink" title="优化网络请求的并发数，让优先级高的请求先执行"></a>优化网络请求的并发数，让优先级高的请求先执行</h3><ul><li>因为有由wx.request发出的请求有最大10个的并发限制（限基础库1.4.0以下）</li><li>改造request工具函数<ul><li>安装 <span class="en">yarn add priority-async-queue</span></li><li>构建npm</li><li>使用自定义的request方法时，在重要的网络请求添加priority选项</li><li><code>const res = await request(&#123;url:&quot;&quot;,priority:&quot;urgent&quot;&#125;)</code></li><li>在自定义的request方法中引入<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">PriorityAsyncQueue</span> = <span class="built_in">require</span> <span class="string">&quot;priority-async-queue&quot;</span></span><br><span class="line"><span class="keyword">const</span> queue = <span class="keyword">new</span> <span class="title class_">PriorityAsyncQueue</span>(<span class="number">10</span>) <span class="comment">// default 10</span></span><br><span class="line"><span class="keyword">const</span> low=<span class="string">&quot;low&quot;</span>,normal=<span class="string">&quot;normal&quot;</span>,mid=<span class="string">&quot;mid&quot;</span>,high=<span class="string">&quot;high&quot;</span>,urgent=<span class="string">&quot;urgent&quot;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> priority = &#123;low , normal, mid, high, urgent&#125;</span><br><span class="line"><span class="keyword">const</span> priority = args.<span class="property">priority</span> ? args.<span class="property">priority</span> : normal</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>) =&gt;</span> &#123;</span><br><span class="line">  queue.<span class="title function_">addTask</span>(&#123;prority&#125;, <span class="function">()=&gt;</span>&#123;</span><br><span class="line">    wx.<span class="title function_">request</span>(</span><br><span class="line">      <span class="title class_">Object</span>.<span class="title function_">assign</span>(args,&#123;<span class="attr">success</span>:resolve,<span class="attr">fail</span>:reject&#125;)</span><br><span class="line">  )&#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul><h2 id="图片优化技巧"><a href="#图片优化技巧" class="headerlink" title="图片优化技巧"></a>图片优化技巧</h2><ul><li>尽量减少图片的请求参数</li><li>尽量压缩图片的大小</li><li>尽量使用带有cdn加速的网络图片链接</li><li>尽可能使用高压缩比图片，例如webp格式的图片</li><li>生成雪碧图<ul><li>多张图片合成一张图片，通过background-image来使用的图片</li><li><span class="en">npm install libpng</span></li><li><span class="en">npm -g install miniprogram-slim</span></li><li>执行<span class="en">generate_sprite.sh</span>生成的脚本</li></ul></li><li>图片压缩<ul><li>在线 <a href="https://tinypng.com/">https://tinypng.com/</a></li><li>离线 将图片存放的文件夹拷贝在tools文件夹下，然后执行cpmpress.sh脚本<ul><li><span class="en">npm install libpng</span></li><li><span class="en">miniprogram-slim imagemin -o .&#x2F;生成的文件夹 –png-quality “0.65,0.8” .&#x2F;存放图片的文件夹&#x2F;**&#x2F;*.png</span></li></ul></li></ul></li><li>使用腾讯云cos存储本地图片<ul><li>上传本地图片到cos的方法<ul><li>uploadImageToCos()</li><li><span class="en">npm install cos-nodejs-sdk-v5</span><ul><li><a href="https://github.com/tencentyun/cos-nodejs-sdk-v5">https://github.com/tencentyun/cos-nodejs-sdk-v5</a></li></ul></li></ul></li><li>然后登录腾讯云官方网站开通对象存储服务并创建一个默认的存储桶</li><li>创建一个upload.js文件，实现uploadImageToCos函数</li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;style&gt;
.en {
  color: #3D82AC;
  font-weight: 600;
}

.desc {
  color: #CD853F;
  font-weight: 600;
  font-size:14px;
}

.key {
  color: #4</summary>
      
    
    
    
    <category term="微信小程序" scheme="http://example.com/categories/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
    
    <category term="知识" scheme="http://example.com/tags/%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>微信小程序-解决滚动到对应试图标签也随着动</title>
    <link href="http://example.com/2024/11/04/WeChatMini/%E8%A7%A3%E5%86%B3%E6%BB%9A%E5%8A%A8%E5%88%B0%E5%AF%B9%E5%BA%94%E8%A7%86%E5%9B%BE%E6%A0%87%E7%AD%BE%E4%B9%9F%E9%9A%8F%E7%9D%80%E5%8A%A8/"/>
    <id>http://example.com/2024/11/04/WeChatMini/%E8%A7%A3%E5%86%B3%E6%BB%9A%E5%8A%A8%E5%88%B0%E5%AF%B9%E5%BA%94%E8%A7%86%E5%9B%BE%E6%A0%87%E7%AD%BE%E4%B9%9F%E9%9A%8F%E7%9D%80%E5%8A%A8/</id>
    <published>2024-11-04T01:57:32.083Z</published>
    <updated>2024-11-06T09:30:17.198Z</updated>
    
    <content type="html"><![CDATA[<style>.key {  color: #483D8B;  font-weight: 600;}</style><h2 id="点击对应标签-滚到到对应位置"><a href="#点击对应标签-滚到到对应位置" class="headerlink" title="点击对应标签,滚到到对应位置"></a>点击对应标签,滚到到对应位置</h2><blockquote><p>用于制作侧边导航栏，滚动到下一栏，左边title也跟着动</p></blockquote><p><img src="/../../img/WeChatMini/%E5%88%86%E7%B1%BB%E6%A0%8F%E7%9B%AE.png" alt="侧边分类栏目"  data-tag='post-image' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p><h3 id="关键点"><a href="#关键点" class="headerlink" title="关键点"></a>关键点</h3><ul><li><code>scroll-view</code>中的<span class="key">scroll-into-view</span></li><li>容器必须有<span class="key">固定高度</span>,子容器使用<code>id</code></li></ul><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><ol><li>左边的侧边使用van-sidebar,使用它的activeKey,来动态将index传进函数中(不使用van-sidebar则需要使用mark:index来传递当前索引)</li><li>左边通过函数和传递的对应索引来修改scroll-into-view的索引</li><li>右边的scroll-view容器设置scroll-into-view，因为scroll-into-view的值时动态的，要在data中初始化为0</li><li>右边的子容器中id要跟scroll-into-view格式保持一致，确保跳转时能跳转到对应子容器上</li><li>示例：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">&lt;view <span class="keyword">class</span>=<span class="string">&quot;index-list-layout&quot;</span>&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;index-list-refer&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span> <span class="comment">// 参照物</span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">scroll-view</span> <span class="attr">class</span>=<span class="string">&quot;index-list index-list-sidebar&quot;</span> <span class="attr">scroll-y</span>&gt;</span> // 左边的标题栏</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">van-sidebar</span> </span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">custom-class</span>=<span class="string">&quot;sidebar-class&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">active-key</span>=<span class="string">&quot;&#123;&#123;sidebarIndex&#125;&#125;&quot;</span> </span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">bind:change</span>=<span class="string">&quot;onChangeSidebar&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    &gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">block</span> <span class="attr">wx:for</span>=<span class="string">&quot;&#123;&#123;商品列表&#125;&#125;&quot;</span> <span class="attr">wx:key</span>=<span class="string">&quot;id&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">van-sidebar-item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">view</span> <span class="attr">slot</span>=<span class="string">&quot;title&quot;</span> <span class="attr">class</span>=<span class="string">&quot;van-multi-ellipsis--l2&quot;</span>&gt;</span>&#123;&#123;item.title&#125;&#125;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">van-sidebar-item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">block</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">van-sidebar</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">scroll-view</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">scroll-view</span>  // <span class="attr">右边的内容商品栏</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">class</span>=<span class="string">&quot;index-list index-list-category&quot;</span> </span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">scroll-y</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">scroll-with-animation</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">scroll-into-view</span>=<span class="string">&quot;index-item-&#123;&#123;selectIndex&#125;&#125;&quot;</span> // <span class="attr">用来定位点击左边标题栏时定位右边容器</span>，<span class="attr">当知道selectIndex的数值</span>，<span class="attr">也会跳到对应item的columnIndex数值</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  &gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">block</span> </span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">wx:for</span>=<span class="string">&quot;&#123;&#123;商品列表&#125;&#125;&quot;</span> </span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">wx:for-item</span>=<span class="string">&quot;column&quot;</span> </span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">wx:for-index</span>=<span class="string">&quot;columnIndex&quot;</span> </span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">wx:key</span>=<span class="string">&quot;id&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    &gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">view</span> // <span class="attr">被参照物</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">id</span>=<span class="string">&quot;index-item-&#123;&#123;columnIndex&#125;&#125;&quot;</span> </span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">class</span>=<span class="string">&quot;index-list-item&quot;</span> </span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">data-index</span>=<span class="string">&quot;&#123;&#123;columnIndex&#125;&#125;&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      &gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">view</span>&gt;</span> 商品内容省略<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">block</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">scroll-view</span>&gt;</span></span></span><br><span class="line">&lt;/view&gt;</span><br></pre></td></tr></table></figure></li></ol><h2 id="获取滚动时的节点信息"><a href="#获取滚动时的节点信息" class="headerlink" title="获取滚动时的节点信息"></a>获取滚动时的节点信息</h2><h3 id="关键点-1"><a href="#关键点-1" class="headerlink" title="关键点"></a>关键点</h3><ul><li>创建一个监听器<span class="key">createIntersectionObserver</span></li><li>oberserveAll:true   监听所有节点</li><li>.relativeTo(参照物)  </li><li>.observe(被参照物)</li></ul><h3 id="步骤-1"><a href="#步骤-1" class="headerlink" title="步骤"></a>步骤</h3><ol><li>当左边侧边栏布局形成时,需要有一个参照物,可以在滚动布局上创建一个空的view,样式设置高1px,相对上一个位置绝对定位,左高为0</li><li>由于获取到被参照物中没有index,而我们需要index,在view中手动设置一个data-index<ul><li>也可以使用到van-sidebar,使用它的activeKey,来动态将index传进来,实现滚动到对应地方,标签也跟着改变(例子使用van-sidebar)</li></ul></li><li>左边有参照物，右边的整个商品滚动布局就作为被参照物</li><li>然后监听索引列表滚动的函数通过监听参照物与被参照物是否相交将对应的索引值传到dada中</li><li>该函数在商品列表渲染完成后使用nextTick调用</li><li>示例<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">changeIndexListScroll</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> intersectionObserver = <span class="variable language_">this</span>.<span class="title function_">createIntersectionObserver</span>(&#123;</span><br><span class="line">    <span class="attr">observeAll</span>: <span class="literal">true</span>,</span><br><span class="line">  &#125;)</span><br><span class="line">  intersectionObserver</span><br><span class="line">    .<span class="title function_">relativeTo</span>(<span class="string">&#x27;.index-list-refer&#x27;</span>)</span><br><span class="line">    .<span class="title function_">observe</span>(<span class="string">&#x27;.index-list-item&#x27;</span>, <span class="function">(<span class="params">e: any</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> index = e.<span class="property">dataset</span>.<span class="property">index</span></span><br><span class="line">      <span class="keyword">const</span> intersectionRatio = <span class="title class_">Math</span>.<span class="title function_">ceil</span>(e.<span class="property">intersectionRatio</span>)</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (intersectionRatio &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">setData</span>(&#123;</span><br><span class="line">          <span class="attr">sidebarIndex</span>: index,</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;style&gt;
.key {
  color: #483D8B;
  font-weight: 600;
}

&lt;/style&gt;
&lt;h2 id=&quot;点击对应标签-滚到到对应位置&quot;&gt;&lt;a href=&quot;#点击对应标签-滚到到对应位置&quot; class=&quot;headerlink&quot; title=</summary>
      
    
    
    
    <category term="微信小程序" scheme="http://example.com/categories/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
    
    <category term="scroll-view" scheme="http://example.com/tags/scroll-view/"/>
    
  </entry>
  
  <entry>
    <title>微信小程序-归纳总结</title>
    <link href="http://example.com/2024/11/04/WeChatMini/%E5%BD%92%E7%BA%B3%E6%80%BB%E7%BB%93/"/>
    <id>http://example.com/2024/11/04/WeChatMini/%E5%BD%92%E7%BA%B3%E6%80%BB%E7%BB%93/</id>
    <published>2024-11-04T01:57:32.066Z</published>
    <updated>2024-11-15T02:02:30.197Z</updated>
    
    <content type="html"><![CDATA[<style>.key {  color: #483D8B;  font-weight: 600;}</style><h2 id="当前页面对某个选项进行切换，同步更新全局更新"><a href="#当前页面对某个选项进行切换，同步更新全局更新" class="headerlink" title="当前页面对某个选项进行切换，同步更新全局更新"></a>当前页面对某个选项进行切换，同步更新全局更新</h2><blockquote><p>该问题使用的技术栈是 React + Taro搭建的微信小程序</p></blockquote><ul><li><h3 id="分析："><a href="#分析：" class="headerlink" title="分析："></a>分析：</h3><ul><li>既然是全局更新就要在全局store中设置好存储的变量，方便统一管理</li><li>在首页将页面要获取的共同内容存到对应变量中</li><li>在对应的页面拿取这个变量的内容</li><li>然后就处理事件即可</li></ul></li><li><h3 id="遇到的问题："><a href="#遇到的问题：" class="headerlink" title="遇到的问题："></a>遇到的问题：</h3><ul><li>写完代码后，查看页面没有变化，通过打印发现变量有更新，但是没有重新调用请求</li></ul></li><li><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><ul><li>如果存在分页，检查数据<span class="key">顺序</span>是否有问题</li><li>查看要调用的<span class="key">请求依赖哪些变量对象</span>，查看这个对象中的变量或变量<span class="key">是否更新</span>，是否每次更新时都更新该对象，如果没有，就要想办法赋值使该对象更新</li><li>如果是查看或者创建数据的时候用到<code>useQuery</code>来获取接口数据的话，且通过切换选项看到其他接口可以随着切换重新请求数据，而其中一个不行，问题极有可能是这个接口的<code>useQuery</code>的使用了<span class="key"><code>enabled:false</code>,导致数据不会重新更新</span>，所以此时设置<span class="key"><code>enabled:true</code>，或<code>去掉enabled</code></span>都可解决</li><li>承接方法3，如果是<span class="key">创建和编辑在同一个页面</span>在一起的话，初始数据和处理方式是有些不同的，这个时候，编辑页面需要<code>传参</code>表明它是编辑页面，<span class="key">编辑页面不需要切换</span>，且要带着已经编辑过的数据，既<code>useQuery</code>中要<span class="key"><code>enabled:false</code></span>，记录数据，不轻易更新，所以解决方法是<span class="key"><code>enabled: type !== &#39;edit&#39;</code></span>，其中type时用来标记当前页面时编辑状态还是创建状态</li></ul></li></ul><h2 id="缓存问题"><a href="#缓存问题" class="headerlink" title="缓存问题"></a>缓存问题</h2><blockquote><p>该问题使用的技术栈是 React + Taro搭建的微信小程序</p></blockquote><ul><li><h3 id="业务需求"><a href="#业务需求" class="headerlink" title="业务需求"></a>业务需求</h3><ul><li>判断用户是否第一次进入小程序，如果是第一次进入小程序，或者卸载了小程序后再次进入小程序，需要弹起一个窗来让用户选择和填写昵称和头像，而这时候已静默登录了</li></ul></li><li><h3 id="分析和解决方案"><a href="#分析和解决方案" class="headerlink" title="分析和解决方案"></a>分析和解决方案</h3><ul><li>翻阅小程序文档可了解到<span class="key"><code>setStorageSync</code>，<code>getStorageSync</code></span>这个操作</li><li>理清好业务逻辑</li><li>首先第一次进入时虽然静默登录了，但是<code>storage</code>并没有存储，所以可以在<code>useEffect</code>中先调用<code>wx.getStorageSync()</code>来获取我们要存储的<code>key</code>，由于只需要获取第一次的情况，所以<code>useEffect(()=&gt; &#123;&#125;, [])</code>，这时候<code>useEffect</code>不需要依赖,只调用一次就清除副作用</li><li><span class="key">判断如果没有获取到对应的key就弹窗，有就不弹窗</span></li><li>在弹窗的取消、确认按钮和直接关闭弹窗的逻辑中调用<code>wx.setStorageSync(&#39;key&#39;, value)</code>这个方法存储，即可</li></ul></li><li><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ul><li><span class="key">缓存只能存储字符串</span>，所以如果要存储的值不是字符串类型的话，请用<span class="key"><code>JSON.stringify</code></span>将值序列化一下</li><li>最好设置<code>storage</code>时放在<code>try&#123;&#125;catch(e)&#123;&#125;</code>中方便捕获错误</li><li>按项目要求，点跳过拿的数据最好是直接拿到静默登录时服务器给的数据的信息，点确认则是要判断是否两个都有获取新数据，没有就禁用，有就存储。</li><li>不管拿到的数据是什么都要注意是否要更新该项目中的用户信息接口和store<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">wx.<span class="title function_">setStorageSync</span>(<span class="string">&#x27;userInfo&#x27;</span>, <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(e.<span class="property">detail</span>.<span class="property">userInfo</span>))</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  wx.<span class="title function_">setStorageSync</span>(<span class="string">&#x27;headImg&#x27;</span>,value)</span><br><span class="line">  wx.<span class="title function_">setStorageSync</span>(<span class="string">&#x27;nickname&#x27;</span>,value)</span><br><span class="line">&#125; <span class="keyword">catch</span>(e) &#123;&#125;</span><br><span class="line"><span class="keyword">const</span> headImgValue = wx.<span class="title function_">getStorageSync</span>(<span class="string">&#x27;headImg&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> nicknameValue = wx.<span class="title function_">getStorageSync</span>(<span class="string">&#x27;nickname&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> (headImagValue &amp;&amp; nicknameValue) &#123;</span><br><span class="line">  <span class="comment">// 不弹窗</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="comment">// 弹窗</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="Taro-的消息机制-–-全局消息中心-evenCenter"><a href="#Taro-的消息机制-–-全局消息中心-evenCenter" class="headerlink" title="Taro 的消息机制 – 全局消息中心 evenCenter"></a>Taro 的消息机制 – 全局消息中心 evenCenter</h2><blockquote><p>eventCenter的使用场景一般用作于事件的传递，例如跨页面、跨组件做一些操作。</p></blockquote><ul><li><h3 id="普通使用"><a href="#普通使用" class="headerlink" title="普通使用"></a>普通使用</h3><ul><li>使用<span class="key"><code>evenCenter.trigger(key)</code>来触发</span>事件</li><li>使用<span class="key"><code>evenCenter.on(key,() =&gt; &#123;&#125;)</code>来监听</span>事件</li><li>在<code>useUnLoad</code>中要<span class="key"><code>evenCenter.off(key)</code>卸载</span>事件</li></ul></li><li><h3 id="需要获取触发事件页面的数据给监听事件这边"><a href="#需要获取触发事件页面的数据给监听事件这边" class="headerlink" title="需要获取触发事件页面的数据给监听事件这边"></a>需要<span class="key">获取触发事件页面的数据</span>给监听事件这边</h3><ul><li>使用<span class="key"><code>evenCenter.trigger(key, arg)</code></span>来触发事件</li><li>使用<span class="key"><code>evenCenter.on(key,() =&gt; &#123;setArg(arg)&#125;)</code></span>来监听事件和触发当页的实时刷新</li><li>在<code>useUnLoad</code>中要<span class="key"><code>evenCenter.off(key)</code></span>卸载事件</li></ul></li><li><h3 id="发送数据给页面"><a href="#发送数据给页面" class="headerlink" title="发送数据给页面"></a>发送数据给页面</h3><ul><li>使用<span class="key"><code>evenCenter.on(key,() =&gt; &#123;fn(arg)&#125;)</code></span>来发送数据</li><li>使用<span class="key"><code>evenCenter.trigger(key, fn(arg))</code></span>来接收数据</li></ul></li><li><h3 id="切换参数，然后返回"><a href="#切换参数，然后返回" class="headerlink" title="切换参数，然后返回"></a>切换参数，然后返回</h3><ul><li>在<code>useUnload</code>中<span class="key">卸载的时候触发事件和传参</span></li><li>或<span class="key">在受影响的页面中</span>从store中拿到全局变量xxx并且<span class="key">实时监听全局变量</span>xxx的改变</li></ul></li></ul><h2 id="Taro-页面跳转的消息机制-–-eventChannel"><a href="#Taro-页面跳转的消息机制-–-eventChannel" class="headerlink" title="Taro 页面跳转的消息机制 – eventChannel"></a>Taro 页面跳转的消息机制 – eventChannel</h2><ul><li><h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><ul><li>A页面使用navigateTo等跳转方法直接触发事件<span class="key">res.eventChannel.emit(key,data)</span></li><li>B页面首先需要获取当前页面的实例，然后调用<span class="key">getOpenerEventChannel()</span>获取eventChannel对象</li><li>B页面使用<span class="key">eventChannel.on(key,callbackFn)</span></li><li>A页面也可以通过跳转时的events中的创建的事件来获取B页面传输过来的数据</li><li>B页面通过<span class="key">eventChannel.emit(events中的事件名,data)</span>来触发事件</li></ul></li><li><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><ul><li>A页面<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Taro</span>.<span class="title function_">navigateTo</span>(&#123;</span><br><span class="line"><span class="attr">url</span>: <span class="string">&quot;/pages/test/index&quot;</span>, <span class="comment">// 跳到页面B</span></span><br><span class="line">events： &#123;</span><br><span class="line"><span class="attr">acceptB</span>: (data) &#123;&#125; <span class="comment">// 获取B页面传送到当前页面的数据</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">success</span>: <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="comment">// 向sendB发送数据</span></span><br><span class="line">res.<span class="property">eventChannel</span>.<span class="title function_">emit</span>(<span class="string">&quot;sendB&quot;</span>, &#123;<span class="attr">data</span>: 要传递的数据&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li>B页面<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> pages = <span class="title class_">Taro</span>.<span class="title function_">getCurrentPages</span>()</span><br><span class="line"><span class="keyword">const</span> current = pages[pages.<span class="property">length</span> - <span class="number">1</span>]</span><br><span class="line"><span class="keyword">const</span> eventChannel = current.<span class="title function_">getOpenerEventChannel</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 触发A页面events的事件</span></span><br><span class="line">eventChannel.<span class="title function_">emit</span>(<span class="string">&#x27;acceptB&#x27;</span>, &#123;要传给A的数据&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 接受A页面对应事件传递的数据</span></span><br><span class="line">eventChannel.<span class="title function_">on</span>(<span class="string">&quot;sendB&quot;</span>, <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(res)&#125;)</span><br></pre></td></tr></table></figure></li></ul></li><li><h3 id="相关文档"><a href="#相关文档" class="headerlink" title="相关文档"></a>相关文档</h3><ul><li><a href="https://developers.weixin.qq.com/miniprogram/dev/api/route/EventChannel.html">API-EventChannel</a></li><li><a href="https://developers.weixin.qq.com/miniprogram/dev/api/route/wx.navigateTo.html">API-wx.navigateTo</a></li><li><a href="https://developers.weixin.qq.com/miniprogram/dev/reference/api/Page.html#%E9%A1%B5%E9%9D%A2%E9%97%B4%E9%80%9A%E4%BF%A1">官方示例</a></li></ul></li></ul><h2 id="在-input-标签中使用-useState-和-useRef-的影响"><a href="#在-input-标签中使用-useState-和-useRef-的影响" class="headerlink" title="在 input 标签中使用 useState 和 useRef 的影响"></a>在 input 标签中使用 useState 和 useRef 的影响</h2><blockquote><p>该问题使用的技术栈是 React + Taro搭建的微信小程序</p></blockquote><ul><li><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><ul><li>问题1：使用<code>&lt;Input value=&quot;&quot;/&gt;</code> 标签，需要动态获取输入框中输入的<code>value</code>的值来更新数据时，存在使用<code>useState</code>来获取<code>value</code>时，当value<code>已有值</code>，要<code>完全删除</code>旧值，输入新值时，<code>删到旧值的最后一个字符</code>时输入框会一直<code>循环重复</code>旧值，删不掉</li><li>问题2：当使用<code>useRef</code>获取的数据作为其他数据的<code>依赖</code>时，对应的数据不会随着<code>useRef</code>获取新数据的更新而更新</li></ul></li><li><h3 id="分析存在的原因"><a href="#分析存在的原因" class="headerlink" title="分析存在的原因"></a>分析存在的原因</h3><ul><li><span class="key"><code>useRef</code>直接操作<code>dom</code></span>，返回的ref对象在组件的整个生命周期内保持不变，当<span class="key">更新时不会触发组件的重新渲染</span>，而<span class="key">useState</span>会存放组件中包含的各种数据(状态)，并且当<span class="key">组件更新state&#96;时会触发组件的重新渲染</span></li></ul></li><li><h3 id="解决方案-1"><a href="#解决方案-1" class="headerlink" title="解决方案"></a>解决方案</h3><ul><li>问题1：将变量的存储和获取方式从<code>useState</code>换成<code>useRef</code></li><li>问题2：通过设置一个用<code>useState</code>存储的常量，当<code>useRef</code>更新时，让常量更新，常量存储更新后的<code>useRef</code>的数据，并作为其他数据的依赖，保证了<code>useRef</code>的数据更新时其他数据也能随着更新。</li></ul></li></ul><h2 id="scroll-view-隐藏滚动条问题"><a href="#scroll-view-隐藏滚动条问题" class="headerlink" title="scroll-view 隐藏滚动条问题"></a>scroll-view 隐藏滚动条问题</h2><blockquote><p>该问题适用于任何使用小程序 scroll-view 组件或直接使用或二次封装等</p></blockquote><ul><li>根据小程序官方文档，<code>show-scrollbar</code>默认为<code>true</code>即显示滚动条。</li><li><h3 id="问题-1"><a href="#问题-1" class="headerlink" title="问题"></a>问题</h3><ul><li>当想要<span class="key">隐藏滚动条</span>时，需要enhanced&#x3D;”true”和show-scrollbar&#x3D;”false”,但是实践会发现滚动条依然存在</li></ul></li><li><h3 id="存在的原因"><a href="#存在的原因" class="headerlink" title="存在的原因"></a>存在的原因</h3><ul><li>show-scrollbar&#x3D;””,直接赋值时，因为字符串里面有值就是true</li></ul></li><li><h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><ul><li>根据不同框架，给<code>show-scrollbar</code>赋值为<code>false</code>时，添加<code>&#123;&#125;</code>，和<code>enhanced</code><ul><li><span class="key"><code>react</code> 使用 <code>&#123;false&#125;</code></span></li><li><span class="key">原生微信小程序 使用 <code>&quot;&#123;&#123;false&#125;&#125;&quot;</code></span></li></ul></li></ul></li></ul><h2 id="解决滚动禁止穿透页面"><a href="#解决滚动禁止穿透页面" class="headerlink" title="解决滚动禁止穿透页面"></a>解决滚动禁止穿透页面</h2><blockquote><p>该问题适用于微信小程序</p></blockquote><ul><li><h3 id="问题描述："><a href="#问题描述：" class="headerlink" title="问题描述："></a>问题描述：</h3><ul><li>弹窗界面滚动(存不存在scroll-view无所谓，只要能滚动)带动下层的页面跟着滚动</li></ul></li><li><h3 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a>解决方法：</h3><ul><li>1.在弹窗组件的插槽中用一个view包裹住该弹窗要展示的内容，然后给这个view添加catch:touchmove&#x3D;”noop”</li><li>2.然后在ts&#x2F;js文件中直接添加noop(){return}即可</li></ul></li></ul><h2 id="复制大段文本，文本丢失问题"><a href="#复制大段文本，文本丢失问题" class="headerlink" title="复制大段文本，文本丢失问题"></a>复制大段文本，文本丢失问题</h2><blockquote><p>微信小程序的原生组件 textarea</p></blockquote><ul><li><h3 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h3></li><li>小程序的textare组件默认了maxlength &#x3D; 140</li><li><h3 id="解决方案-2"><a href="#解决方案-2" class="headerlink" title="解决方案"></a>解决方案</h3><ul><li>设置maxlength &#x3D; -1</li></ul></li></ul><h2 id="单选框radio除了可以传value可以传其他的值"><a href="#单选框radio除了可以传value可以传其他的值" class="headerlink" title="单选框radio除了可以传value可以传其他的值"></a>单选框radio除了可以传value可以传其他的值</h2><blockquote><p>微信小程序的 radio-group 组件和 radio 组件，该问题收集于微信开放社区</p></blockquote><p><img src="/../../img/WeChatMini/question-radio.png" alt="单选框radio除了可以传value可以传其他的值"  data-tag='post-image' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p><ul><li><h3 id="问题-2"><a href="#问题-2" class="headerlink" title="问题"></a>问题</h3><ul><li>data-传值在bindChange事件里接收不到，只能获取到value的值 &#x3D;&#x3D;&#x3D; 向value传其他的值</li></ul></li><li><h3 id="解决方法-1"><a href="#解决方法-1" class="headerlink" title="解决方法"></a>解决方法</h3><ul><li>使用wxs处理<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*wxml*/</span></span><br><span class="line">&lt;wxs <span class="variable language_">module</span>=<span class="string">&quot;JSON&quot;</span>&gt;</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  stringify : <span class="keyword">function</span>(<span class="params">item</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(item)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/wxs&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">radio-group</span> <span class="attr">...</span> &gt;</span></span></span><br><span class="line"><span class="language-xml">....</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">radio</span> <span class="attr">value</span>=<span class="string">&quot;&#123;&#123;JSON.stringify(item)&#125;&#125;&quot;</span> <span class="attr">checked</span>=<span class="string">&quot;&#123;&#123;item.checked&#125;&#125;&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">radio-group</span>&gt;</span></span></span><br><span class="line"><span class="comment">/*ts*/</span></span><br><span class="line"><span class="attr">radioChange</span>: <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> d = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(e.<span class="property">detail</span>.<span class="property">value</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;radio发生change事件，携带value值为：&#x27;</span>, d)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="关于微信昵称中Emoji表情乱码问题"><a href="#关于微信昵称中Emoji表情乱码问题" class="headerlink" title="关于微信昵称中Emoji表情乱码问题"></a>关于微信昵称中Emoji表情乱码问题</h2><ul><li><h3 id="问题-3"><a href="#问题-3" class="headerlink" title="问题"></a>问题</h3><ul><li>昵称带Emoji表情，保存到数据库里，页面显示就乱码</li></ul></li><li><h3 id="解决方法-2"><a href="#解决方法-2" class="headerlink" title="解决方法"></a>解决方法</h3><ul><li>将包含该Emoji表情的信息<span class="key">encodeURIComponent</span>编码，在使用的地方，在<span class="key">decodeURIComponent</span>解码<ul><li>在数据库连接的时候采用<span class="key">utf8mb4</span>，数据库编码和表格编码以及对应的存储字段都采用utf8mb4编码</li></ul></li></ul></li></ul><h2 id="小程序分享"><a href="#小程序分享" class="headerlink" title="小程序分享"></a>小程序分享</h2><blockquote><p>该方法使用的时vue3 + taro</p></blockquote><ul><li><h3 id="用法示例"><a href="#用法示例" class="headerlink" title="用法示例"></a>用法示例</h3></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">  <span class="keyword">import</span> &#123; useShareAppMessage &#125; <span class="keyword">from</span> <span class="string">&#x27;@tarojs/taro&#x27;</span></span><br><span class="line"></span><br><span class="line">  <span class="title function_">useShareAppMessage</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (res.<span class="property">from</span> === <span class="string">&#x27;button&#x27;</span>) &#123;</span><br><span class="line">      <span class="comment">// 来自页面内转发按钮</span></span><br><span class="line"><span class="comment">// 弹出分享图片的菜单，包括图片和发送等</span></span><br><span class="line">wx.<span class="title function_">showShareImageMenu</span>(&#123;</span><br><span class="line"><span class="attr">path</span>: res.<span class="property">tempFilePath</span></span><br><span class="line">&#125;)</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// 小程序菜单分享</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">title</span>: <span class="string">&#x27;自定义转发标题&#x27;</span>,</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&#x27;/page/user?id=123&#x27;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="点击查看更多，展示更多数据"><a href="#点击查看更多，展示更多数据" class="headerlink" title="点击查看更多，展示更多数据"></a>点击查看更多，展示更多数据</h2><blockquote><p>该方法使用微信小程序</p></blockquote><ul><li><h3 id="分析和解决方案-1"><a href="#分析和解决方案-1" class="headerlink" title="分析和解决方案"></a>分析和解决方案</h3></li><li>先把框架写好</li><li>然后通过数据判断，是否超过一定数量total，和是否点击checked来判断展示更所数据的展示</li><li>然后通过服务端给的数据来展示<ul><li>方案一：通过对应API的参数来控制点击前和点击后的数据，如点击前给两条，点击后给全部，这个要记得初始化checked，list和api对应参数</li><li>方案二：每次点击更多就加载2条数据甚至更多，checked要等到所有数据都加载完才为false，一般这样服务端给的数据应该是点击以下增加一页，给两条数据</li></ul></li></ul><h2 id="服务端给的文本有回车换行-或者-空格等特殊字符"><a href="#服务端给的文本有回车换行-或者-空格等特殊字符" class="headerlink" title="服务端给的文本有回车换行 或者 空格等特殊字符"></a>服务端给的文本有回车换行 或者 空格等特殊字符</h2><blockquote><p>微信小程序</p></blockquote><ul><li><h3 id="原因："><a href="#原因：" class="headerlink" title="原因："></a>原因：</h3><ul><li>用view标签识别不了文本的回车的标签</li></ul></li><li><h3 id="解决方法：-1"><a href="#解决方法：-1" class="headerlink" title="解决方法："></a>解决方法：</h3><ul><li>直接用text标签</li><li>text标签添加属性<span class="key">decode&#x3D;”true“</span>时可以识别<code>&amp;nbsp;</code> ,<code>&amp;gt;</code>等特殊字符</li></ul></li></ul><h2 id="vant-checkbox-group-注意点"><a href="#vant-checkbox-group-注意点" class="headerlink" title="vant-checkbox-group 注意点"></a>vant-checkbox-group 注意点</h2><ul><li><h3 id="问题："><a href="#问题：" class="headerlink" title="问题："></a>问题：</h3><ul><li>为什么点击没有勾选</li></ul></li><li><h3 id="解决方案："><a href="#解决方案：" class="headerlink" title="解决方案："></a>解决方案：</h3><ul><li>checkbox组下面的checkbox都要有name属性</li><li>使用checkbox组的方法，onChange，直接给checkbox组的value属性赋值，类型为字符串数组，值为：event.detail</li></ul></li></ul><h2 id="switch用法"><a href="#switch用法" class="headerlink" title="switch用法"></a>switch用法</h2><ul><li>优化: 当有多个键指向的内容一致时</li><li><h3 id="用法示例："><a href="#用法示例：" class="headerlink" title="用法示例："></a>用法示例：</h3></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span>(key)&#123;</span><br><span class="line"><span class="keyword">case</span> key === <span class="number">1</span>:</span><br><span class="line"><span class="keyword">case</span> key === <span class="number">2</span>:</span><br><span class="line"><span class="keyword">case</span> key === <span class="number">3</span>:</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(key === <span class="number">1</span> | <span class="number">2</span> | <span class="number">3</span>, content is same)</span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line"> <span class="keyword">default</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Array-filter-Boolean"><a href="#Array-filter-Boolean" class="headerlink" title="Array.filter(Boolean)"></a>Array.filter(Boolean)</h2><blockquote><p>本质上是将元素强制转换为布尔型并判断是否为false，以此来进行校验，适用于需要检验多个表单信息</p></blockquote><h3 id="移除数组中所有的”false”类型元素-false-null-undefined-0-NaN-空字符串"><a href="#移除数组中所有的”false”类型元素-false-null-undefined-0-NaN-空字符串" class="headerlink" title="移除数组中所有的”false”类型元素(false,null,undefined,0,NaN,空字符串)"></a>移除数组中所有的”false”类型元素(false,null,undefined,0,NaN,空字符串)</h3><ul><li>得到的是过滤后的值数组</li><li>注意：不检验对象<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">eg</span>:a simple explame</span><br><span class="line"><span class="keyword">const</span> a = [<span class="number">1</span>,<span class="number">2</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="title class_">NaN</span>,&#123;&#125;,<span class="literal">false</span>, <span class="literal">true</span>,<span class="literal">null</span>,<span class="literal">undefined</span>,<span class="number">0</span>]</span><br><span class="line"><span class="keyword">const</span> b = a.<span class="title function_">filter</span>(<span class="title class_">Boolean</span>)</span><br><span class="line"><span class="attr">eg</span>: a advanced explame</span><br><span class="line"><span class="comment">// 定义要查找的关键字类型</span></span><br><span class="line">type keyType = <span class="string">&#x27;name&#x27;</span> | <span class="string">&#x27;age&#x27;</span> | <span class="string">&#x27;hobit&#x27;</span> | <span class="string">&#x27;remark&#x27;</span> | <span class="string">&#x27;position&#x27;</span> | <span class="string">&#x27;show&#x27;</span></span><br><span class="line"><span class="comment">// 定义当key为false类型时，提示的文本</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">validateText</span>: <span class="title class_">Record</span>&lt;keyType, string&gt; = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;name is not empty!&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="string">&#x27;age is not zero!&#x27;</span>,</span><br><span class="line">    <span class="attr">hobit</span>: <span class="string">&#x27;hobit is not empty!&#x27;</span>,</span><br><span class="line">    <span class="attr">remark</span>: <span class="string">&#x27;remark is not empty!&#x27;</span>,</span><br><span class="line">    <span class="attr">position</span>: <span class="string">&#x27;position is not empty!&#x27;</span>,</span><br><span class="line">    <span class="attr">show</span>: <span class="string">&#x27;show is not false!&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 定义一个对象</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">InfoData</span>: <span class="title class_">Record</span>&lt;keyType, string | number | boolean&gt; = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;abc&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">12</span>,</span><br><span class="line">    <span class="attr">hobit</span>: <span class="string">&#x27;打球&#x27;</span>,</span><br><span class="line">    <span class="attr">remark</span>: <span class="string">&#x27;备注&#x27;</span>,</span><br><span class="line">    <span class="attr">position</span>: <span class="string">&#x27;学生&#x27;</span>,</span><br><span class="line">    <span class="attr">show</span>: <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 顶一个数组，用来存放要校验的key，按顺序校验</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">keyInfo</span>: keyType[] = [</span><br><span class="line">  <span class="string">&#x27;name&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;age&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;hobit&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;remark&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;position&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;show&#x27;</span>,</span><br><span class="line">]</span><br><span class="line"><span class="comment">// 校验是否存在false类型，返回检验没有false类型的字段，并且返回不存在数组的第一个字段</span></span><br><span class="line"><span class="keyword">const</span> validate = keyInfo</span><br><span class="line">    .<span class="title function_">filter</span>(<span class="title class_">Boolean</span>)</span><br><span class="line">    .<span class="title function_">find</span>(<span class="function">(<span class="params">key: keyType</span>) =&gt;</span> !<span class="title class_">InfoData</span>[key])</span><br><span class="line"><span class="comment">// 判断当返回的值不为undefined时，则提示对应的文本</span></span><br><span class="line"><span class="keyword">if</span> (validate) &#123;</span><br><span class="line">wx.<span class="title function_">showModal</span>(&#123;</span><br><span class="line">  <span class="attr">title</span>: <span class="string">&#x27;提示&#x27;</span>,</span><br><span class="line">  <span class="attr">content</span>: validateText[validate],</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="编辑与查看为同一页时，处理方式（无缓存）"><a href="#编辑与查看为同一页时，处理方式（无缓存）" class="headerlink" title="编辑与查看为同一页时，处理方式（无缓存）"></a>编辑与查看为同一页时，处理方式（无缓存）</h2><blockquote><p>本次项目实战使用微信小程序 + ts</p></blockquote><ul><li><h3 id="问题的描述："><a href="#问题的描述：" class="headerlink" title="问题的描述："></a>问题的描述：</h3><ul><li>第一次进入页面是编辑状态，保存了数据后，不管是否清除缓存，都展示最新的数据（只读）</li><li>只有在只读页面中点击对应的按钮，才能进入编辑状态页，并且编辑页只要没有按下保存按钮，则刷新后仍然回到点击前的只读页面，即接口返回的最新数据</li><li>只有当保存后，才会重新进入新的只读页</li></ul></li><li><h3 id="问题的解决："><a href="#问题的解决：" class="headerlink" title="问题的解决："></a>问题的解决：</h3><ul><li>首先需要将要编辑的数据及相关变量保存在同一个初始化函数中</li><li>之后通过接口返回的数据，如果失败，则为第一次进入预约页面的状态，标识编辑，然后初始化函数并且，设置变量来标识为编辑页</li><li>当内容编辑完成后，点击保存，进行校验，保存成功后，将变量标识为只读状态，并且调用接口获取最新的数据和状态，并存到初始化函数中的变量中，保持数据的统一性</li><li>当点击页面的按钮，调用初始化函数，并将变量设置为编辑状态，即可回到编辑页，</li><li>此时只有当在这个页面保存数据，才会产生新的页面，不然不管清缓存还是重新进入该页面，都应回到点击前的只读页面。</li></ul></li><li><h3 id="问题的总结："><a href="#问题的总结：" class="headerlink" title="问题的总结："></a>问题的总结：</h3><ul><li>此次遇到编辑和查看页面为同一页面时，要通过接口的数据返回，来判断并设置对应的标识以区分当前页是编辑还是查看状态</li></ul></li></ul><h2 id="单个表单数据要存入一个对象"><a href="#单个表单数据要存入一个对象" class="headerlink" title="单个表单数据要存入一个对象"></a>单个表单数据要存入一个对象</h2><blockquote><p>该问题使用微信小程序 + ts</p></blockquote><ul><li><h3 id="问题的描述"><a href="#问题的描述" class="headerlink" title="问题的描述"></a>问题的描述</h3><ul><li>当页面存在多个input标签，并需要保存提交</li><li>一般都会存储在同一个对象中，方便校验</li><li>校验使用上面的Array.filter(Boolean)里面有示例</li></ul></li><li><h3 id="问题的解决"><a href="#问题的解决" class="headerlink" title="问题的解决"></a>问题的解决</h3><ul><li>多个input标签功能一致，则可以使用同一个函数来操作</li><li>至于具体存进那个key，则可以通过在wxml页面给每一个input添加mark:key&#x3D;”定义的键”</li><li>然后每次调用函数时，可以获取key并存进对应的key中，或清除</li></ul></li><li><h3 id="问题的总结"><a href="#问题的总结" class="headerlink" title="问题的总结"></a>问题的总结</h3><ul><li>当存在多个标签一致时，观察功能&#x2F;样式是否相同，然后通过给一个区分的标签来实现调用同一个函数实现不同的功能，以减少代码量</li></ul></li></ul><h2 id="setData第二参数"><a href="#setData第二参数" class="headerlink" title="setData第二参数"></a>setData第二参数</h2><blockquote><p>微信小程序中setData方法用于设置数据，更改数据</p></blockquote><ul><li><h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><ul><li>第一个参数：Object data， 必传， 代表这次要改变的数据</li><li>第二个参数：Function callback， 选填， 代表setData引起的界面更新渲染完毕后的回调函数</li></ul></li><li><h3 id="浅薄理解："><a href="#浅薄理解：" class="headerlink" title="浅薄理解："></a>浅薄理解：</h3><ul><li>参数一就是主要用来更新数据，设置数据，参数二则是延时器的作用，渲染完在调用回调函数</li></ul></li><li><h3 id="示例："><a href="#示例：" class="headerlink" title="示例："></a>示例：</h3><ul><li>第一个参数：this.setData({val,b:a})</li><li>第二个参数：this.setData({val}, () &#x3D;&gt; { this.setData(value)})</li></ul></li></ul><h2 id="picker-view的value赋值问题"><a href="#picker-view的value赋值问题" class="headerlink" title="picker-view的value赋值问题"></a>picker-view的value赋值问题</h2><blockquote><p>picker-view时微信小程序的原生组件，用于自定义picker</p></blockquote><ul><li>已知picker-view的value属性值为每一个picker-view-column默认选中的索引数组，存在有多少个picker-view-column，数组长度就为多少</li><li><h3 id="问题：-1"><a href="#问题：-1" class="headerlink" title="问题："></a>问题：</h3><ul><li>给value赋值时，不管是不是第一项没成功赋值，定位到对应的索引，还是其他项，都显示为在索引0的位置和索引0的值，与所求相异</li></ul></li><li><h3 id="原因：-1"><a href="#原因：-1" class="headerlink" title="原因："></a>原因：</h3><ul><li>初始化函数时没有成功赋值进去，存在延时</li></ul></li><li><h3 id="解决："><a href="#解决：" class="headerlink" title="解决："></a>解决：</h3><ul><li>建议用setData的第二参数赋值，this.setData({val}, () &#x3D;&gt; { this.setData(value)})</li></ul></li></ul><h2 id="多行文本溢出省略号"><a href="#多行文本溢出省略号" class="headerlink" title="多行文本溢出省略号"></a>多行文本溢出省略号</h2><ul><li>核心代码<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">overflow</span>: hidden;</span><br><span class="line">text-<span class="attr">overflow</span>: ellipsis;</span><br><span class="line">-webkit-line-<span class="attr">clamp</span>: <span class="number">6</span>;</span><br><span class="line">word-<span class="attr">break</span>: <span class="keyword">break</span>-all;</span><br><span class="line"><span class="attr">display</span>: -webkit-box;</span><br><span class="line">-webkit-box-<span class="attr">orient</span>: vertical;</span><br></pre></td></tr></table></figure></li><li>注意：如果无效可以限制宽高</li><li>单行文本溢出省略：只要前两行</li></ul><h2 id="跳转返回上一页面并传递参数"><a href="#跳转返回上一页面并传递参数" class="headerlink" title="跳转返回上一页面并传递参数"></a>跳转返回上一页面并传递参数</h2><blockquote><p>微信小程序</p></blockquote><ul><li><h3 id="方法一：-使用wx-navigateBack"><a href="#方法一：-使用wx-navigateBack" class="headerlink" title="方法一： 使用wx.navigateBack"></a>方法一： 使用<code>wx.navigateBack</code></h3><ul><li>1.在子页面中首先获取上一页面<ul><li>const pages &#x3D; getCurrentPages()</li><li>const prePages &#x3D; pages[pages.length -2] &#x2F;&#x2F;上一级页面</li></ul></li><li>2.调用上一页面的setData方法，将数据存到上一页面，存储的变量要现在上一页面的data中声明<ul><li>prePages.setData({存储的变量：这个页面要存储的值})</li></ul></li><li>3.返回上一页面<ul><li>wx.navigateBack({ delta: 1 })</li></ul></li><li>4.上一页面接收子页面的参数可在onLoad或onShow中执行，onShow每次页面加载都会执行，并保存<ul><li>const pages &#x3D; getCurrentPages()</li><li>const currentPages &#x3D; pages[pages.length-1]</li><li>this.setData({存储的变量：这个页面要存储的值})</li></ul></li></ul></li><li><h3 id="方法二：使用wx-navigateTo"><a href="#方法二：使用wx-navigateTo" class="headerlink" title="方法二：使用wx.navigateTo"></a>方法二：使用<code>wx.navigateTo</code></h3><ul><li>1.子页面通过路径传递参数<ul><li>wx.navigateTo({ url: <code>/xxx/xxx/xxx?params=$&#123;params&#125;&amp;params1=$&#123;params&#125;</code>})</li></ul></li><li>2.父页面通过onLoad(options)方法获取参数<ul><li>onLoad(options){ const params &#x3D; options.params }</li></ul></li></ul></li></ul><h2 id="如何避免输入中文拼音时触发input事件"><a href="#如何避免输入中文拼音时触发input事件" class="headerlink" title="如何避免输入中文拼音时触发input事件"></a>如何避免输入中文拼音时触发input事件</h2><blockquote><p>原生html+js</p></blockquote><ul><li>监听compositionstart 、 compositionend</li><li>定义isComposite 为false，在start中设置为true，在end中设置为false</li><li>然后在input事件中判断，当isComposite为false时就进行输入搜索事件</li><li>之后在end事件中在调用输入搜索事件</li></ul><h2 id="实现防纂改的水印"><a href="#实现防纂改的水印" class="headerlink" title="实现防纂改的水印"></a>实现防纂改的水印</h2><ul><li>react框架使用ant design，有一个watermark组件</li></ul><h2 id="一个布局存在多个点击事件，先后触发问题"><a href="#一个布局存在多个点击事件，先后触发问题" class="headerlink" title="一个布局存在多个点击事件，先后触发问题"></a>一个布局存在多个点击事件，先后触发问题</h2><blockquote><p>本质：微信小程序 bindtap 和 catchtap 的区别</p></blockquote><ol><li>事件冒泡:<ul><li>bindtap会将事件传递给父节点进行处理，而catchtap会阻止事件继续冒泡到父节点。</li><li>即<code>当一个元素上的bindtap事件被触发，如果该元素的父节点又有bindtap事件，则父节点的事件也会执行；而catchtap则只会触发当前元素的事件处理函数</code></li></ul></li><li>绑定顺序:<ul><li>bindtap的触发顺序是由子元素向父元素冒泡的顺序(由内向外)</li><li>catchtap的触发顺序是由父元素向子元素铺捕获的顺序(由外到内)</li></ul></li><li>阻止默认:<ul><li>bindtap可以通过返回false来阻止默认行为的触发，而catchtap无法阻止</li></ul></li><li>通常情况下使用bindtap，不想触发父元素使用catchtap</li></ol><h2 id="小红点单数圆形，双数圆矩形"><a href="#小红点单数圆形，双数圆矩形" class="headerlink" title="小红点单数圆形，双数圆矩形"></a>小红点单数圆形，双数圆矩形</h2><blockquote><p>参考vant-icon</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">.<span class="property">dot</span> &#123;</span><br><span class="line">font-<span class="attr">size</span>: 20rpx</span><br><span class="line">  <span class="attr">background</span>: red;</span><br><span class="line">  border-<span class="attr">radius</span>: 16rpx;</span><br><span class="line">  <span class="attr">padding</span>:4rpx 8rpx;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><!-- # 视频：流量限制 -->]]></content>
    
    
      
      
    <summary type="html">&lt;style&gt;
.key {
  color: #483D8B;
  font-weight: 600;
}
&lt;/style&gt;

&lt;h2 id=&quot;当前页面对某个选项进行切换，同步更新全局更新&quot;&gt;&lt;a href=&quot;#当前页面对某个选项进行切换，同步更新全局更新&quot; class=&quot;he</summary>
      
    
    
    
    <category term="微信小程序" scheme="http://example.com/categories/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
    
    <category term="问题与方案" scheme="http://example.com/tags/%E9%97%AE%E9%A2%98%E4%B8%8E%E6%96%B9%E6%A1%88/"/>
    
  </entry>
  
  <entry>
    <title>微信小程序-海报生成</title>
    <link href="http://example.com/2024/11/04/WeChatMini/%E6%B5%B7%E6%8A%A5%E7%94%9F%E6%88%90/"/>
    <id>http://example.com/2024/11/04/WeChatMini/%E6%B5%B7%E6%8A%A5%E7%94%9F%E6%88%90/</id>
    <published>2024-11-04T01:57:32.066Z</published>
    <updated>2024-11-06T09:40:10.445Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>应用场景：一般是需要生成海报时跳转到新页面，先看一下海报整体预览的效果，然后在点击这个页面的保存来保存海报</p></blockquote><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><ul><li><h3 id="点击海报生成-跳转页面"><a href="#点击海报生成-跳转页面" class="headerlink" title="点击海报生成,跳转页面"></a>点击海报生成,跳转页面</h3></li><li><h3 id="进入该海报页面要有一个加载效果"><a href="#进入该海报页面要有一个加载效果" class="headerlink" title="进入该海报页面要有一个加载效果"></a>进入该海报页面要有一个加载效果</h3></li><li><h3 id="加载数据-显示图片效果，用canvas生成海报"><a href="#加载数据-显示图片效果，用canvas生成海报" class="headerlink" title="加载数据,显示图片效果，用canvas生成海报"></a>加载数据,显示图片效果，用canvas生成海报</h3><ul><li>1.使用canvas在wxml页面占位</li><li>2.给canvas添加一个id，类型选择2d，宽高都要自适应</li><li>3.在函数中使用wx.createSelectorQuery()来初始化canvas</li><li>4.在ready函数中使用该函数，并且保存canvas到data中</li></ul></li><li><h3 id="通过页面中的按钮来触发wx-canvasToTempFilePath把生成后的数据及形状绘制成图片"><a href="#通过页面中的按钮来触发wx-canvasToTempFilePath把生成后的数据及形状绘制成图片" class="headerlink" title="通过页面中的按钮来触发wx.canvasToTempFilePath把生成后的数据及形状绘制成图片"></a>通过页面中的按钮来触发wx.canvasToTempFilePath把生成后的数据及形状绘制成图片</h3></li><li><h3 id="点击保存弹出一个加载效果"><a href="#点击保存弹出一个加载效果" class="headerlink" title="点击保存弹出一个加载效果"></a>点击保存弹出一个加载效果</h3></li><li><h3 id="成功保存就地址给手机的地址-失败提示"><a href="#成功保存就地址给手机的地址-失败提示" class="headerlink" title="成功保存就地址给手机的地址,失败提示"></a>成功保存就地址给手机的地址,失败提示</h3></li><li><h3 id="涉及到获取二维码"><a href="#涉及到获取二维码" class="headerlink" title="涉及到获取二维码"></a>涉及到获取二维码</h3><ul><li>可以先生成二维码，然后通过数据传递到canvas中对应的位置</li></ul></li></ul><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*wxml*/</span></span><br><span class="line">&lt;view <span class="keyword">class</span>=<span class="string">&quot;cantainer&quot;</span>&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">&quot;Canvasbg&quot;</span> <span class="attr">type</span>=<span class="string">&quot;2d&quot;</span> <span class="attr">style</span>=<span class="string">&quot; width: 100%; height: 100vh;&quot;</span>  <span class="attr">class</span>=<span class="string">&quot;poster&quot;</span>/&gt;</span></span></span><br><span class="line">  &lt;!-- <span class="language-xml"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">&quot;myCanvas&quot;</span> <span class="attr">type</span>=<span class="string">&quot;2d&quot;</span> <span class="attr">style</span>=<span class="string">&quot;border: 1px solid; width: 300px; height: 150px;&quot;</span> /&gt;</span></span> --&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;cantainer-bottom&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;info&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">text</span> &gt;</span>图片已生成,保存发布出来让朋友点赞吧!<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn&quot;</span> <span class="attr">size</span>=<span class="string">&quot;default&quot;</span> <span class="attr">bind:tap</span>=<span class="string">&quot;saveImage&quot;</span>&gt;</span>保存<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></span><br><span class="line">&lt;/view&gt;</span><br><span class="line"><span class="comment">/*sass*/</span></span><br><span class="line">.<span class="property">cantainer</span>&#123;</span><br><span class="line">  <span class="attr">display</span>: flex;</span><br><span class="line">  flex-<span class="attr">direction</span>: column;</span><br><span class="line">  flex-<span class="attr">grow</span>: <span class="number">1</span>;</span><br><span class="line">  background-<span class="attr">color</span>: skyblue;</span><br><span class="line">  <span class="attr">height</span>: inherit;</span><br><span class="line">  &amp;-bottom &#123;</span><br><span class="line">    <span class="attr">display</span>: flex;</span><br><span class="line">    flex-<span class="attr">direction</span>: column;</span><br><span class="line">    <span class="attr">height</span>: 600rpx;</span><br><span class="line">    background-<span class="attr">color</span>: white;</span><br><span class="line">    justify-<span class="attr">content</span>: center;</span><br><span class="line">    align-<span class="attr">items</span>: center;</span><br><span class="line"></span><br><span class="line">    .<span class="property">info</span> &#123;</span><br><span class="line">      <span class="attr">height</span>: 100rpx;</span><br><span class="line">      font-<span class="attr">size</span>: 32rpx;</span><br><span class="line">      line-<span class="attr">height</span>: 32rpx;</span><br><span class="line">    &#125;</span><br><span class="line">    .<span class="property">btn</span>&#123; </span><br><span class="line">      background-<span class="attr">color</span>: <span class="title function_">var</span>(--primary-color);</span><br><span class="line">      <span class="attr">width</span>: 240rpx;</span><br><span class="line">      <span class="attr">height</span>: 80rpx;</span><br><span class="line">      <span class="attr">color</span>: white;</span><br><span class="line">      border-<span class="attr">radius</span>: 40rpx;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*ts*/</span></span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">photo</span>:<span class="string">&quot;../../../asset/squase.jpg&quot;</span>,</span><br><span class="line">    <span class="attr">imgUrl</span>:<span class="string">&quot;../../../asset/squase.jpg&quot;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;demo&#x27;</span>,</span><br><span class="line">    <span class="attr">desc</span>: <span class="string">&#x27;一个海报的demo&#x27;</span>,</span><br><span class="line">    <span class="attr">address</span>: <span class="string">&#x27;小行星&#x27;</span>,</span><br><span class="line">    <span class="attr">canvas</span>:<span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">onReady</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">draw</span>()</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">draw</span>(<span class="params"></span>) &#123;</span><br><span class="line">    wx.<span class="title function_">createSelectorQuery</span>()</span><br><span class="line">    .<span class="title function_">select</span>(<span class="string">&#x27;#Canvasbg&#x27;</span>)</span><br><span class="line">    .<span class="title function_">fields</span>(&#123; <span class="attr">node</span>: <span class="literal">true</span> ,<span class="attr">size</span>: <span class="literal">true</span>&#125;)</span><br><span class="line">    .<span class="title function_">exec</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> canvas = res[<span class="number">0</span>].<span class="property">node</span></span><br><span class="line">      <span class="keyword">const</span> ctx = canvas.<span class="title function_">getContext</span>(<span class="string">&#x27;2d&#x27;</span>)</span><br><span class="line">      <span class="keyword">const</span> dpr = wx.<span class="title function_">getSystemInfoSync</span>().<span class="property">pixelRatio</span></span><br><span class="line">      <span class="keyword">const</span> width = res[<span class="number">0</span>].<span class="property">width</span></span><br><span class="line">      <span class="keyword">const</span> height = res[<span class="number">0</span>].<span class="property">height</span></span><br><span class="line">      canvas.<span class="property">width</span> = width * dpr</span><br><span class="line">      canvas.<span class="property">height</span> = height * dpr</span><br><span class="line">      ctx.<span class="title function_">clearRect</span>(<span class="number">0</span>, <span class="number">0</span>, width, height)</span><br><span class="line">      <span class="comment">// 绘制底部白色背景</span></span><br><span class="line">      ctx.<span class="title function_">save</span>()</span><br><span class="line">      ctx.<span class="property">fillStyle</span>= <span class="string">&#x27;white&#x27;</span></span><br><span class="line">      ctx.<span class="title function_">fillRect</span>(<span class="number">150</span>,<span class="number">200</span>,<span class="number">800</span>,<span class="number">1000</span>)</span><br><span class="line">      ctx.<span class="title function_">restore</span>()</span><br><span class="line">      <span class="comment">// 绘制图片 rect 矩形路径,fillRect 绘制矩形填充颜色</span></span><br><span class="line">      <span class="comment">// drawImage(图,图的x,图的y,图的宽,图的高)</span></span><br><span class="line">      <span class="keyword">let</span> img = canvas.<span class="title function_">createImage</span>()</span><br><span class="line">      img.<span class="property">src</span>= <span class="variable language_">this</span>.<span class="property">data</span>.<span class="property">imgUrl</span>      </span><br><span class="line">      img.<span class="property">onload</span> =<span class="function">() =&gt;</span>&#123;</span><br><span class="line">        ctx.<span class="title function_">save</span>()</span><br><span class="line">        ctx.<span class="title function_">beginPath</span>()</span><br><span class="line">        ctx.<span class="title function_">rect</span>(<span class="number">150</span>,<span class="number">200</span>,<span class="number">800</span>,<span class="number">1000</span>)          </span><br><span class="line">        ctx.<span class="title function_">clip</span>()</span><br><span class="line">        ctx.<span class="title function_">drawImage</span>(img,<span class="number">0</span>,<span class="number">150</span>,<span class="number">1000</span>,<span class="number">550</span>)</span><br><span class="line">        ctx.<span class="title function_">closePath</span>()</span><br><span class="line">        ctx.<span class="title function_">restore</span>()</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 绘制文本</span></span><br><span class="line">      ctx.<span class="property">font</span>=<span class="string">&quot;40px Arial&quot;</span></span><br><span class="line">      ctx.<span class="title function_">fillText</span>(<span class="string">`N A M E: <span class="subst">$&#123;<span class="variable language_">this</span>.data.name&#125;</span>`</span>,<span class="number">200</span>,<span class="number">900</span>)</span><br><span class="line">      ctx.<span class="title function_">fillText</span>(<span class="string">`A D D R E S S: <span class="subst">$&#123;<span class="variable language_">this</span>.data.address&#125;</span>`</span>,<span class="number">200</span>,<span class="number">980</span>)</span><br><span class="line">      ctx.<span class="title function_">fillText</span>(<span class="string">`D E S C R I P T I O N: <span class="subst">$&#123;<span class="variable language_">this</span>.data.desc&#125;</span>`</span>,<span class="number">200</span>,<span class="number">1060</span>)</span><br><span class="line">      <span class="comment">// 绘制头像 bug</span></span><br><span class="line">      <span class="keyword">let</span> photo =  canvas.<span class="title function_">createImage</span>()</span><br><span class="line">      photo.<span class="property">src</span>= <span class="variable language_">this</span>.<span class="property">data</span>.<span class="property">photo</span> <span class="comment">// 绘制图片一定要加上这个</span></span><br><span class="line">      photo.<span class="property">onload</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        ctx.<span class="title function_">save</span>()</span><br><span class="line">        ctx.<span class="title function_">beginPath</span>()</span><br><span class="line">        ctx.<span class="title function_">arc</span>(<span class="number">830</span>,<span class="number">900</span>,<span class="number">100</span>,<span class="number">0</span>,<span class="number">2</span> * <span class="title class_">Math</span>.<span class="property">PI</span>)        </span><br><span class="line">        ctx.<span class="title function_">clip</span>()</span><br><span class="line">        ctx.<span class="title function_">drawImage</span>(photo,<span class="number">710</span>,<span class="number">800</span>,<span class="number">400</span>,<span class="number">400</span>)</span><br><span class="line">        ctx.<span class="title function_">closePath</span>()</span><br><span class="line">        ctx.<span class="title function_">restore</span>()</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">setData</span>(&#123;</span><br><span class="line">        canvas</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">saveImage</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 生成图片</span></span><br><span class="line">    <span class="keyword">const</span> canvas =  <span class="variable language_">this</span>.<span class="property">data</span></span><br><span class="line">    wx.<span class="title function_">showLoading</span>(&#123;<span class="attr">title</span>:<span class="string">&#x27;海报生成中...&#x27;</span>&#125;),</span><br><span class="line">    wx.<span class="title function_">canvasToTempFilePath</span>(&#123;</span><br><span class="line">      canvas,</span><br><span class="line">      <span class="attr">success</span>: <span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 生成的图片临时文件路径</span></span><br><span class="line">      <span class="keyword">const</span> tempFilePath = res.<span class="property">tempFilePath</span></span><br><span class="line">      wx.<span class="title function_">hideLoading</span>()</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">fail</span>: <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">        wx.<span class="title function_">hideLoading</span>()</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;保存失败，请重试!&#x27;</span>,err)</span><br><span class="line">      &#125;</span><br><span class="line">&#125;)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;应用场景：一般是需要生成海报时跳转到新页面，先看一下海报整体预览的效果，然后在点击这个页面的保存来保存海报&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;步骤&quot;&gt;&lt;a href=&quot;#步骤&quot; class=&quot;headerlink&quot; title=&quot;</summary>
      
    
    
    
    <category term="微信小程序" scheme="http://example.com/categories/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
    
    <category term="canvas" scheme="http://example.com/tags/canvas/"/>
    
  </entry>
  
  <entry>
    <title>微信小程序-富文本</title>
    <link href="http://example.com/2024/11/04/WeChatMini/%E5%AF%8C%E6%96%87%E6%9C%AC/"/>
    <id>http://example.com/2024/11/04/WeChatMini/%E5%AF%8C%E6%96%87%E6%9C%AC/</id>
    <published>2024-11-04T01:57:32.050Z</published>
    <updated>2024-11-22T04:05:14.331Z</updated>
    
    <content type="html"><![CDATA[<style>.en {  color: #3D82AC;  font-weight: 600;}</style><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><ul><li>1.使用以封装好的<a link="https://jin-yufeng.gitee.io/mp-html/#/overview/quickstart" style="color: green;">mp-html 组件</a>,方便处理图片、视频，便于高效地开发</li><li>2.在要使用的页面的 json 文件中引入该组件</li><li>3.在 wxml 文件中使用，id 作为标识该组件的唯一标识， content 则是将 html 代码渲染出来的容器</li><li>4.使用 selectComponent(‘id’)获取组件实例</li><li>5.如果要处理富文本的而其中一个标签则需要有匹配规则</li><li>6.获取单个标签的，然后统一处理，在然后再替换回原来的 html 中</li></ul><h2 id="匹配规则"><a href="#匹配规则" class="headerlink" title="匹配规则"></a>匹配规则</h2><ul><li>图片的匹配规则： <span class="en"><code>/&lt;(img)[^&gt;]*&gt;/gi</code></span></li><li>匹配标签之间的文本: <span class="en"><code>/(?&lt;=&gt;)[^&gt;]+(?=&lt;[\/]?\w+.*&gt;)/g</code></span></li><li>视频的匹配规则: <span class="en"><code>/&lt;(video)[^&gt;]*&gt;/gi</code></span></li><li>空字符串的匹配规则: <span class="en"><code>/(\s)/g</code></span></li><li>过滤并做替换处理: <span class="en"><code>(html.match(reg) as RegExpMatchArray).toString().replace(&#39;,&#39; , &#39;&#39;)</code></span></li><li>遍历实例上的图片数组&#x2F;视频数组，进行处理:<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ctx.<span class="property">imgList</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">src: string, i: number ,array: any </span>) =&gt;</span> &#123;</span><br><span class="line">  array[i] = src.<span class="title function_">replace</span>(<span class="string">&#x27;thumb&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><ul><li><h3 id="文字换行"><a href="#文字换行" class="headerlink" title="文字换行"></a>文字换行</h3></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> statuslist = _buyCarList.<span class="title function_">map</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//有逗号分隔的情况</span></span><br><span class="line">  <span class="keyword">return</span> item.<span class="property">status</span>.<span class="title function_">split</span>(<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line"><span class="comment">//无逗号分隔的情况</span></span><br><span class="line">  <span class="comment">// if (item.status.length &gt; 5) &#123;</span></span><br><span class="line">  <span class="comment">//   const status1 = item.status.slice(0, 3)</span></span><br><span class="line">  <span class="comment">//   const status2 = item.status.slice(3)</span></span><br><span class="line">  <span class="comment">//   const status = status1.concat(&#x27;,&#x27;, status2).split(&#x27;,&#x27;)</span></span><br><span class="line">  <span class="comment">//   return status</span></span><br><span class="line">  <span class="comment">// &#125;</span></span><br><span class="line">  <span class="comment">// return [item.status]</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li><h3 id="去掉字符串文本的空格"><a href="#去掉字符串文本的空格" class="headerlink" title="去掉字符串文本的空格"></a>去掉字符串文本的空格</h3></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> reg = <span class="regexp">/(\s)/g</span></span><br><span class="line"><span class="keyword">let</span> title = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">if</span> (carModelName) &#123;</span><br><span class="line">  title = (carModelName).<span class="title function_">replaceAll</span>(reg, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;style&gt;
.en {
  color: #3D82AC;
  font-weight: 600;
}
&lt;/style&gt;


&lt;h2 id=&quot;步骤&quot;&gt;&lt;a href=&quot;#步骤&quot; class=&quot;headerlink&quot; title=&quot;步骤&quot;&gt;&lt;/a&gt;步骤&lt;/h2&gt;&lt;ul&gt;
&lt;li</summary>
      
    
    
    
    <category term="微信小程序" scheme="http://example.com/categories/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
    
    <category term="富文本" scheme="http://example.com/tags/%E5%AF%8C%E6%96%87%E6%9C%AC/"/>
    
  </entry>
  
  <entry>
    <title>微信小程序-复杂组件的应用</title>
    <link href="http://example.com/2024/11/04/WeChatMini/%E5%A4%8D%E6%9D%82%E7%BB%84%E4%BB%B6%E7%9A%84%E5%BA%94%E7%94%A8/"/>
    <id>http://example.com/2024/11/04/WeChatMini/%E5%A4%8D%E6%9D%82%E7%BB%84%E4%BB%B6%E7%9A%84%E5%BA%94%E7%94%A8/</id>
    <published>2024-11-04T01:57:32.033Z</published>
    <updated>2024-11-05T06:28:41.131Z</updated>
    
    <content type="html"><![CDATA[<h2 id="复杂组件—日历组件的多页面不同应用解决方案"><a href="#复杂组件—日历组件的多页面不同应用解决方案" class="headerlink" title="复杂组件—日历组件的多页面不同应用解决方案"></a>复杂组件—日历组件的多页面不同应用解决方案</h2><h3 id="现状"><a href="#现状" class="headerlink" title="现状"></a>现状</h3><ul><li>已经封装完的日历组件且已经应用与多个页面(此时仅有一套组件方案)</li></ul><h3 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h3><ul><li>该日历组件要应用与其它页面(两个)但展示的效果和功能与原方案不同</li></ul><h3 id="冲突"><a href="#冲突" class="headerlink" title="冲突"></a>冲突</h3><ul><li>应用该组件新方案的两个页面之间,一个需要初始化数据,一个不需要,存在冲突</li></ul><h3 id="难点"><a href="#难点" class="headerlink" title="难点:"></a>难点:</h3><ul><li>难点一: 原来的日历组件使用的formatter,与现在页面使用的formatter不同</li><li>难点二: 选择的文字字段展示与原先不同</li><li>难点三: 可选择日期,选择之后不能在选择同一天(不可重叠)</li><li>难点三: 选择预约页面:一开始空,打开后点击任意日期,没有点击确定时,关闭弹窗,在打开弹窗后,原先选中的数据要保留,选中的那天日期,选中文本,上下午状态和确定按钮,都要保留被选中的状态,和可以确定的状态</li><li>难点四: 更改预约页面的弹窗: 一打开为预约的那个时间(不管当天且上下午状态是否已经约满),状态都为选中的状态,点击其它可选择日期,原先的预约时间约满的禁止不可选</li><li>难点五: 点击更改预约时间后,在点击其它时间,不确定,关掉弹窗,在点击弹窗,状态应默认为对应预约时间的选择状态</li></ul><h3 id="解决"><a href="#解决" class="headerlink" title="解决:"></a>解决:</h3><ul><li>如果不确定的话,可以先把原组件中的formatter逻辑存放在一个空白处,然后开始写新方案的formatter,确保实现后把新方案formatter存起来,然后把原来的formatter还原.</li><li>然后把新方案的formatter写在页面中,通过组件传值的方式传给组件,组件初始化时通过this.data拿到数据后判断是否存在传过来的formatter,有就将这个新的传给formatter,无就用原先的formatter.(formatter在组件类型为null)</li><li>在页面中直接通过判断按钮是否选择和状态来判断上下午状态并且传给组件,组件接收后通过判断是否存在这一字段来将这一字段添加到原来的选择文本字段(原来 +&#x3D; 新的),需要监听文本字段的变化,日期仍然是this.data.的日期(选中日期)</li><li>在组件处理选择日期的函数中判断,如果是同一天就返回</li><li>const calendarComponent &#x3D; this.selectComponent(‘#calendar’)</li><li>calendarComponent.reset()</li><li>在组件关闭弹窗处,不能初始化数据,再点开时要把需要拿到的状态获取到</li><li>在组件properties中的初始化时间函数要监听数据,重新获取已经处理的文本字段,日期仍然时预约那天(date)</li></ul><h2 id="checkbox样式问题"><a href="#checkbox样式问题" class="headerlink" title="checkbox样式问题"></a>checkbox样式问题</h2><p><img src="/../../img/WeChatMini/btn%E6%A0%B7%E5%BC%8F1.png" alt="btn样式"  data-tag='post-image' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p><p>当伪类的三角形随着机型,位置浮动时,可在checkbox那添加overflow:hiddden</p><h3 id="页面"><a href="#页面" class="headerlink" title="页面"></a>页面</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">checkbox</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">class</span>=<span class="string">&quot;checkbox &#123;&#123; isCheckAm &amp;&amp; isAm === amType.MORNING ? &#x27;is_checked_am&#x27; : &#x27;&#x27; &#125;&#125;&quot;</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">value</span>=<span class="string">&quot;&#123;&#123; isAm === amType.MORNING &#125;&#125;&quot;</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">mark:isAm</span>=<span class="string">&quot;&#123;&#123; amType.MORNING &#125;&#125;&quot;</span></span></span><br><span class="line"><span class="tag">  &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;iconfont icon-checkgou tick&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;car-subscribe-form-grid-view-daybtn&quot;</span>&gt;</span>上午<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">checkbox</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="样式"><a href="#样式" class="headerlink" title="样式"></a>样式</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line">checkbox &#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">200</span>rpx;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">88</span>rpx;</span><br><span class="line"><span class="attribute">border-radius</span>: <span class="number">4</span>rpx;</span><br><span class="line"><span class="attribute">border</span>: <span class="number">2</span>rpx solid <span class="built_in">var</span>(--border-line-color);</span><br><span class="line"><span class="attribute">margin-top</span>: <span class="number">24</span>rpx;</span><br><span class="line"><span class="attribute">color</span>: <span class="built_in">var</span>(--text-<span class="number">1</span>-color);</span><br><span class="line"><span class="attribute">background</span>: <span class="built_in">var</span>(--white);</span><br><span class="line">&#125;</span><br><span class="line">checkbox<span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">0</span>rpx;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">0</span>rpx;</span><br><span class="line">  <span class="attribute">border-bottom</span>: <span class="number">60</span>rpx solid <span class="built_in">var</span>(--border-line-color);</span><br><span class="line">  <span class="attribute">border-left</span>: <span class="number">60</span>rpx solid transparent;</span><br><span class="line">  <span class="attribute">margin-left</span>: -<span class="number">47</span>rpx;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">30</span>rpx;</span><br><span class="line">&#125;</span><br><span class="line">checkbox<span class="selector-pseudo">:first-child</span> &#123;</span><br><span class="line">  <span class="attribute">margin-right</span>: <span class="number">22</span>rpx;</span><br><span class="line">  <span class="attribute">margin-left</span>: <span class="number">40</span>rpx;</span><br><span class="line">&#125;</span><br><span class="line">checkbox <span class="selector-class">.wx-checkbox-input</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: none;</span><br><span class="line">   <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">checkbox <span class="selector-class">.wx-checkbox-input</span><span class="selector-class">.wx-checkbox-input-checked</span> &#123;</span><br><span class="line">  <span class="comment">/* checkbox 被选中后前面选项框的背景样式 */</span></span><br><span class="line">  <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">checkbox <span class="selector-class">.wx-checkbox-input</span><span class="selector-class">.wx-checkbox-input-checked</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>:<span class="number">0</span>rpx;</span><br><span class="line">  <span class="attribute">height</span>:<span class="number">0</span>rpx;</span><br><span class="line">  <span class="attribute">font-size</span>:<span class="number">0</span>;</span><br><span class="line">  <span class="attribute">color</span>:<span class="number">#fff</span>;</span><br><span class="line">  <span class="attribute">background-color</span>:<span class="number">#fff</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.is_checked_am</span>&#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">2</span>rpx solid <span class="built_in">var</span>(--primary-color) <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.is_checked_am</span><span class="selector-pseudo">::after</span>&#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">0</span>rpx;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">0</span>rpx;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">border-bottom</span>: <span class="number">60</span>rpx solid <span class="built_in">var</span>(--primary-color);</span><br><span class="line">  <span class="attribute">border-left</span>: <span class="number">60</span>rpx solid transparent;</span><br><span class="line">  <span class="attribute">margin-left</span>: -<span class="number">47</span>rpx;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">30</span>rpx;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.icon-checkgou</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">padding-left</span>: <span class="number">157</span>rpx;</span><br><span class="line">  <span class="attribute">padding-top</span>: <span class="number">100</span>rpx;</span><br><span class="line">  <span class="attribute">color</span>: white;</span><br><span class="line">  <span class="attribute">z-index</span>: <span class="number">1000</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.tick</span> &#123;</span><br><span class="line">  <span class="attribute">padding-top</span>: <span class="number">56</span>rpx <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.car-subscribe-form-grid-view-daybtn</span> &#123;</span><br><span class="line">  <span class="attribute">padding-left</span>: <span class="number">20</span>rpx;</span><br><span class="line">  <span class="attribute">padding-top</span>: <span class="number">24</span>rpx;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">160</span>rpx;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">26</span>rpx;</span><br><span class="line">  <span class="attribute">text-align</span>: left;</span><br><span class="line">  <span class="attribute">word-break</span>: break-all;</span><br><span class="line">  <span class="attribute">z-index</span>: <span class="number">50</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="calendar的reset"><a href="#calendar的reset" class="headerlink" title="calendar的reset()"></a>calendar的reset()</h2><p>选中日历的某个日期，重置选中的日期到默认值</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;复杂组件—日历组件的多页面不同应用解决方案&quot;&gt;&lt;a href=&quot;#复杂组件—日历组件的多页面不同应用解决方案&quot; class=&quot;headerlink&quot; title=&quot;复杂组件—日历组件的多页面不同应用解决方案&quot;&gt;&lt;/a&gt;复杂组件—日历组件的多页面不同应用解决方案&lt;/</summary>
      
    
    
    
    <category term="微信小程序" scheme="http://example.com/categories/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
    
    <category term="checkbox样式修改" scheme="http://example.com/tags/checkbox%E6%A0%B7%E5%BC%8F%E4%BF%AE%E6%94%B9/"/>
    
    <category term="问题与方案" scheme="http://example.com/tags/%E9%97%AE%E9%A2%98%E4%B8%8E%E6%96%B9%E6%A1%88/"/>
    
  </entry>
  
  <entry>
    <title>微信小程序-登录流程</title>
    <link href="http://example.com/2024/11/04/WeChatMini/%E7%99%BB%E5%BD%95%E6%B5%81%E7%A8%8B/"/>
    <id>http://example.com/2024/11/04/WeChatMini/%E7%99%BB%E5%BD%95%E6%B5%81%E7%A8%8B/</id>
    <published>2024-11-04T01:57:32.016Z</published>
    <updated>2024-11-08T03:42:03.887Z</updated>
    
    <content type="html"><![CDATA[<h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><ul><li>1、定义token的类型和初始化token<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> token = &#123;</span><br><span class="line">  <span class="comment">// token是由后端服务在用户登录时生成并返回给小程序，所以小程序端定义时需要了解后端需要传输什么在定义</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// token管理器</span></span><br><span class="line"><span class="keyword">const</span> tokenManager = &#123;</span><br><span class="line">  <span class="title function_">getToken</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> token</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">setToken</span>(<span class="params">tokenData</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> (token = &#123;...token,...tokenData&#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>2、封装好请求处理<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">_request</span> = (<span class="params">url,data,method</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>) =&gt;</span> &#123;</span><br><span class="line">    wx.<span class="title function_">request</span>(&#123;</span><br><span class="line">      url,</span><br><span class="line">      data,</span><br><span class="line">      <span class="attr">header</span>: tokenManager.<span class="title function_">getToken</span>(),</span><br><span class="line">      method,</span><br><span class="line">      <span class="title function_">succes</span>(<span class="params">resp</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(resp.<span class="property">status</span>.<span class="property">code</span> === <span class="number">502</span> || resp.<span class="property">statusCode</span> === <span class="number">500</span>) &#123;</span><br><span class="line">          <span class="title function_">reject</span>(&#123;<span class="attr">errMsg</span>: <span class="string">&#x27;请求失败&#x27;</span>&#125;)</span><br><span class="line">          <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">const</span> data = resp.<span class="property">data</span></span><br><span class="line">        <span class="keyword">if</span>(data.<span class="property">err</span>) &#123;</span><br><span class="line">          <span class="keyword">const</span> &#123; result &#125; = data</span><br><span class="line">          <span class="keyword">const</span> msg = result.<span class="property">state</span>.<span class="property">msg</span></span><br><span class="line">          <span class="title function_">reject</span>(&#123;<span class="attr">errMsg</span>:msg || data.<span class="property">msg</span>,<span class="attr">data</span>:result&#125;)</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">const</span> result = resp.<span class="property">data</span></span><br><span class="line">          <span class="title function_">resolve</span>(result)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="title function_">fail</span>(<span class="params">err</span>) &#123;</span><br><span class="line">        <span class="title function_">reject</span>(err)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>3、继续封装网络请求和处理返回的数据格式,然后在登录的接口中调用<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">httpRequest</span> = <span class="keyword">async</span>(<span class="params">link,data=&#123;&#125;,method: <span class="string">&#x27;GET&#x27;</span>,showLoading=<span class="literal">false</span></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span>(showLoading) &#123;</span><br><span class="line">    wx.<span class="title function_">showLoading</span>(&#123;</span><br><span class="line">      <span class="attr">title</span>:<span class="string">&quot;请求中&quot;</span>,</span><br><span class="line">      <span class="attr">mask</span>: <span class="literal">true</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> handleData = &#123;...data&#125;</span><br><span class="line">  <span class="keyword">if</span>(link.<span class="property">cross</span>)&#123;</span><br><span class="line">    handleData.<span class="property">cross</span> = link.<span class="property">cross</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> [error,response] = <span class="keyword">await</span> <span class="title function_">_to</span>(<span class="title function_">_request</span>(link.<span class="property">url</span>,handleData, method))</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(link.<span class="property">text</span>, respone, error)</span><br><span class="line">  <span class="keyword">if</span>(showLoading)&#123;</span><br><span class="line">    wx.<span class="title function_">hideLoading</span>()</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">resolve</span>([error,response])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>4、统一封装和写好api请求，页面中直接调用请求和传参即可<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">getApi</span> = <span class="keyword">async</span>(<span class="params">pramas</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> [err,res] = <span class="keyword">await</span> <span class="title function_">httpRequest</span>(apiurl,&#123;pramas&#125;)</span><br><span class="line">  <span class="keyword">if</span>(!err &amp;&amp; res) &#123;</span><br><span class="line">    <span class="keyword">return</span> res.<span class="property">result</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>5、处理登录模块，定义一个判断登录状态的变量，默认为null</li><li>6、处理静默登录的逻辑并通过<code>wx.login()</code>从微信服务端获取code<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">_handleDefaultLogin</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> systemInfo = wx.<span class="title function_">getDeviceInfo</span>() <span class="comment">// 获取设备信息</span></span><br><span class="line">  <span class="keyword">const</span> [networkErr,networkRes] = <span class="keyword">await</span> <span class="title function_">_to</span>(wx.<span class="title function_">getNetworkType</span>()) <span class="comment">// 获取网络类型</span></span><br><span class="line">  <span class="keyword">if</span>(networkErr) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;获取网络失败&#x27;</span>)</span><br><span class="line">  <span class="keyword">const</span> [wxLoginErr, wxLoginRes] = <span class="keyword">await</span> <span class="title function_">_to</span>(wx.<span class="title function_">login</span>())</span><br><span class="line">  <span class="keyword">if</span>(wxLoginErr) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;微信登录失败&#x27;</span>)</span><br><span class="line">  <span class="comment">// 设置token</span></span><br><span class="line">  ...</span><br><span class="line">  <span class="comment">// 调用业务登录接口</span></span><br><span class="line">  <span class="keyword">const</span> [loginErr,loginRes] = awiat <span class="title function_">httpRequest</span>(loginlink,&#123;<span class="attr">code</span>: wxLoginRes.<span class="property">code</span> || <span class="string">&#x27;&#x27;</span>, ...token&#125;)</span><br><span class="line">  <span class="keyword">const</span> loginData = loginRes.<span class="property">result</span></span><br><span class="line">  <span class="keyword">if</span>(loginErr || !loginData) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(loginErr.<span class="property">errMsg</span>)</span><br><span class="line">  <span class="comment">// 从loginData中拿到服务端传来的token数据，sessionId 或sid二者一样，看服务断校验使用哪一个</span></span><br><span class="line">  <span class="comment">// 继续设置token</span></span><br><span class="line">  <span class="comment">// 全局存储用户信息</span></span><br><span class="line">  <span class="comment">// 返回用户信息  </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>7、防止重复调用静默登录，处理静默登录判断，使用之前定义好的登录状态判断变量，因为静默登录每个页面都会触发才这样处理<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(!_loginRecoed) &#123;</span><br><span class="line">  _loginRecord = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">_handleDefaultLogin</span>()</span><br><span class="line">      .<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;<span class="title function_">resolve</span>(res)&#125;)</span><br><span class="line">      .<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">        _loginRecord = <span class="literal">null</span></span><br><span class="line">        <span class="title function_">reject</span>(err)</span><br><span class="line">      &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>如果全局只调用一次设置完token之后使用<code>wx.setStorageSync()</code>存储在缓存中，然后根据token的存在判断是否需要重新登录</li></ul></li><li>8、之后在全局布局中去调用静默登录这个方法</li></ul><!-- ### 跳过,不需要优化: 在页面重复调用两次及以上时,只执行一次调用step 1: 再写一个函数,然后在该函数中判断是否调用过,调用过就不执行,没有则执行---框架step 2: 定义一个标签,用来判断是否已经调用过 --- 2step 3: 在该函数传的参数是调用的函数 ---1step 4: 返回一个函数,要携带参数返回 ---3step 5: 已经调用返回不执行 ---4step 6: 没有调用,重置标签,返回要调用的函数 ---5step 7: 将这个函数赋值给一个变量,然后export ---6step 8: 在页面就可以多次调用,但只执行一次 ---7 --><h2 id="优化"><a href="#优化" class="headerlink" title="优化:"></a>优化:</h2><h3 id="判断promise的登录状态-并行请求-先获取先展示"><a href="#判断promise的登录状态-并行请求-先获取先展示" class="headerlink" title="判断promise的登录状态(并行请求,先获取先展示)"></a>判断promise的登录状态(并行请求,先获取先展示)</h3><ol><li>在全局封装一个登录状态,调用时如果没有登录状态就将静态登录的状态赋值给它</li><li>然后await等待事件成功才继续执行下面的语句,没有成功不执行,最后完成重置状态</li></ol><h3 id="重复登录问题"><a href="#重复登录问题" class="headerlink" title="重复登录问题:"></a>重复登录问题:</h3><ol><li>在统一在登录逻辑哪里处理</li><li>在默认登录时设置登陆后缓存,缓存数据最好使用序列化,把类型变为string</li><li>写一个函数用来判断是否登录,获取缓存,判断有缓存,将数据反序列化后在设置token返回true</li><li>完成后在整个登录逻辑那里去调用该函数,判断是否为true,返回</li></ol><h3 id="登录校验问题"><a href="#登录校验问题" class="headerlink" title="登录校验问题:"></a>登录校验问题:</h3><ol><li>在不需要登录的路径上传参数cross,然后到请求页面中返回时从路径拿到cross</li><li>有cross时需与之前的data的合并</li><li>之后在请求方法中判断不存在cross则进行原先判断静默登录状态是否登录,存在则请求结果返回</li></ol><h3 id="解决路径调用api时无提示-不报错问题"><a href="#解决路径调用api时无提示-不报错问题" class="headerlink" title="解决路径调用api时无提示,不报错问题:"></a>解决路径调用api时无提示,不报错问题:</h3><ol><li>在全局中使用函数和简单索引类型</li><li>通过泛型让K遍历T中的每一项,返回T时拿到K</li><li>使用时就有提示</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;步骤&quot;&gt;&lt;a href=&quot;#步骤&quot; class=&quot;headerlink&quot; title=&quot;步骤&quot;&gt;&lt;/a&gt;步骤&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;1、定义token的类型和初始化token&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td</summary>
      
    
    
    
    <category term="微信小程序" scheme="http://example.com/categories/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
    
    <category term="登录流程" scheme="http://example.com/tags/%E7%99%BB%E5%BD%95%E6%B5%81%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>微信小程序-代码优化方式</title>
    <link href="http://example.com/2024/11/04/WeChatMini/%E4%BB%A3%E7%A0%81%E4%BC%98%E5%8C%96%E6%96%B9%E5%BC%8F/"/>
    <id>http://example.com/2024/11/04/WeChatMini/%E4%BB%A3%E7%A0%81%E4%BC%98%E5%8C%96%E6%96%B9%E5%BC%8F/</id>
    <published>2024-11-04T01:57:32.016Z</published>
    <updated>2024-11-08T01:44:49.221Z</updated>
    
    <content type="html"><![CDATA[<h2 id="三目运算场景"><a href="#三目运算场景" class="headerlink" title="三目运算场景"></a>三目运算场景</h2><ul><li><h3 id="场景一"><a href="#场景一" class="headerlink" title="场景一"></a>场景一</h3><ul><li>leftData ? leftData : rightData</li><li>简化：leftData || rightData</li><li>适合场景：isClick ? ‘’ : ‘hidden’</li></ul></li><li><h3 id="场景二"><a href="#场景二" class="headerlink" title="场景二"></a>场景二</h3><ul><li>leftData ? rightData : leftData</li><li>简化：leftData &amp;&amp; rightData</li></ul></li><li><h3 id="场景三-只要leftData不为undefined或null-就返回leftData"><a href="#场景三-只要leftData不为undefined或null-就返回leftData" class="headerlink" title="场景三: (只要leftData不为undefined或null 就返回leftData)"></a>场景三: (只要leftData不为undefined或null 就返回leftData)</h3><ul><li>leftData !&#x3D;&#x3D; null &amp;&amp; leftData !&#x3D;&#x3D; undefined ? leftData : rightData</li><li>简化：leftData ?? rightData</li></ul></li></ul><h3 id="运算符释义"><a href="#运算符释义" class="headerlink" title="运算符释义"></a>运算符释义</h3><ul><li><code>||</code>,会判断问号左边是否有值，即会使用Boolean将左边进行转化，若为true，返回左边的值，若为false，返回右边的值</li><li><code>&amp;&amp;</code>,会判断问号左边是否有值，即会使用Boolean将左边进行转化，若为false，返回左边的值，若为true，返回右边的值</li><li><code>??</code>,ES2020 新增，当左侧的操作数为 null 或者 undefined时，返回其右侧操作数，否则返回左侧操作数</li></ul><h2 id="代码优化方式"><a href="#代码优化方式" class="headerlink" title="代码优化方式"></a>代码优化方式</h2><h3 id="场景一：页面使用复杂的表达式，可以在函数中返回结果，直接调用函数"><a href="#场景一：页面使用复杂的表达式，可以在函数中返回结果，直接调用函数" class="headerlink" title="场景一：页面使用复杂的表达式，可以在函数中返回结果，直接调用函数"></a>场景一：页面使用复杂的表达式，可以在函数中返回结果，直接调用函数</h3><ul><li>示例： disabled: !a &amp;&amp; b &amp;&amp; c &amp;&amp; d</li><li>解决： <ul><li>disabled: isDisabled</li><li>const isDisabled &#x3D; () &#x3D;&gt; {return !a &amp;&amp; b &amp;&amp; c &amp;&amp; d}</li></ul></li></ul><h3 id="场景二：页面存在重复节点，一般存在表单页面"><a href="#场景二：页面存在重复节点，一般存在表单页面" class="headerlink" title="场景二：页面存在重复节点，一般存在表单页面"></a>场景二：页面存在重复节点，一般存在表单页面</h3><ul><li>解决： 将数据存在数组中，遍历出来</li></ul><h3 id="场景三：if-else-switch-要校验，表单"><a href="#场景三：if-else-switch-要校验，表单" class="headerlink" title="场景三：if else switch + 要校验，表单"></a>场景三：if else switch + 要校验，表单</h3><ul><li>将提示信息，校验的key值，和是否必填(可以通过ts的类型校验忽略或排除)写成一个数组对象</li><li>通过判断这个key对应的value的布尔类型时候为undefined，是就提示并返回。</li><li>注意点： <ul><li>有两个数组，数组一是存放key和value的数组对象，数组二是存放要检验的key和提示信息。</li><li>这个校验方式是按顺序的，所以数组的顺序要和页面的表单顺序一致</li></ul></li></ul><h3 id="场景三：从后端获取参数存进对象中，但有几个数据要单独处理"><a href="#场景三：从后端获取参数存进对象中，但有几个数据要单独处理" class="headerlink" title="场景三：从后端获取参数存进对象中，但有几个数据要单独处理"></a>场景三：从后端获取参数存进对象中，但有几个数据要单独处理</h3><ul><li>示例：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> params = &#123;&#125;</span><br><span class="line">params.<span class="property">id</span> = <span class="variable language_">this</span>.<span class="property">formItem</span>.<span class="property">id</span></span><br><span class="line">params.<span class="property">time</span> = <span class="variable language_">this</span>.<span class="property">formItem</span>.<span class="property">time</span>.<span class="title function_">format</span>(<span class="string">&#x27;YYYY-MM-DD&#x27;</span>)</span><br><span class="line">...次数省略多个重复代码</span><br></pre></td></tr></table></figure></li><li>解决：使用解构，不处理的直接存，处理的拎出来处理<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;time,...params&#125; = <span class="variable language_">this</span>.<span class="property">formItem</span>   <span class="comment">// 这里输出params就可以得到params对象</span></span><br><span class="line">params.<span class="property">time</span> = <span class="variable language_">this</span>.<span class="property">formItem</span>.<span class="property">time</span>.<span class="title function_">format</span>(<span class="string">&#x27;YYYY-MM-DD&#x27;</span>)</span><br></pre></td></tr></table></figure></li></ul><h3 id="场景四：常量使用枚举保存好"><a href="#场景四：常量使用枚举保存好" class="headerlink" title="场景四：常量使用枚举保存好"></a>场景四：常量使用枚举保存好</h3><h3 id="场景五：css用BEM命名法"><a href="#场景五：css用BEM命名法" class="headerlink" title="场景五：css用BEM命名法"></a>场景五：css用BEM命名法</h3><p> <a href="https://www.infoq.cn/article/vfnfwdle0zmga9psvbug">BEM命名法</a></p><h3 id="场景六：switch-比-if-else在-执行效率高"><a href="#场景六：switch-比-if-else在-执行效率高" class="headerlink" title="场景六：switch 比 if&#x2F;else在 执行效率高"></a>场景六：switch 比 if&#x2F;else在 执行效率高</h3><h3 id="场景七：-优化switch"><a href="#场景七：-优化switch" class="headerlink" title="场景七： 优化switch"></a>场景七： 优化switch</h3><blockquote><p>策略模式： 简单理解一个函数对应一个方法</p></blockquote><ul><li>解决：使用对象存储，然后在函数中返回</li><li>本质：在工厂函数中使用策略模式</li><li>示例：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">weekFun</span> = (<span class="params">opt: number</span>) =&gt; &#123;</span><br><span class="line"><span class="comment">// 使用对象字面量</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">status</span>: <span class="title class_">Record</span>&lt;number, string&gt; = &#123;</span><br><span class="line"><span class="number">0</span>: <span class="string">&#x27;周日&#x27;</span>,  <span class="comment">// value可以是函数</span></span><br><span class="line"><span class="number">1</span>: <span class="string">&#x27;周一&#x27;</span>,</span><br><span class="line"><span class="number">2</span>: <span class="string">&#x27;周二&#x27;</span>,</span><br><span class="line"><span class="number">3</span>: <span class="string">&#x27;周三&#x27;</span>,</span><br><span class="line"><span class="number">4</span>: <span class="string">&#x27;周四&#x27;</span>,</span><br><span class="line"><span class="number">5</span>: <span class="string">&#x27;周五&#x27;</span>,</span><br><span class="line"><span class="number">6</span>: <span class="string">&#x27;周六&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> status[opt] ?? <span class="string">&#x27;weekFun is not get useful num&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="场景八：-优化if-else代码块"><a href="#场景八：-优化if-else代码块" class="headerlink" title="场景八： 优化if&#x2F;else代码块"></a>场景八： 优化if&#x2F;else代码块</h3><ul><li>Map写法<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> opt = &#123;</span><br><span class="line"><span class="number">0</span>: <span class="string">&quot;add&quot;</span>,</span><br><span class="line"><span class="number">1</span>: <span class="string">&quot;even&quot;</span>,</span><br><span class="line"><span class="number">2</span>: <span class="string">&quot;divided&quot;</span>,</span><br><span class="line"><span class="number">3</span>: <span class="string">&quot;multi&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> actions = <span class="keyword">new</span> <span class="title class_">Map</span>([</span><br><span class="line"> [<span class="string">&quot;add&quot;</span>, <span class="string">&quot;成功,444444444444&quot;</span>],</span><br><span class="line"> [<span class="string">&quot;even&quot;</span>, <span class="string">&quot;失败,44444444&quot;</span>],</span><br><span class="line"> [<span class="string">&quot;divided&quot;</span>, <span class="string">&quot;进行中,11111111&quot;</span>],</span><br><span class="line"> [<span class="string">&quot;multi&quot;</span>, <span class="string">&quot;未开始&quot;</span>]</span><br><span class="line">])</span><br><span class="line"><span class="comment">// 调用</span></span><br><span class="line">actions.<span class="title function_">get</span>(opt[<span class="number">0</span>])</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(actions.<span class="title function_">get</span>(opt[<span class="number">0</span>])) <span class="comment">// &quot;成功,444444444444&quot; </span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;三目运算场景&quot;&gt;&lt;a href=&quot;#三目运算场景&quot; class=&quot;headerlink&quot; title=&quot;三目运算场景&quot;&gt;&lt;/a&gt;三目运算场景&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;h3 id=&quot;场景一&quot;&gt;&lt;a href=&quot;#场景一&quot; class=&quot;headerlink&quot; t</summary>
      
    
    
    
    <category term="微信小程序" scheme="http://example.com/categories/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
    
    <category term="js" scheme="http://example.com/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>微信小程序-自定义导航栏</title>
    <link href="http://example.com/2024/11/04/WeChatMini/xcx-%E8%87%AA%E5%AE%9A%E4%B9%89%E5%AF%BC%E8%88%AA%E6%A0%8F/"/>
    <id>http://example.com/2024/11/04/WeChatMini/xcx-%E8%87%AA%E5%AE%9A%E4%B9%89%E5%AF%BC%E8%88%AA%E6%A0%8F/</id>
    <published>2024-11-04T01:57:31.983Z</published>
    <updated>2024-11-08T03:47:23.203Z</updated>
    
    <content type="html"><![CDATA[<h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><ul><li>1.app.json的window配置项中设置”nativationStyle”:”custom”</li><li>2.在组件目录中新建一个文件夹用来存放页面布局组件，</li><li>3.在app.ts中的使用<code>wx.getSystemInfoSync()</code>和<code>wx.getMenuButtonBoundingClientRect()</code>分别获取系统信息中状态栏的高度和胶囊的信息<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">globalData</span>: &#123;</span><br><span class="line">  <span class="attr">navBarHeight</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">menuWidth</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">menuHeigth</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">menuTop</span>: <span class="number">0</span>,</span><br><span class="line">&#125;,</span><br><span class="line"><span class="title function_">onLaunch</span> () &#123;</span><br><span class="line">  <span class="keyword">const</span> res = wx.<span class="title function_">getMenuButtonBoundingClientRect</span>() <span class="comment">// 获取胶囊信息</span></span><br><span class="line">  <span class="keyword">const</span> windowInfo = wx.<span class="title function_">getSystemInfoSync</span>() <span class="comment">// 获取系统信息</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">globalData</span>.<span class="property">navBarHeight</span> = systemInfo.<span class="property">statusBarHeight</span> + <span class="number">44</span> <span class="comment">// 状态栏高度</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">globalData</span>.<span class="property">menuWidth</span> = res.<span class="property">width</span>,  <span class="comment">// 胶囊宽度</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">globalData</span>.<span class="property">menuHeigth</span> = res.<span class="property">height</span>, <span class="comment">// 胶囊高度</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">globalData</span>.<span class="property">menuTop</span> = res.<span class="property">top</span>,  <span class="comment">//较难离顶部的距离</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>4.先完成自定义导航的页面布局<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*wxml*/</span></span><br><span class="line">&lt;view <span class="keyword">class</span>=<span class="string">&quot;top&quot;</span> style=<span class="string">&quot;height: &#123;&#123;topBarHeight&#125;&#125;px; background-color:&#123;&#123;backgroundColor&#125;&#125;;&quot;</span>&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">view</span> <span class="attr">style</span>=<span class="string">&quot;height: &#123;&#123;menuHeight&#125;&#125;px; padding-top: &#123;&#123;top&#125;&#125;px&quot;</span> <span class="attr">class</span>=<span class="string">&quot;title&quot;</span>&gt;</span>&#123;&#123;title&#125;&#125;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">view</span> <span class="attr">wx:if</span>=<span class="string">&quot;&#123;&#123;isHome&#125;&#125;&quot;</span> <span class="attr">style</span>=<span class="string">&quot;margin-top:&#123;&#123;top&#125;&#125;px;height:&#123;&#123;menuHeight - 2&#125;&#125;px;width:&#123;&#123;menuWidth - 2&#125;&#125;px&quot;</span> <span class="attr">class</span>=<span class="string">&quot;menu&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">van-icon</span> <span class="attr">name</span>=<span class="string">&quot;arrow-left&quot;</span> <span class="attr">size</span>=<span class="string">&quot;24px&quot;</span> <span class="attr">color</span>=<span class="string">&quot;#fff&quot;</span> <span class="attr">bind:click</span>=<span class="string">&quot;onBack&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;divide&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">van-icon</span> <span class="attr">name</span>=<span class="string">&quot;wap-home-o&quot;</span> <span class="attr">size</span>=<span class="string">&quot;24px&quot;</span> <span class="attr">custom-class</span>=<span class="string">&quot;home&quot;</span> <span class="attr">color</span>=<span class="string">&quot;#fff&quot;</span> <span class="attr">bind:click</span>=<span class="string">&quot;onHome&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></span><br><span class="line">&lt;/view&gt;</span><br><span class="line">&lt;!-- 占位 --&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">view</span> <span class="attr">style</span>=<span class="string">&quot;height: &#123;&#123;topBarHeight&#125;&#125;px;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;body&quot;</span> <span class="attr">style</span>=<span class="string">&quot;background: &#123;&#123;background&#125;&#125;;&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">slot</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*scss*/</span></span><br><span class="line">.<span class="property">top</span> &#123;</span><br><span class="line">  <span class="attr">position</span>: fixed;</span><br><span class="line">  <span class="attr">width</span>: <span class="number">100</span>%;</span><br><span class="line">  <span class="attr">top</span>:<span class="number">0</span>;</span><br><span class="line">  .<span class="property">menu</span> &#123;</span><br><span class="line">    <span class="attr">position</span>: absolute;</span><br><span class="line">    border-<span class="attr">radius</span>: 20px; </span><br><span class="line">    <span class="attr">border</span>: 1px solid transparent;</span><br><span class="line">    box-<span class="attr">shadow</span>: inset 0px 1px 0px 0px <span class="title function_">rgba</span>(<span class="number">114</span>, <span class="number">114</span>, <span class="number">114</span>, <span class="number">0.178</span>);</span><br><span class="line">    background-<span class="attr">color</span>: <span class="title function_">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.178</span>);</span><br><span class="line">    margin-<span class="attr">left</span>: 20rpx;</span><br><span class="line">    <span class="attr">display</span>: flex;</span><br><span class="line">    align-<span class="attr">items</span>: center;</span><br><span class="line">    justify-<span class="attr">content</span>: center;</span><br><span class="line">  &#125;</span><br><span class="line">  .<span class="property">home</span> &#123;</span><br><span class="line">    margin-<span class="attr">right</span>: 5px;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  .<span class="property">divide</span> &#123;</span><br><span class="line">    <span class="attr">height</span>: 18px;</span><br><span class="line">    margin-<span class="attr">left</span>: 5px;</span><br><span class="line">    border-<span class="attr">right</span>: 1px solid <span class="title function_">rgb</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0.5</span>);</span><br><span class="line">    margin-<span class="attr">right</span>: 10px;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  .<span class="property">title</span> &#123;</span><br><span class="line">    <span class="attr">position</span>: absolute; </span><br><span class="line">    <span class="attr">width</span>: <span class="number">100</span>%;</span><br><span class="line">    <span class="attr">display</span>: flex; </span><br><span class="line">    justify-<span class="attr">content</span>: center; </span><br><span class="line">    align-<span class="attr">items</span>: center; </span><br><span class="line">    font-<span class="attr">size</span>: 20px; </span><br><span class="line">    font-<span class="attr">weight</span>: bold;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*json*/</span></span><br><span class="line"><span class="string">&quot;usingComponents&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;van-icon&quot;</span>: <span class="string">&quot;@vant/weapp/icon/index&quot;</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li><li>5.在ts文件中完成获取对应的页面信息<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取应用实例，间接获取globalData的数据</span></span><br><span class="line"><span class="keyword">const</span> app = getApp&lt;<span class="title class_">IAppOption</span>&gt;()</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 组件的属性列表</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line"><span class="attr">properties</span>: &#123;</span><br><span class="line">  <span class="attr">title</span>: &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="title class_">String</span>,</span><br><span class="line">    <span class="attr">value</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">backgroundColor</span>: &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="title class_">String</span>,</span><br><span class="line">    <span class="attr">value</span>: <span class="string">&#x27;rgb(90 ,100 ,90)&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">background</span>: &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="title class_">String</span>,</span><br><span class="line">    <span class="attr">value</span>: <span class="string">&#x27;#fff&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 组件的初始数据</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="attr">data</span>: &#123;</span><br><span class="line">  <span class="attr">navBarHeight</span>:<span class="number">0</span>,</span><br><span class="line">  <span class="attr">height</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">top</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">menuHeight</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">menuWidth</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">isHome</span>: <span class="literal">true</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 组件内生命周期</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="attr">lifetimes</span>: &#123;</span><br><span class="line">  <span class="title function_">attached</span> () &#123;</span><br><span class="line">    <span class="keyword">const</span> pages = <span class="title function_">getCurrentPages</span>(); <span class="comment">// 获取页面指针数组</span></span><br><span class="line">    <span class="keyword">const</span> currentPage = pages[pages.<span class="property">length</span> - <span class="number">1</span>]; <span class="comment">// 获取当前页</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setData</span>(&#123;</span><br><span class="line">      <span class="attr">navBarHeight</span>: app.<span class="property">globalData</span>.<span class="property">navBarHeight</span>, <span class="comment">// 获取顶部栏的高度</span></span><br><span class="line">      <span class="attr">top</span>: appData.<span class="property">globalData</span>.<span class="property">menuTop</span>,  <span class="comment">// 获取胶囊与顶部的距离</span></span><br><span class="line">      <span class="attr">menuHeight</span>: appData.<span class="property">globalData</span>.<span class="property">menuHeigth</span>, <span class="comment">// 获取胶囊高度</span></span><br><span class="line">      <span class="attr">menuWidth</span>: appData.<span class="property">globalData</span>.<span class="property">menuWidth</span>, <span class="comment">// 获取胶囊宽度</span></span><br><span class="line">      <span class="attr">isHome</span>: currentPage.<span class="property">route</span> === <span class="string">&quot;pages/index/index&quot;</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 组件的方法列表</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="attr">methods</span>: &#123;</span><br><span class="line">  <span class="title function_">goHome</span>(<span class="params"></span>)&#123;</span><br><span class="line">    wx.<span class="title function_">navigateTo</span>(&#123;</span><br><span class="line">      <span class="attr">url</span>:<span class="string">&quot;pages/index/inedx&quot;</span>,</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">goBack</span>(<span class="params"></span>)&#123;</span><br><span class="line">    wx.<span class="title function_">navigateBack</span>(&#123;</span><br><span class="line">      <span class="attr">delta</span>: <span class="number">1</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li></ul><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ul><li>保证了导航栏的文本必定居中</li><li>保证了当出现安全区域与页面主体颜色不同时可以更改</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;步骤&quot;&gt;&lt;a href=&quot;#步骤&quot; class=&quot;headerlink&quot; title=&quot;步骤&quot;&gt;&lt;/a&gt;步骤&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;1.app.json的window配置项中设置”nativationStyle”:”custom”&lt;/li&gt;
&lt;li&gt;2.在组件</summary>
      
    
    
    
    <category term="微信小程序" scheme="http://example.com/categories/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
    
    <category term="导航栏" scheme="http://example.com/tags/%E5%AF%BC%E8%88%AA%E6%A0%8F/"/>
    
  </entry>
  
  <entry>
    <title>微信小程序-事件和生命周期</title>
    <link href="http://example.com/2024/11/04/WeChatMini/xcx-%E4%BA%8B%E4%BB%B6%E5%92%8C%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/"/>
    <id>http://example.com/2024/11/04/WeChatMini/xcx-%E4%BA%8B%E4%BB%B6%E5%92%8C%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</id>
    <published>2024-11-04T01:57:31.967Z</published>
    <updated>2024-11-22T04:05:14.331Z</updated>
    
    <content type="html"><![CDATA[<style>.en {  color: #3D82AC;  font-weight: 600;}</style><h2 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h2><blockquote><p>事件分为冒泡事件和非冒泡事件</p></blockquote><h3 id="冒泡事件"><a href="#冒泡事件" class="headerlink" title="冒泡事件"></a>冒泡事件</h3><blockquote><p>当一个组件上的事件被触发后，该事件会向父节点传递。</p></blockquote><ul><li>WXML的冒泡事件列表：即在触摸&#x2F;动画开始结束等动作时发生的事件</li></ul><h3 id="非冒泡事件"><a href="#非冒泡事件" class="headerlink" title="非冒泡事件"></a>非冒泡事件</h3><blockquote><p>当一个组件上的事件被触发后，该事件不会向父节点传递。</p></blockquote><ul><li>除冒泡事件列表，且无特殊生命的都是非冒泡事件</li></ul><h3 id="绑定事件"><a href="#绑定事件" class="headerlink" title="绑定事件"></a>绑定事件</h3><ul><li>bind：普通事件绑定</li><li>catch: 会阻止事件向上冒泡</li><li>mut-bind： 互斥事件绑定</li><li>触发后，只会有其中一个绑定函数被触发。且不影响<span class="en">bind</span>和<span class="en">catch</span>的绑定效果</li></ul><h3 id="事件的捕获阶段"><a href="#事件的捕获阶段" class="headerlink" title="事件的捕获阶段"></a>事件的捕获阶段</h3><ul><li>触摸类事件支持捕获阶段。</li><li>捕获位于冒泡之前，且在捕获阶段中，事件到达节点的顺序与冒泡阶段恰好相反</li><li>捕获阶段监听事件：<ul><li>capture-bind</li><li>capture-catch：中断捕获阶段和取消冒泡阶段</li></ul></li></ul><h2 id="事件对象"><a href="#事件对象" class="headerlink" title="事件对象"></a>事件对象</h2><h3 id="基础事件对象属性列表"><a href="#基础事件对象属性列表" class="headerlink" title="基础事件对象属性列表"></a>基础事件对象属性列表</h3><table><thead><tr><th>属性</th><th>说明</th><th></th></tr></thead><tbody><tr><td>type</td><td>事件类型</td><td></td></tr><tr><td>timeStamp</td><td>事件生成时的时间戳</td><td></td></tr><tr><td>target</td><td>触发事件的源组件</td><td></td></tr><tr><td>target</td><td>触发事件的源组件</td><td></td></tr><tr><td></td><td>id</td><td>事件源组件的</td></tr><tr><td></td><td>dataset</td><td>事件源组件上由data-开头的自定义属性组成的集合</td></tr><tr><td>currentTarget</td><td>当前组件的一些属性值集合</td><td></td></tr><tr><td>mark</td><td>事件标记数据</td><td></td></tr></tbody></table><h3 id="自定义事件对象属性列表"><a href="#自定义事件对象属性列表" class="headerlink" title="自定义事件对象属性列表"></a>自定义事件对象属性列表</h3><ul><li>detailObject额外的信息</li></ul><h3 id="触摸事件对象属性列表"><a href="#触摸事件对象属性列表" class="headerlink" title="触摸事件对象属性列表"></a>触摸事件对象属性列表</h3><table><thead><tr><th>属性</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>touches</td><td>Array</td><td>触摸事件，当前停留在屏幕中的触摸点信息的数组</td></tr><tr><td>changedTouches</td><td>Array</td><td>触摸事件，当前变化的触摸点信息的数组</td></tr></tbody></table><h3 id="特殊事件"><a href="#特殊事件" class="headerlink" title="特殊事件"></a>特殊事件</h3><ul><li>canvas 中的触摸事件不可冒泡，所以没有 currentTarget。</li></ul><h3 id="dataset"><a href="#dataset" class="headerlink" title="dataset:"></a>dataset:</h3><ul><li>在 WXML 中，这些自定义数据以 data- 开头，多个单词由连字符 - 连接。</li><li>data-element-type，最终会呈现为 event.currentTarget.dataset.elementType (转驼峰)</li><li>data-elementType，最终会呈现为 event.currentTarget.dataset.elementtype （大写转小写）</li></ul><h3 id="mark"><a href="#mark" class="headerlink" title="mark:"></a>mark:</h3><ul><li>mark 会包含从触发事件的节点到根节点上所有的 mark: 属性值</li><li>Touch 对象</li></ul><table><thead><tr><th>属性</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>identifier</td><td>Number</td><td>触摸点的标识符</td></tr><tr><td>pageX,pageY</td><td>Number</td><td>距离文档左上角的距离，文档的左上角为原点</td></tr><tr><td>clientX,clientY</td><td>Number</td><td>距离页面可显示区域(除去导航条)左上角距离</td></tr></tbody></table><ul><li>CanvasTouch 对象</li></ul><table><thead><tr><th>属性</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>identifier</td><td>Number</td><td>触摸点的标识符</td></tr><tr><td>x,y</td><td>Number</td><td>距离 Canvas 左上角的距离，Canvas 的左上角为原点</td></tr></tbody></table><hr><h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><h3 id="App-生命周期"><a href="#App-生命周期" class="headerlink" title="App 生命周期"></a>App 生命周期</h3><ul><li>在App({})函数中定义<ul><li>onLaunch：小程序初始化时触发，<span class="en">全局只触发一次</span>。通常用于初始化操作。</li><li>onShow：小程序启动或从后台进入前台显示时触发。通常用于获取用户信息、判断是否登录。</li><li>onHide：小程序从前台进入后台隐藏时触发。通常用于保存用户数据、暂停音乐播放。</li><li>onError：小程序发生脚本错误或API调用失败时触发。通常用于对错误进行处理，如记录错误日志等操作。</li></ul></li><li>注意<ul><li><span class="en">异步操作</span>：生命周期函数可能包含异步操作，如网络请求、定时器.在这种情况上下，需要使用回调函数或Promise对象等方式来保证异步操作的正确执行。</li><li><span class="en">页面传参</span>：在小程序中跳转到其他页面时，可以通过 URL 参数传递数据。开发者需要在 <code>onLoad</code> 函数中获取参数并进行处理。</li><li><span class="en">数据缓存</span>：在小程序中，可以使用 <code>wx.setStorage</code> 和 <code>wx.getStorage</code> 等 API 将数据保存到本地缓存中。这些数据可以在小程序的不同页面中共享和访问，可以用于存储用户信息、配置项等数据。</li></ul></li></ul><h3 id="页面生命周期"><a href="#页面生命周期" class="headerlink" title="页面生命周期"></a>页面生命周期</h3><ul><li>在Page({})函数中定义<ul><li>onLoad：页面<span class="en">加载时</span>触发。通常用于获取页面参数、初始化数据等操作。</li><li>onShow：页面<span class="en">显示时</span>触发。通常用于刷新页面数据、重新加载组件等操作。</li><li>onReady：页面<span class="en">初次渲染完成时</sapn>触发。通常用于获取 DOM 节点、创建动画等操作。</li><li>onHide：页面<span class="en">隐藏时</span>触发。可以保存页面数据等操作。</li><li>onUnload：页面<span class="en">卸载时</span>触发，如 wx.redirectTo 或 wx.navigateBack 到其他页面时。通常用于保存页面数据、取消订阅事件等操作。</li></ul></li></ul><h3 id="组件生命周期"><a href="#组件生命周期" class="headerlink" title="组件生命周期"></a>组件生命周期</h3><ul><li>在Component({})函数中的lifetimes对象中定义<ul><li>created：组件实例被创建时触发，此时this.data是Component构造器中的data，<span class="en">不能调用setData</span>。</li><li>attached：初始化完毕后，组件被加入到父组件中时触发，此时this.data为组件当前值。</li><li>ready：组件在视图层布局完成后触发。</li><li>moved：组件被移动到另一个节点时触发。</li><li>detached：组件实例被从页面节点树中移除时触发。</li><li>error：每当组件方法抛出错误时执行，参数Object Error</li></ul></li></ul><h3 id="组件所在页面生命周期"><a href="#组件所在页面生命周期" class="headerlink" title="组件所在页面生命周期"></a>组件所在页面生命周期</h3><ul><li>在组件的pageLifetimes对象中定义<ul><li>show：组件所在的页面<span class="en">被展示时</span>执行</li><li>hide：组件所在的页面<span class="en">被隐藏时</span>执行</li><li>resize：组件所在的页面<span class="en">尺寸变化</span>时执行，参数Object Size</li><li>routeDone：组件所在页面<span class="en">路由动画完成时</span>执行</li><li>注：自定义的tabBar的pageLifetime不会触发</li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;style&gt;
.en {
  color: #3D82AC;
  font-weight: 600;
}
&lt;/style&gt;

&lt;h2 id=&quot;事件&quot;&gt;&lt;a href=&quot;#事件&quot; class=&quot;headerlink&quot; title=&quot;事件&quot;&gt;&lt;/a&gt;事件&lt;/h2&gt;&lt;blockquo</summary>
      
    
    
    
    <category term="微信小程序" scheme="http://example.com/categories/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
    
    <category term="事件" scheme="http://example.com/tags/%E4%BA%8B%E4%BB%B6/"/>
    
    <category term="生命周期" scheme="http://example.com/tags/%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/"/>
    
  </entry>
  
  <entry>
    <title>微信小程序-封装api到使用的一系列总结</title>
    <link href="http://example.com/2024/11/04/WeChatMini/xcx-%E6%8E%A5%E6%94%B6api/"/>
    <id>http://example.com/2024/11/04/WeChatMini/xcx-%E6%8E%A5%E6%94%B6api/</id>
    <published>2024-11-04T01:57:31.967Z</published>
    <updated>2024-11-08T03:58:24.538Z</updated>
    
    <content type="html"><![CDATA[<h3 id="封装api到调用"><a href="#封装api到调用" class="headerlink" title="封装api到调用"></a>封装api到调用</h3><ol><li>先封装好网络请求（要记得把成功的失败的回调中返回数据）</li><li>将需要请求的参数返回给对应函数</li><li>需要使用到的页面调用接口<ul><li>在onLoad () {this.调用的函数}</li><li>用async,await将参数传递过来，定义一个变量接收</li><li>在data中定义初始化变量来接收数据this.setData({空数组(或对象)：接收的变量})</li></ul></li><li>跳转页面传参：可以用<code>e.mark</code>，将参数传进来，然后直接在url上携带参数传到另一个页面，另一个页面接收对应的参数，获取对应的数据</li></ol><h4 id="注意点：-mark（事件系统）-navigateTo-路径传参"><a href="#注意点：-mark（事件系统）-navigateTo-路径传参" class="headerlink" title="注意点： mark（事件系统） | navigateTo (路径传参)"></a>注意点： mark（事件系统） | navigateTo (路径传参)</h4><h3 id="获取api数据中二层数组的数据（-拼接字符串）"><a href="#获取api数据中二层数组的数据（-拼接字符串）" class="headerlink" title="获取api数据中二层数组的数据（+拼接字符串）"></a>获取api数据中二层数组的数据（+拼接字符串）</h3><ol><li>重新处理数据，用map()获取第一层数组中的值，然后存到一个空数组</li><li>定义好一个空的字符串，用来接收拼接的字符串</li><li>判断二层列表的空数组是否存在，有无长度</li><li>利用累加器reduce将列表的值拼接后返回给空字符串</li></ol><h4 id="注意点：-map（返回一个新数组）-，reduce（pre，cur，idx）累加器"><a href="#注意点：-map（返回一个新数组）-，reduce（pre，cur，idx）累加器" class="headerlink" title="注意点： map（返回一个新数组） ，reduce（pre，cur，idx）累加器"></a>注意点： map（返回一个新数组） ，reduce（pre，cur，idx）累加器</h4><h3 id="距离发布时间过了多久"><a href="#距离发布时间过了多久" class="headerlink" title="距离发布时间过了多久"></a>距离发布时间过了多久</h3><ol><li>获取当前时间</li><li>获取发布的时间</li><li>二者相减</li><li>将年月日 时分秒 处理好后</li></ol><ul><li>秒  &#x3D; 毫秒 &#x2F; 1000</li><li>分  &#x3D; 秒 &#x2F; 60</li><li>时  &#x3D; 分 &#x2F; 60</li><li>日  &#x3D; 时 &#x2F; 24</li><li>月  &#x3D; 日 &#x2F; 30</li><li>年  &#x3D; 月 &#x2F; 12</li><li>Math.floor()向下取整</li><li>Math.ceil()向上取整</li><li>Math.round()四舍五入</li></ul><ol start="5"><li>嵌套判断</li></ol><h3 id="请求分页"><a href="#请求分页" class="headerlink" title="请求分页"></a>请求分页</h3><ol><li>路径要动态传参</li><li>页面通过调用函数将参数传进来getListByTypeId({ page: curPage })</li><li>判断数据是否大于每页展示的数据，是的话直接显示；不是就将当前的数据和下一个数据拼接起来 </li><li>在上拉触底函数哪里判断页数是不是小于总的页数，是进入循环，当前页数加一；不是，提示无数据</li><li>加个是否加载成功：加载成功提示，继续滚动框架在新数据，加载中不能加载，等待数据加载完成才能继续操作（默认第一页为加载完成）</li></ol><h3 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> 当api传入的数据有问题，应仔细查看一下路径是否写错</span><br><span class="line"><span class="number">2.</span> 动态传参：       </span><br><span class="line">  getListByTypeId : <span class="function">(<span class="params">data = &#123;&#125;</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> param = &#123;</span><br><span class="line">      ...data,</span><br><span class="line">      <span class="attr">typeId</span>: <span class="number">1</span>,</span><br><span class="line">      <span class="attr">cross</span>: <span class="number">1</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">request</span>(<span class="string">&#x27;/pc/index/getListByTypeId&#x27;</span>, param);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;封装api到调用&quot;&gt;&lt;a href=&quot;#封装api到调用&quot; class=&quot;headerlink&quot; title=&quot;封装api到调用&quot;&gt;&lt;/a&gt;封装api到调用&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;先封装好网络请求（要记得把成功的失败的回调中返回数据）&lt;/li&gt;
&lt;li&gt;将需要</summary>
      
    
    
    
    <category term="微信小程序" scheme="http://example.com/categories/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
    
    <category term="api" scheme="http://example.com/tags/api/"/>
    
  </entry>
  
  <entry>
    <title>微信小程序-封装日历组件与组件传值</title>
    <link href="http://example.com/2024/11/04/WeChatMini/xcx-%E5%B0%81%E8%A3%85%E6%97%A5%E5%8E%86%E7%BB%84%E4%BB%B6%EF%BC%88%E4%B8%9A%E5%8A%A1%E7%BB%84%E4%BB%B6%EF%BC%89%E4%B8%8E%E7%BB%84%E4%BB%B6%E4%BC%A0%E5%80%BC/"/>
    <id>http://example.com/2024/11/04/WeChatMini/xcx-%E5%B0%81%E8%A3%85%E6%97%A5%E5%8E%86%E7%BB%84%E4%BB%B6%EF%BC%88%E4%B8%9A%E5%8A%A1%E7%BB%84%E4%BB%B6%EF%BC%89%E4%B8%8E%E7%BB%84%E4%BB%B6%E4%BC%A0%E5%80%BC/</id>
    <published>2024-11-04T01:57:31.952Z</published>
    <updated>2024-11-08T04:06:48.252Z</updated>
    
    <content type="html"><![CDATA[<h2 id="封装日历组件"><a href="#封装日历组件" class="headerlink" title="封装日历组件"></a>封装日历组件</h2><blockquote><p>基于封装日历组件，学会封装业务组件到使用的流程</p></blockquote><ol><li>新建baseCalendar文件夹(具体步骤👉<a href="/2024/11/04/WeChatMini/xcx-%E4%BA%8C%E6%AC%A1%E5%B0%81%E8%A3%85%E7%BB%84%E4%BB%B6%E5%92%8C%E8%87%AA%E5%AE%9A%E4%B9%89%E7%BB%84%E4%BB%B6/" title="微信小程序-二次封装组件和自定义组件">微信小程序-二次封装组件和自定义组件</a>)</li><li>在该文件夹下的json文件中添加<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;component&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;styleIsolation&quot;</span><span class="punctuation">:</span> <span class="string">&quot;shared&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;usingComponents&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;van-calendar&quot;</span><span class="punctuation">:</span> <span class="string">&quot;@vant/weapp/calendar/index&quot;</span> <span class="comment">// 要封装组件的路径</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li><li>从原组件的js文件中将props中需要的内容复制到封装组件的js文件中的properties中</li><li>在封装组件的wxml文件下使用原组件和添加插槽</li><li>在<code>app.json</code>中的<code>usingComponents</code>定义的封装组件标签名和路径</li><li>页面通过使用封装组件的标签来使用原组件加自定义的方法和样式</li><li>更改组件的样式，通过官方的文档找到对应组件的样式和属性进行更改</li></ol><h2 id="组件的传值"><a href="#组件的传值" class="headerlink" title="组件的传值"></a>组件的传值</h2><h3 id="页面使用"><a href="#页面使用" class="headerlink" title="页面使用"></a>页面使用</h3><ul><li>如：页面中的组件要使用这个属性或方法<code>minDate=&quot;&#123;&#123; minTimestamp &#125;&#125;&quot;</code></li></ul><h3 id="页面数据初始化"><a href="#页面数据初始化" class="headerlink" title="页面数据初始化"></a>页面数据初始化</h3><ul><li>在页面的js文件中的data定义一个初始值<code>minTimestamp: 0</code></li></ul><h3 id="组件类型初始化"><a href="#组件类型初始化" class="headerlink" title="组件类型初始化"></a>组件类型初始化</h3><ul><li>在组件的js文件的<code>properties</code>中写上属性名及其类型,两种写法<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">方式一：<span class="attr">minDate</span>: <span class="title class_">Number</span></span><br><span class="line">方式二：<span class="attr">minDate</span>:&#123;</span><br><span class="line">  <span class="attr">type</span>: <span class="title class_">Number</span>,</span><br><span class="line">  <span class="attr">value</span>: <span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="组件使用"><a href="#组件使用" class="headerlink" title="组件使用"></a>组件使用</h3><ul><li>组件页面中也要使用到<code>minDate=&quot;&#123;&#123; minDate &#125;&#125;&quot;</code></li></ul><h3 id="页面更改—完成传值（简单类型）"><a href="#页面更改—完成传值（简单类型）" class="headerlink" title="页面更改—完成传值（简单类型）"></a>页面更改—完成传值（简单类型）</h3><ul><li>页面js文件就可以通过函数方法去更改minTimestamp的值，来更新数据</li></ul><h2 id="调接口获取数据后-页面向组件传值（以动态显示该日期是否约满为例）"><a href="#调接口获取数据后-页面向组件传值（以动态显示该日期是否约满为例）" class="headerlink" title="调接口获取数据后 页面向组件传值（以动态显示该日期是否约满为例）"></a>调接口获取数据后 页面向组件传值（以动态显示该日期是否约满为例）</h2><h3 id="页面引入api文件，"><a href="#页面引入api文件，" class="headerlink" title="页面引入api文件，"></a>页面引入api文件，</h3><ul><li>发请求，获取约满的数据，data中要初始化一下<code>fullTimes: []</code><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="title function_">getFullTimes</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> result = <span class="keyword">await</span> <span class="variable constant_">API</span>.<span class="title function_">getFullTimes</span>()</span><br><span class="line"><span class="variable language_">this</span>.<span class="title function_">setData</span>(&#123;</span><br><span class="line">    <span class="attr">fullTimes</span>: result.<span class="property">result</span>.<span class="property">list</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="页面初始化"><a href="#页面初始化" class="headerlink" title="页面初始化"></a>页面初始化</h3><ul><li>在onLoad()中调用初始化：<code>onLoad() &#123;this.getFullTimes()&#125;</code></li></ul><h3 id="页面组件的使用"><a href="#页面组件的使用" class="headerlink" title="页面组件的使用"></a>页面组件的使用</h3><ul><li>页面的组件中使用这个属性或方法<code>fullTimes=&quot;&#123;&#123; fullTimes &#125;&#125;&quot;</code></li></ul><h3 id="自定义组件中使用"><a href="#自定义组件中使用" class="headerlink" title="自定义组件中使用"></a>自定义组件中使用</h3><ul><li>在自定义组件js文件中的<code>properties</code>中写上属性名及其类型<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">fullTimes</span>: &#123;</span><br><span class="line">  <span class="attr">type</span>: <span class="title class_">Array</span>,</span><br><span class="line">  <span class="attr">value</span>: [],</span><br><span class="line">  <span class="comment">// 监听这边是否接收到fullTimes，有数据才初始化，防止二次初始化</span></span><br><span class="line">  <span class="title function_">observer</span>(<span class="params">newFullTimes</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (newFullTimes.<span class="property">length</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">initCalendarDateFormat</span>()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>组件wxml文件也要使用到这个<code>formatter=&quot;&#123;&#123; formatter &#125;&#125;&quot;</code></li><li>在组件的js文件中的data初始化<code>formatter: null</code></li></ul><h3 id="自定义组件中初始化日历的状态"><a href="#自定义组件中初始化日历的状态" class="headerlink" title="自定义组件中初始化日历的状态"></a>自定义组件中初始化日历的状态</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">methods：&#123;</span><br><span class="line">  <span class="title function_">initCalendarDateFormat</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> fullTimes = <span class="variable language_">this</span>.<span class="property">data</span>.<span class="property">fullTimes</span></span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">formatter</span> = (<span class="params">day</span>) =&gt; &#123;</span><br><span class="line">      <span class="comment">// 此处使用了封装的函数</span></span><br><span class="line">      <span class="keyword">const</span> today = <span class="title function_">isTodday</span>(<span class="title class_">Date</span>.<span class="title function_">now</span>(), day.<span class="property">date</span>.<span class="title function_">valueOf</span>())</span><br><span class="line">      <span class="comment">// includes() 方法:判断fullTimes是否包含一个day.date.valueOf()值</span></span><br><span class="line">      <span class="keyword">if</span> (fullTimes.<span class="title function_">includes</span>(day.<span class="property">date</span>.<span class="title function_">valueOf</span>())) &#123;</span><br><span class="line">        day.<span class="property">type</span> = <span class="string">&#x27;disabled&#x27;</span></span><br><span class="line">        day.<span class="property">bottomInfo</span> = <span class="string">&#x27;约满&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (today) &#123;</span><br><span class="line">        day.<span class="property">type</span> = <span class="string">&#x27;disabled&#x27;</span></span><br><span class="line">        day.<span class="property">bottomInfo</span> = <span class="string">&#x27;今天&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> day</span><br><span class="line">    &#125;</span><br><span class="line">        </span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setData</span>(&#123;</span><br><span class="line">      formatter</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="自定义组件的生命周期的lifetimes中的ready再次初始化-—-完成传值（复杂类型）"><a href="#自定义组件的生命周期的lifetimes中的ready再次初始化-—-完成传值（复杂类型）" class="headerlink" title="自定义组件的生命周期的lifetimes中的ready再次初始化 — 完成传值（复杂类型）"></a>自定义组件的生命周期的lifetimes中的ready再次初始化 — 完成传值（复杂类型）</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;封装日历组件&quot;&gt;&lt;a href=&quot;#封装日历组件&quot; class=&quot;headerlink&quot; title=&quot;封装日历组件&quot;&gt;&lt;/a&gt;封装日历组件&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;基于封装日历组件，学会封装业务组件到使用的流程&lt;/p&gt;
&lt;/blockquote&gt;</summary>
      
    
    
    
    <category term="微信小程序" scheme="http://example.com/categories/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
    
    <category term="组件封装" scheme="http://example.com/tags/%E7%BB%84%E4%BB%B6%E5%B0%81%E8%A3%85/"/>
    
  </entry>
  
  <entry>
    <title>微信小程序-二次封装组件和自定义组件</title>
    <link href="http://example.com/2024/11/04/WeChatMini/xcx-%E4%BA%8C%E6%AC%A1%E5%B0%81%E8%A3%85%E7%BB%84%E4%BB%B6%E5%92%8C%E8%87%AA%E5%AE%9A%E4%B9%89%E7%BB%84%E4%BB%B6/"/>
    <id>http://example.com/2024/11/04/WeChatMini/xcx-%E4%BA%8C%E6%AC%A1%E5%B0%81%E8%A3%85%E7%BB%84%E4%BB%B6%E5%92%8C%E8%87%AA%E5%AE%9A%E4%B9%89%E7%BB%84%E4%BB%B6/</id>
    <published>2024-11-04T01:57:31.932Z</published>
    <updated>2024-11-05T03:43:58.126Z</updated>
    
    <content type="html"><![CDATA[<h2 id="npm-二次封装基础组件"><a href="#npm-二次封装基础组件" class="headerlink" title="npm&#x2F;二次封装基础组件"></a>npm&#x2F;二次封装基础组件</h2><h3 id="安装npm"><a href="#安装npm" class="headerlink" title="安装npm"></a>安装npm</h3><ol><li>进入小程序根目录，运行 cmd ，输入：npm init</li><li>输入命令之后一直点回车。</li><li>输入安装的组件命令：</li><li>执行命令完之后，再去微信开发者中点工具-构建npm，就成功了。</li></ol><h3 id="使用Vant-Weapp组件库"><a href="#使用Vant-Weapp组件库" class="headerlink" title="使用Vant Weapp组件库"></a>使用Vant Weapp组件库</h3><ol><li>进入官网<code>https://vant-ui.github.io/vant-weapp/#/home</code></li><li>按照官网的介绍选择对应的工具安装，npm使用前四步就行</li></ol><h3 id="二次封装组件"><a href="#二次封装组件" class="headerlink" title="二次封装组件"></a>二次封装组件</h3><ol><li>新建一个components文件夹</li><li>在components文件夹下在新建一个文件夹base，用来存放基础组件</li><li>如果是存放业务组件用business，看component文件夹的位置决定组件是全局还是局部</li><li>在base中新建文件夹a用来封装组件(原生小程序里面有4-5个文件,后缀分别为json,js,wxml,wxss,ts),</li><li>把要封装的组件路径和名字以键值对的形式存放在json文件的<code>usingComponents</code><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;usingComponents&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;van-button&quot;</span>: <span class="string">&quot;@vant/weapp/button/index&quot;</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li><li>将封装的组件路径和名字写在对应文件的app.json中的<code>usingComponents</code>中(名字最好与文件名一样，但要采用aa-bbb的形式)</li><li><code>从原来</code>组件的js文件下将<code>props</code>中的内容<code>复制到封装的组件</code>的js文件中的<code>properties</code>中</li><li>在封装的组件的wxml文件下写原来组件的组件名及它的方法和插槽，以vant的button为例<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;van-button</span><br><span class="line">  type=<span class="string">&quot;&#123;&#123; type &#125;&#125;&quot;</span></span><br><span class="line">  formType=<span class="string">&quot;&#123;&#123; formType &#125;&#125;&quot;</span></span><br><span class="line">  round=<span class="string">&quot;&#123;&#123; round &#125;&#125;&quot;</span></span><br><span class="line">  loading=<span class="string">&quot;&#123;&#123; loading &#125;&#125;&quot;</span></span><br><span class="line">  loading-text=<span class="string">&quot;&#123;&#123; loadingText &#125;&#125;&quot;</span></span><br><span class="line">  icon=<span class="string">&quot;&#123;&#123; icon &#125;&#125;&quot;</span></span><br><span class="line">&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">slot</span> /&gt;</span></span></span><br><span class="line">&lt;/van-button&gt;</span><br></pre></td></tr></table></figure></li><li>要想让组件的样式页面可以使用 ——默认组件样式隔离</li></ol><ul><li>在二次封装的组件的json文件下加上<code>&quot;styleIsolation&quot;: &quot;shared&quot;</code>和<code>&quot;component&quot;: true</code></li></ul><ol start="10"><li>更改组件的样式，可以在app.wxss中更改，常用的样式可以封装起来，使用时var(样式名)</li></ol><h3 id="自定义组件"><a href="#自定义组件" class="headerlink" title="自定义组件"></a>自定义组件</h3><ol><li>按照模板将存放自定义组件的文件夹及其内容生成后</li><li>如果是局部使用：就在对应的页面的json的<code>usingComponents</code>中加上 “组件名”: “组件路径”（组件名可自定义）</li><li>如果是全局使用的：就在app.json中加上</li><li>页面使用对应的组件名作为标签，显示组件内容</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;npm-二次封装基础组件&quot;&gt;&lt;a href=&quot;#npm-二次封装基础组件&quot; class=&quot;headerlink&quot; title=&quot;npm&amp;#x2F;二次封装基础组件&quot;&gt;&lt;/a&gt;npm&amp;#x2F;二次封装基础组件&lt;/h2&gt;&lt;h3 id=&quot;安装npm&quot;&gt;&lt;a href=</summary>
      
    
    
    
    <category term="微信小程序" scheme="http://example.com/categories/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
    
    <category term="组件封装" scheme="http://example.com/tags/%E7%BB%84%E4%BB%B6%E5%B0%81%E8%A3%85/"/>
    
  </entry>
  
  <entry>
    <title>微信小程序-动态展示图片，高度不一致</title>
    <link href="http://example.com/2024/11/04/WeChatMini/xcx-%E5%A4%9A%E4%B8%AA%E6%9C%AC%E5%9C%B0%E5%9B%BE%E7%89%87%E9%AB%98%E5%BA%A6%E4%B8%8D%E5%90%8C%EF%BC%8C%E8%8E%B7%E5%8F%96%E6%9C%80%E9%AB%98%E7%9A%84%E9%AB%98%E5%BA%A6%E5%B1%95%E7%A4%BA/"/>
    <id>http://example.com/2024/11/04/WeChatMini/xcx-%E5%A4%9A%E4%B8%AA%E6%9C%AC%E5%9C%B0%E5%9B%BE%E7%89%87%E9%AB%98%E5%BA%A6%E4%B8%8D%E5%90%8C%EF%BC%8C%E8%8E%B7%E5%8F%96%E6%9C%80%E9%AB%98%E7%9A%84%E9%AB%98%E5%BA%A6%E5%B1%95%E7%A4%BA/</id>
    <published>2024-11-04T01:57:31.917Z</published>
    <updated>2024-11-22T04:05:14.331Z</updated>
    
    <content type="html"><![CDATA[<style>.en{  color: #3D82AC;  font-weight:600;}</style><h2 id="获取最高的高度展示"><a href="#获取最高的高度展示" class="headerlink" title="获取最高的高度展示"></a>获取最高的高度展示</h2><ul><li>1.先使用swiper组件将图片的框架搭建好(使用<code>&lt;image/&gt;</code>标签最好加个<span class="en"><code>mode =&quot;widthFix&quot;</code></span>)</li><li><h3 id="如果图片是动态生成的的，按以下步骤走"><a href="#如果图片是动态生成的的，按以下步骤走" class="headerlink" title="如果图片是动态生成的的，按以下步骤走"></a>如果图片是动态生成的的，按以下步骤走</h3><ul><li>2.由于高度不一致，需通过<span class="en"><code>wx.createSelectorQuery()</code></span>获取每一张图片的属性（重点是高度）</li><li>3.因为框架初始要渲染，所以将代码写在<code>onReady</code>钩子里面</li><li>4.定义一个存放图片节点的空数组，因为要全局使用，需放在<code>page</code>上方</li><li>5.要获取图片存储的选择器，获取图片的属性(id 选择器是一对一，类选择器是选全部)</li><li>6.<code>swiper</code>本身有一个<code>current</code>属性，需在<code>data</code>中初始化</li><li>7.定义一个数组，将获取到的图片节点信息<code>res[0]</code>存放在里面，为防止报错最好 <span class="en">|| 初始值（数组[],对象 null）</span></li><li>8.<code>current</code> 要动态获取</li><li>9.判断是否有图片，有的话就将定义的数组赋值给图片节点存放的数组</li><li>10.获取到图片的高度，首先要在<code>data</code>初始化，然后然后动态传递给初始化变量</li><li>11.查看显示的长度是否异常（从执行的函数开始往下找）</li><li>12.异步，使用延时器加载</li></ul></li><li><h3 id="图片非动态的直接使用css样式和mode来控制"><a href="#图片非动态的直接使用css样式和mode来控制" class="headerlink" title="图片非动态的直接使用css样式和mode来控制"></a>图片非动态的直接使用css样式和mode来控制</h3></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;style&gt;
.en{
  color: #3D82AC;
  font-weight:600;
}
&lt;/style&gt;

&lt;h2 id=&quot;获取最高的高度展示&quot;&gt;&lt;a href=&quot;#获取最高的高度展示&quot; class=&quot;headerlink&quot; title=&quot;获取最高的高度展示&quot;&gt;&lt;</summary>
      
    
    
    
    <category term="微信小程序" scheme="http://example.com/categories/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
    
    <category term="image" scheme="http://example.com/tags/image/"/>
    
  </entry>
  
  <entry>
    <title>微信小程序-sku算法</title>
    <link href="http://example.com/2024/11/04/WeChatMini/sku/"/>
    <id>http://example.com/2024/11/04/WeChatMini/sku/</id>
    <published>2024-11-04T01:57:31.900Z</published>
    <updated>2024-11-08T06:25:46.207Z</updated>
    
    <content type="html"><![CDATA[<h2 id="电商通用的选择该商品规格算法（sku最小存货）"><a href="#电商通用的选择该商品规格算法（sku最小存货）" class="headerlink" title="电商通用的选择该商品规格算法（sku最小存货）"></a>电商通用的选择该商品规格算法（sku最小存货）</h2><blockquote><ul><li>sku是会计学中的一个名词，被称为库存单元，即每一个但规格选项就是一个sku。</li><li>商品和sku属于一对多的关系</li></ul></blockquote><h3 id="要求"><a href="#要求" class="headerlink" title="要求"></a>要求</h3><ul><li>没有库存的置灰</li><li>同一类别切换时，图片也要跟着切 — 这个看返回的数据结构图片在哪在思考，在点击选项时处理(示例省略)</li><li>默认不选的话给默认图(如果是有进来就要有图片的情况)，没有的默认选择每个类别的第一个规格</li></ul><h3 id="返回的数据结构"><a href="#返回的数据结构" class="headerlink" title="返回的数据结构"></a>返回的数据结构</h3><ul><li>有两种数据结构<ul><li>第一种：已经分配好的选项+库存，如果没有用笛卡尔乘积算法处理，一般会有</li><li>第二种：类别和它的子选项，没有需要自己处理，一般会有</li></ul></li></ul><h2 id="实现思路一"><a href="#实现思路一" class="headerlink" title="实现思路一  "></a>实现思路一  <!--/p_four/component/skuAlogorithm.tsx  --></h2><h3 id="1-默认进来不选"><a href="#1-默认进来不选" class="headerlink" title="1.默认进来不选"></a>1.默认进来不选</h3><h3 id="2-初始化数据：先处理后台返回的数据，初始化到一个数组skuMap中"><a href="#2-初始化数据：先处理后台返回的数据，初始化到一个数组skuMap中" class="headerlink" title="2.初始化数据：先处理后台返回的数据，初始化到一个数组skuMap中"></a>2.初始化数据：先处理后台返回的数据，初始化到一个数组skuMap中</h3><ul><li>skuMap的数据结构示例<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">skuMap = [&#123;</span><br><span class="line"><span class="attr">title</span>: 颜色, --- 大类别</span><br><span class="line"><span class="attr">check</span>: -<span class="number">1</span>, --- 类别选中的item索引</span><br><span class="line"><span class="attr">sub</span>: [&#123;</span><br><span class="line"><span class="attr">name</span>: 绿色,--- 大类别下的item名称</span><br><span class="line"><span class="attr">disabled</span>: <span class="literal">false</span>, 对应item的置灰情况</span><br><span class="line">&#125;]</span><br><span class="line">&#125;]</span><br></pre></td></tr></table></figure></li></ul><h3 id="3-页面的加载：处理数组的过程让页面加载，数组处理完成再显示页面"><a href="#3-页面的加载：处理数组的过程让页面加载，数组处理完成再显示页面" class="headerlink" title="3.页面的加载：处理数组的过程让页面加载，数组处理完成再显示页面"></a>3.页面的加载：处理数组的过程让页面加载，数组处理完成再显示页面</h3><h3 id="4-初始化库存stock，默认为0"><a href="#4-初始化库存stock，默认为0" class="headerlink" title="4.初始化库存stock，默认为0"></a>4.初始化库存stock，默认为0</h3><h3 id="5-列举规格组合：写一个函数groupSku将所有可排列的规格一一列举出来，包括库存"><a href="#5-列举规格组合：写一个函数groupSku将所有可排列的规格一一列举出来，包括库存" class="headerlink" title="5.列举规格组合：写一个函数groupSku将所有可排列的规格一一列举出来，包括库存"></a>5.列举规格组合：写一个函数groupSku将所有可排列的规格一一列举出来，包括库存</h3><ul><li>groupSku的数据结构示例<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">[<span class="string">&quot;绿色&quot;</span>，<span class="string">&quot;xl&quot;</span>,<span class="string">&quot;7天内发货&quot;</span>, <span class="number">23</span>]</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li></ul><h3 id="6-处理点击当前选项函数handleCurrentChose：点击该规格的时候需要传递外层索引，内层索引和内层名称"><a href="#6-处理点击当前选项函数handleCurrentChose：点击该规格的时候需要传递外层索引，内层索引和内层名称" class="headerlink" title="6.处理点击当前选项函数handleCurrentChose：点击该规格的时候需要传递外层索引，内层索引和内层名称"></a>6.处理点击当前选项函数handleCurrentChose：点击该规格的时候需要传递外层索引，内层索引和内层名称</h3><ul><li>选项置灰处理：当前选项置灰时，同一大类初始化不选中并返回</li><li>同一大类的选项切换判断：直接修改check值</li><li>判断当前选项无库存的组合元素，并把对应的名称置灰</li><li>判断是否选择完毕：查看每一个大类的check是否都不为-1</li><li>选择完毕则通过groupSku找到对应组合获取最后一个选项库存并设置库存</li></ul><h3 id="7-获取当前选项置灰的元素："><a href="#7-获取当前选项置灰的元素：" class="headerlink" title="7.获取当前选项置灰的元素："></a>7.获取当前选项置灰的元素：</h3><ul><li>先找到groupSku中所有库存为0且包含当前元素名称的组合noStockList</li><li>初始化置灰元素列表</li><li>遍历noStockList，去重并去除当前元素名称，最后其余元素存储到置灰元素列表中</li><li>最后返回这个列表</li></ul><h2 id="实现思路二优化"><a href="#实现思路二优化" class="headerlink" title="实现思路二优化 "></a>实现思路二优化 <!-- p_two/src/pages/sku/sku.tsx --></h2><blockquote><p>已知两种数据结构，先把规格的结构处理了，展示在页面上，分配好的选项+库存不处理(其实可以通过id定位会更方便，不过这里没有)</p></blockquote><h3 id="1-定义一个数组来存储处理好的规格"><a href="#1-定义一个数组来存储处理好的规格" class="headerlink" title="1.定义一个数组来存储处理好的规格"></a>1.定义一个数组来存储处理好的规格</h3><ul><li>由于处理好的结构是Qbject,所以遍历使用<code>Reflect.ownKeys(Object).map((key: string)=&gt; &#123;// 使用shop[key]拿到这个键的值&#125;)</code></li></ul><h3 id="2-由于定义的时候键为英文，而展示时是中文"><a href="#2-由于定义的时候键为英文，而展示时是中文" class="headerlink" title="2.由于定义的时候键为英文，而展示时是中文"></a>2.由于定义的时候键为英文，而展示时是中文</h3><ul><li>使用<code>枚举映射元组</code>的方法<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> shopMapTitle = &#123;</span><br><span class="line">  <span class="string">&#x27;colors&#x27;</span>: <span class="string">&#x27;颜色&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;sizes&#x27;</span>: <span class="string">&#x27;尺寸&#x27;</span>, </span><br><span class="line">  <span class="string">&#x27;styles&#x27;</span>: <span class="string">&#x27;款式&#x27;</span>, </span><br><span class="line">  <span class="string">&#x27;delivery&#x27;</span>: <span class="string">&#x27;配送方式&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">使用：shopMapTitle[key]</span><br></pre></td></tr></table></figure></li></ul><h3 id="3-选项要使用radio组件来实现"><a href="#3-选项要使用radio组件来实现" class="headerlink" title="3.选项要使用radio组件来实现"></a>3.选项要使用radio组件来实现</h3><ul><li>所以值的数组类型要根据radio的数据结构来定</li></ul><h3 id="4-处理点击函数"><a href="#4-处理点击函数" class="headerlink" title="4.处理点击函数"></a>4.处理点击函数</h3><ul><li>函数内部定义一个当前选项的Object，把选择的选项存储进去，然后在全局定义一个map</li><li>当点击选项的时候传递当前选项的类别和选项，使用map.set(<code>$&#123;类别&#125;</code>, 当前选项)获取选择的结果，并通过<code>Object.fromEntries(map)</code>将map转为对象<ul><li>如果需要Object转Array<code>使用Object.values(_selectListObj)</code></li></ul></li><li>点击时直接遍历分配好的选项+库存把四个选项对应的库存拿到，保险起见可以在判断库存</li></ul><h3 id="5-处理初始化"><a href="#5-处理初始化" class="headerlink" title="5.处理初始化"></a>5.处理初始化</h3><ul><li>初始化的时候要先把遍历规格的格式处理好</li><li>初始化置灰不可取，应该是选择一项后发现这一项的其它类别有库存为0 在置灰，点击其它恢复<ul><li>先把要判断的存到一个数组A，通过数组判断当前元素是否在这个数组A里，存在就将除这个类别的这一项item排除，其它数组A里的元素找到位置然后置灰，否则就全部不置灰</li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;电商通用的选择该商品规格算法（sku最小存货）&quot;&gt;&lt;a href=&quot;#电商通用的选择该商品规格算法（sku最小存货）&quot; class=&quot;headerlink&quot; title=&quot;电商通用的选择该商品规格算法（sku最小存货）&quot;&gt;&lt;/a&gt;电商通用的选择该商品规格算法（sk</summary>
      
    
    
    
    <category term="微信小程序" scheme="http://example.com/categories/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
    
    <category term="算法" scheme="http://example.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>微信小程序-动态tabbar(底部菜单)</title>
    <link href="http://example.com/2024/11/04/WeChatMini/xcx-%E5%8A%A8%E6%80%81tabbar/"/>
    <id>http://example.com/2024/11/04/WeChatMini/xcx-%E5%8A%A8%E6%80%81tabbar/</id>
    <published>2024-11-04T01:57:31.900Z</published>
    <updated>2024-11-22T04:05:14.331Z</updated>
    
    <content type="html"><![CDATA[<style>.en {  color: #3D82AC;  font-weight: 600;}</style><blockquote><p>测试和正式环境的 icon 配置不同，且一静一动，通过 api 的数据在静默登陆时去更改 tabbar 的 iconPath。更改的文件<span class="en">app.json 和 miniprogram\custom-tab-bar\index.ts</span></p></blockquote><h3 id="自定义-tabbar-步骤"><a href="#自定义-tabbar-步骤" class="headerlink" title="自定义 tabbar 步骤"></a>自定义 tabbar 步骤</h3><ol><li>首先 app.json 中 <span class="en">custom 设置为 true</span></li><li>根据微信开发文档在根目录创建 <span class="en">custom-tab-bar 文件夹</span>，写好自定义 tabbar 的样式</li><li>tabbar 跳转使用 <code>switchTab</code></li><li>在 ready 中初始化 tab 选择点击的交互行为</li><li>可以先把 tabbar 的几个页面名字存储到数组中，通过 some 判断，当当前页面路由的  <span class="en"><code>endsWith(tabbar 的名字)</code></span>存在，则用  <span class="en"><code>this.getTabBar().setData(&#123;selected: tabbar 的选中情况&#125;)</code></span></li><li>当前页面路由<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> pages = <span class="title function_">getCurrentPages</span>()</span><br><span class="line"><span class="keyword">const</span> length = pages.<span class="property">length</span> - <span class="number">1</span></span><br><span class="line"><span class="keyword">const</span> currentPageName = page[length - <span class="number">1</span>]?.<span class="property">route</span></span><br></pre></td></tr></table></figure></li><li>页面通过遍历自定义的 tabbar 数组，和 selected 来判断当前页面切换的路径和选择的图标</li></ol><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><ul><li><a href="https://juejin.cn/post/6844904110957789192">参考一：vant 有缺陷可参考</a></li><li><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/ability/custom-tabbar.html">官方文档</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;style&gt;
.en {
  color: #3D82AC;
  font-weight: 600;
}
&lt;/style&gt;

&lt;blockquote&gt;
&lt;p&gt;测试和正式环境的 icon 配置不同，且一静一动，通过 api 的数据在静默登陆时去更改 tabbar 的 iconPa</summary>
      
    
    
    
    <category term="微信小程序" scheme="http://example.com/categories/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
    
    <category term="tabbar" scheme="http://example.com/tags/tabbar/"/>
    
  </entry>
  
  <entry>
    <title>微信小程序-生成二维码scene问题</title>
    <link href="http://example.com/2024/11/04/WeChatMini/scene%E5%A4%AA%E9%95%BF%EF%BC%8C%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    <id>http://example.com/2024/11/04/WeChatMini/scene%E5%A4%AA%E9%95%BF%EF%BC%8C%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</id>
    <published>2024-11-04T01:57:31.884Z</published>
    <updated>2024-11-22T04:05:14.331Z</updated>
    
    <content type="html"><![CDATA[<style>.en {  color: #3D82AC;  font-weight:600;}</style><h2 id="问题：scene-太长-参数少但长-，生成不了小程序码"><a href="#问题：scene-太长-参数少但长-，生成不了小程序码" class="headerlink" title="问题：scene 太长(参数少但长)，生成不了小程序码"></a>问题：scene 太长(参数少但长)，生成不了小程序码</h2><h3 id="原因："><a href="#原因：" class="headerlink" title="原因："></a>原因：</h3><ul><li>使用getUnlimitedQRCode获取无限制的小程序码时，可接受页面参数scene的长度不能超过32位字符</li></ul><h3 id="了解BigInt"><a href="#了解BigInt" class="headerlink" title="了解BigInt"></a>了解BigInt</h3><ul><li>JS 中的 NUmber 类型只能安全地表示-(2^53-1)和(2^53-1)之间的整数</li><li>任何超过这个范围的整数值都会丢失精度（四舍五入）</li><li>而使用<code>BigInt</code>就<code>不会丢失精度</code>，可以运算大整数</li></ul><h3 id="使用-JSBI-插件"><a href="#使用-JSBI-插件" class="headerlink" title="使用 JSBI 插件"></a><a href="https://github.com/GoogleChromeLabs/jsbi">使用 JSBI 插件</a></h3><ul><li>安装：<span class="en">npm install jsbi –save</span></li><li>用法：<span class="en">JSBI.BigInt()</span></li></ul><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><ul><li>1.先把scene的<code>每个参数</code>用<code>JSBI.BigInt()</code>包裹住，防止在转格式的时候丢失精度</li><li>2.然后调用<span class="en"><code>.toString(36)</code></span>转为36进制<ul><li>因为scene为32位的十进制，所以先转为36进制的.如果不满足可以考虑其他进制</li></ul></li><li>3.然后使用<span class="en"><code>encodeURIComponent()</code></span>,生成二维码</li><li>4.按照分隔符解码和解构赋值得到参数：<ul><li><span class="en"><code>[a,b,c,d] = decodeURIComponent(params.scene).split(&#39;;&#39;)</code></span>, </li><li>此时拿到的参数是36进制的还要再转回十进制</li></ul></li><li>5.转为十进制即可</li></ul><h3 id="相关文档"><a href="#相关文档" class="headerlink" title="相关文档"></a>相关文档</h3><ul><li><a href="https://developers.weixin.qq.com/miniprogram/dev/OpenApiDoc/qrcode-link/qr-code/getUnlimitedQRCode.html">获取不限制的小程序码</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;style&gt;
.en {
  color: #3D82AC;
  font-weight:600;
}
&lt;/style&gt;

&lt;h2 id=&quot;问题：scene-太长-参数少但长-，生成不了小程序码&quot;&gt;&lt;a href=&quot;#问题：scene-太长-参数少但长-，生成不了小程序码&quot; c</summary>
      
    
    
    
    <category term="微信小程序" scheme="http://example.com/categories/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
    
    <category term="二维码" scheme="http://example.com/tags/%E4%BA%8C%E7%BB%B4%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>微信小程序-H5相关问题</title>
    <link href="http://example.com/2024/11/04/WeChatMini/h5%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/"/>
    <id>http://example.com/2024/11/04/WeChatMini/h5%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/</id>
    <published>2024-11-04T01:57:31.867Z</published>
    <updated>2024-11-08T06:51:51.061Z</updated>
    
    <content type="html"><![CDATA[<h3 id="页面展示："><a href="#页面展示：" class="headerlink" title="页面展示："></a>页面展示：</h3><ul><li>使用<a href="https://developers.weixin.qq.com/miniprogram/dev/component/web-view.html">web-view 组件</a>包裹住</li></ul><h3 id="相关代码"><a href="#相关代码" class="headerlink" title="相关代码"></a>相关代码</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">wxml</span><br><span class="line">&lt;page-view isLoading=<span class="string">&quot;&#123;&#123;true&#125;&#125;&quot;</span>&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">web-view</span> <span class="attr">src</span>=<span class="string">&quot;url&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">web-view</span>&gt;</span></span></span><br><span class="line">&lt;/page-view&gt;</span><br><span class="line">ts</span><br><span class="line"><span class="title function_">onLoad</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> eventChannel = <span class="variable language_">this</span>.<span class="title function_">getOpenerEventChannel</span>()</span><br><span class="line">  eventChannel.<span class="title function_">once</span>(<span class="string">&#x27;webview&#x27;</span>,<span class="function">(<span class="params">url:string</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setData</span>(&#123;url&#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line">使用</span><br><span class="line"><span class="title function_">navigateTo</span>(&#123;</span><br><span class="line">  <span class="attr">url</span>:<span class="string">&#x27;webview的文件路径&#x27;</span>,</span><br><span class="line">  <span class="title function_">success</span>(<span class="params">res</span>)&#123;</span><br><span class="line">    res.<span class="property">eventChannel</span>.<span class="title function_">emit</span>(<span class="string">&#x27;webview&#x27;</span>, url)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="配置业务域名"><a href="#配置业务域名" class="headerlink" title="配置业务域名"></a>配置业务域名</h3><ul><li><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/ability/domain.html">如何配置业务域名的流程</a></li></ul><ol><li>管理员进入微信公众平台，找到开发管理添加业务域名</li><li>配置域名时先下载校验文件(ABC.txt)然后将文件放置在域名根目录下，后添加对应域名，如<code>https://test.com/</code></li><li><code>https://test.com/ABC.txt</code>确保可以访问，然后下载这个文件，上传服务器</li><li><a href="https://developers.weixin.qq.com/community/develop/doc/00084a350b426099ab46e0e1a50004?/blogdetail?action=get_post_info">业务域名设置–校验文件检查失败自查指引</a></li></ol><h3 id="访问公众号文章"><a href="#访问公众号文章" class="headerlink" title="访问公众号文章"></a>访问公众号文章</h3><ol><li>小程序要与公众号进行绑定</li><li>需要的是 https 请求</li><li>如果配置的是公众号文章地址，不需要额外配置业务域名</li><li>参数需要进行 encode 编码</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;页面展示：&quot;&gt;&lt;a href=&quot;#页面展示：&quot; class=&quot;headerlink&quot; title=&quot;页面展示：&quot;&gt;&lt;/a&gt;页面展示：&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;使用&lt;a href=&quot;https://developers.weixin.qq.com/miniprog</summary>
      
    
    
    
    <category term="微信小程序" scheme="http://example.com/categories/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
    
    <category term="h5" scheme="http://example.com/tags/h5/"/>
    
  </entry>
  
</feed>
