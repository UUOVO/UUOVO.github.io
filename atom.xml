<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2025-06-25T02:46:20.150Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>UUOVO</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>React-组件通信方式</title>
    <link href="http://example.com/2025/06/24/react/React-%E7%BB%84%E4%BB%B6%E9%80%9A%E4%BF%A1%E6%96%B9%E5%BC%8F/"/>
    <id>http://example.com/2025/06/24/react/React-%E7%BB%84%E4%BB%B6%E9%80%9A%E4%BF%A1%E6%96%B9%E5%BC%8F/</id>
    <published>2025-06-24T06:45:48.053Z</published>
    <updated>2025-06-25T02:46:20.150Z</updated>
    
    <content type="html"><![CDATA[<style>    .en {        color: green;        font-weight:600;    }    .desc {        color: #CD853F;        font-weight: 600;        font-size:14px;    }</style><h2 id="父组件向子组件-通过props传递"><a href="#父组件向子组件-通过props传递" class="headerlink" title="父组件向子组件(通过props传递)"></a>父组件向子组件(通过props传递)</h2><ul><li>父组件在子组件标签上通过子组件定义的事件或属性进行传递，子组件使用解构从props对象中拿到对应变量</li><li>示例：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 父组件</span></span><br><span class="line"><span class="keyword">const</span> parent = <span class="title function_">memo</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">return</span> (</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">Child</span> <span class="attr">title</span>=<span class="string">&quot;我是父组件传递给子组件的变量&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 子组件</span></span><br><span class="line">interface <span class="title class_">IChildProps</span> &#123;</span><br><span class="line"><span class="attr">title</span>: string</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Child</span> = memo&lt;<span class="title class_">IChildProps</span>&gt;(<span class="function">(<span class="params">props</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">const</span> &#123; title &#125; = props</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Child</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="子组件向父组件通信"><a href="#子组件向父组件通信" class="headerlink" title="子组件向父组件通信"></a>子组件向父组件通信</h2><ul><li>子组件定义事件，在事件中传递信息，父组件在子组件标签中通过箭头函数拿到参数<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 父组件</span></span><br><span class="line"><span class="keyword">const</span> parent = <span class="title function_">memo</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">receiveMessage</span> = (<span class="params">value: string</span>) =&gt; &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(value)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">Child</span> <span class="attr">sendMessage</span>=<span class="string">&#123;(value:string)</span> =&gt;</span> receiveMessage(value)&#125; /&gt;</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 子组件</span></span><br><span class="line">interface <span class="title class_">IChildProps</span> &#123;</span><br><span class="line"><span class="attr">sendMessage</span>: <span class="function">(<span class="params">value: string</span>) =&gt;</span> <span class="keyword">void</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Child</span> = memo&lt;<span class="title class_">IChildProps</span>&gt;(<span class="function">(<span class="params">props</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">const</span> &#123; sendMessage &#125; = props</span><br><span class="line"><span class="keyword">const</span> [title, setTitle] = <span class="title function_">useState</span>(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">handleClick</span> = (<span class="params"></span>) =&gt; <span class="title function_">sendMessage</span>(title)</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> (<span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> handleClick()&#125;&gt;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Child</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="跨级组件通信-useContext"><a href="#跨级组件通信-useContext" class="headerlink" title="跨级组件通信 useContext"></a>跨级组件通信 useContext</h2><ul><li>作用：全局传递数据，读取和订阅组件中的 context</li><li>参考：<a href="https://zh-hans.react.dev/reference/react/useContext">想了解useContext更多内容，点击查看</a></li><li>用法：</li></ul><ol><li><p>创建一个单独的文件来管理</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// store/context.tsx</span></span><br><span class="line"><span class="keyword">import</span> &#123; createContext &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title class_">ThemeContext</span> = <span class="title function_">createContext</span>(<span class="literal">false</span>)</span><br></pre></td></tr></table></figure></li><li><p>在顶级组件中使用Context.Provider来进行包裹，值通过value&#x3D;{}传递，包裹的内部组件都可以使用</p></li></ol><ul><li>示例：<ul><li>需求：这个ThemeContext会随着点击事件而改变，并且应用于全局</li><li>可以在App.tsx文件中使用，也可以在全局的布局组件中使用，这里在全局的布局组件中使用<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; memo, useState &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">ThemeContext</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@store/context&#x27;</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Layout</span> = <span class="title function_">memo</span>(<span class="function">(<span class="params">props</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">const</span> [theme, setTheme] = <span class="title function_">useState</span>(<span class="literal">false</span>)</span><br><span class="line"><span class="keyword">const</span> &#123; children &#125; = props</span><br><span class="line"><span class="keyword">const</span> sunMoon = <span class="title function_">classNames</span>(<span class="string">`<span class="subst">$&#123;theme</span></span></span><br><span class="line"><span class="subst"><span class="string">? <span class="string">&#x27;bg-primary text-black transition-all&#x27;</span></span></span></span><br><span class="line"><span class="subst"><span class="string">: <span class="string">&#x27;bg-black text-primary transition-all&#x27;</span>&#125;</span>`</span>)</span><br><span class="line"><span class="keyword">return</span> (</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">ThemeContext.Provider</span> <span class="attr">value</span>=<span class="string">&#123;theme&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span>  <span class="attr">className</span>=<span class="string">&#123;</span>`<span class="attr">imgBg</span> $&#123;<span class="attr">sunMoon</span>&#125;`&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">SideColumn</span> </span></span></span><br><span class="line"><span class="tag"><span class="language-xml"><span class="attr">changeWAB</span>=<span class="string">&#123;()</span>=&gt;</span> setTheme(!theme)&#125;</span></span><br><span class="line"><span class="language-xml">/&gt;</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;children&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">ThemeContext.Provider</span>&gt;</span></span></span><br><span class="line">)</span><br><span class="line">&#125;)</span><br><span class="line"> <span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Layout</span>;</span><br></pre></td></tr></table></figure></li></ul></li></ul><ol start="3"><li>子组件通过useContext()来拿到传递过来值，直接使用<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; memo, useState, useContext &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">ThemeContext</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@store/context&#x27;</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">SideColumn</span> = memo&lt;sideColumnProps&gt;(<span class="function">(<span class="params">props</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">const</span> theme = <span class="title function_">useContext</span>(<span class="title class_">ThemeContext</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ol><h2 id="非嵌套关系的组件通信"><a href="#非嵌套关系的组件通信" class="headerlink" title="非嵌套关系的组件通信"></a>非嵌套关系的组件通信</h2><ul><li>即没有任何包含关系的组件，包括兄弟组件以及不在同一个父级中的非兄弟组件。</li><li>可以使用自定义事件通信（发布订阅模式），使用pubsub-js</li><li>可以通过redux等进行全局状态管理</li><li>如果是兄弟组件通信，可以找到这两个兄弟节点共同的父节点, 结合父子间通信方式进行通信。</li><li>可以new一个 Vue 的 EventBus,进行事件监听，一边执行监听，一边执行新增 VUE的eventBus 就是发布订阅模式，是可以在React中使用的;</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;style&gt;
    .en {
        color: green;
        font-weight:600;
    }
    .desc {
        color: #CD853F;
        font-weight: 600;
       </summary>
      
    
    
    
    <category term="React" scheme="http://example.com/categories/React/"/>
    
    
    <category term="React" scheme="http://example.com/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>React-协调算法|背后的核心算法React Fiber</title>
    <link href="http://example.com/2025/06/18/react/react-fiber/"/>
    <id>http://example.com/2025/06/18/react/react-fiber/</id>
    <published>2025-06-18T08:08:22.679Z</published>
    <updated>2025-06-30T07:22:50.632Z</updated>
    
    <content type="html"><![CDATA[<style>    .en {        color: green;        font-weight: 600;    }    .desc {        color: #CD853F;        font-size:14px;    }</style><ul><li>React 核心机制是跟踪组件的状态变化，并将更新的状态映射到新的界面，这个过程称为协调。</li><li>React Fiber 是React核心算法的一次重新实现</li></ul><h2 id="从问题来理解为什么react需要Fiber"><a href="#从问题来理解为什么react需要Fiber" class="headerlink" title="从问题来理解为什么react需要Fiber"></a>从问题来理解为什么react需要Fiber</h2><h3 id="Q1：React的设计理念是构建快速响应的大型Web应用程序。-制约快速响应的因素？-—"><a href="#Q1：React的设计理念是构建快速响应的大型Web应用程序。-制约快速响应的因素？-—" class="headerlink" title="Q1：React的设计理念是构建快速响应的大型Web应用程序。 制约快速响应的因素？ —"></a>Q1：React的设计理念是构建快速响应的大型Web应用程序。 制约快速响应的因素？ —</h3><p><span class="desc">反应了算法不足</span></p><ul><li>CPU瓶颈：大量的同步计算任务阻塞了浏览器的UI渲染，造成页面卡顿。而 React 的 Reconcilation 是 CPU 密集型的操作，React 15使用的Virtual DOM协调算法<span class="desc">(因为它在内部使用堆栈也被称为堆栈协调器)</span>，共享一个协调器,可能会导致混淆。</li><li>IO的瓶颈：网络请求响应不及时，造成白屏</li></ul><h3 id="Q2：Vue3-动静结合的DOM-Diff-与-React的对比？-—-反映了编译时优化不足"><a href="#Q2：Vue3-动静结合的DOM-Diff-与-React的对比？-—-反映了编译时优化不足" class="headerlink" title="Q2：Vue3 动静结合的DOM Diff 与 React的对比？ — 反映了编译时优化不足"></a>Q2：Vue3 动静结合的DOM Diff 与 React的对比？ — <span class="desc">反映了编译时优化不足</span></h3><ul><li>Vue3的DOM Diff在预编译进行优化，在预编译阶段静态分析模版，分析出视图依赖了哪些数据，进行响应式处理。Template 模板是一种非常有约束的语言，你只能以某种方式去编写模板。</li><li>而React 是局部渲染，无法从模板层面进行静态分析。JSX 具有 JavaScript 的完整表现力，可以构建非常复杂的组件。但是灵活的语法，也意味着引擎难以理解，无法预判开发者的用户意图，从而难以优化性能。</li></ul><h2 id="React-架构"><a href="#React-架构" class="headerlink" title="React 架构"></a>React 架构</h2><ul><li>调度器(Scheduler)：调度任务优先级，高级任务优先进入协调器，不使用requestIdleCallback(兼容性不好)。</li><li>协调器(Reconciler)：负责找出更改的组件，更新工作从递归变成可以中断的循环过程。内部采用Fiber架构</li><li>渲染器(Renderer)：将变化的组件渲染到页面上</li></ul><p><a href="https://github.com/facebook/react/blob/v19.1.0/packages/scheduler/src/forks/Scheduler.js">源码地址</a></p><h3 id="调度器"><a href="#调度器" class="headerlink" title="调度器"></a>调度器</h3><ul><li>以浏览器是否有剩余时间作为任务中断的标准，当浏览器有剩余时间时通知我们。</li></ul><h3 id="协调器"><a href="#协调器" class="headerlink" title="协调器"></a>协调器</h3><ul><li>更新工作从15递归变成了16+可以中断的循环过程。每次循环都会调用shouldYield判断当前是否有剩余时间。</li><li>当Scheduler将任务交给Reconciler后，Reconciler会为变化的虚拟 DOM 打上代表增&#x2F;删&#x2F;更新的标记</li><li>整个Scheduler与Reconciler的工作都在内存中进行。只有当所有组件都完成Reconciler的工作，才会统一交给Renderer。</li></ul><h3 id="渲染器"><a href="#渲染器" class="headerlink" title="渲染器"></a>渲染器</h3><ul><li>根据Reconciler为虚拟 DOM 打的标记，同步执行对应的 DOM 操作</li></ul><h2 id="Fiber"><a href="#Fiber" class="headerlink" title="Fiber"></a>Fiber</h2><ul><li>本质是『虚拟DOM』。Fiber节点可以保存对应的DOM节点，Fiber节点构成的Fiber树就对应DOM树</li><li>从数据结构看，每个Fiber节点对应一个React Element，保存了该组件的类型(函数组件、类组件、原生组件)、对应的DOM节点等信息</li><li>从工作单元看，每个Fiber节点保存了本次更新中该组件改变的状态、要执行的工作（删除、插入、更新）</li></ul><h3 id="Fiber-树"><a href="#Fiber-树" class="headerlink" title="Fiber 树"></a>Fiber 树</h3><ul><li>特点：链表结构，将协调的『递归遍历』改为『循环遍历』</li><li>React 第一次渲染时，会通过 React.createElement 创建一颗 Element 树，可以称之为 Virtual DOM Tree，由于要记录上下文信息，加入了 Fiber，每一个 Element 会对应一个 Fiber Node，将 Fiber Node 链接起来的结构成为 Fiber Tree。</li><li>多个节点如何连接成树？<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">return</span> = <span class="literal">null</span>  <span class="comment">// 指向父Fiber节点</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">child</span> = <span class="literal">null</span>   <span class="comment">// 指向子Fiber节点</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">sibling</span> = <span class="literal">null</span> <span class="comment">// 指向右边第一个兄弟Fiber节点</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="Fiber-架构的工作原理"><a href="#Fiber-架构的工作原理" class="headerlink" title="Fiber 架构的工作原理"></a>Fiber 架构的工作原理</h2><ul><li>双缓存：在内存中构建并直接替换</li><li>双缓存树：在React中最多会同时存在两棵Fiber树。<ul><li>当前屏幕显示内容对应的Fiber树称为current Fiber树（即上次渲染构建的Fiber树）。</li><li>正在内存中构建的Fiber树称为workInProgress Fiber树。（<span class="en">无论是创建还是更新、挂起、恢复、终止操作都是发生在W树创建过程中。W树构建过程其实就是循环的执行任务和创建下一个任务。</span>）</li></ul></li></ul><h3 id="初次渲染的构建流程"><a href="#初次渲染的构建流程" class="headerlink" title="初次渲染的构建流程"></a>初次渲染的构建流程</h3><ol><li>创建阶段：首次执行ReactDOM.render 会创建 fiberRootNode（整个应用的根节点）和 rootFiber（<code>&lt;App /&gt;</code>所在组件树的根节点）。由于首屏渲染，页面没有挂载任何DOM，所以fiberRootNode.current指向的rootFiber没有任何子Fiber节点（即current Fiber树为空）。</li><li>render阶段：进入render阶段，根据组件返回的JSX载内存中一次创建Fiber节点并连接在一起构建Fiber树，被称为『workInProgress Fiber树』。在构建W树时会尝试复用C树中已有的Fiber节点内的属性。在首屏渲染时，只有rootFiber存在对应的current Fiber(即rootFiber.alternate)</li><li>commit阶段：进入commit阶段，已构建完的workInProgress Fiber树渲染到页面上</li></ol><h3 id="更新阶段的构建流程"><a href="#更新阶段的构建流程" class="headerlink" title="更新阶段的构建流程"></a>更新阶段的构建流程</h3><ol><li>开启新一轮的render阶段并构建新一颗W树。创建时复用C树的对应节点数据</li><li>已构建完的W树渲染到页面上。渲染完成W树变成C树。</li></ol><h3 id="JSX-Fiber节点"><a href="#JSX-Fiber节点" class="headerlink" title="JSX &amp; Fiber节点"></a>JSX &amp; Fiber节点</h3><ul><li>在组件mount时，Reconciler『根据JSX描述』的组件内容生成组件对应的『Fiber节点』。</li><li>在update时，Reconciler将JSX与Fiber节点保存的『数据对比』，生成组件对应的Fiber节点，并根据对比结果为Fiber节点打上标记。</li></ul><h2 id="React-Fiber-执行过程"><a href="#React-Fiber-执行过程" class="headerlink" title="React Fiber 执行过程"></a>React Fiber 执行过程</h2><h3 id="任务拆分"><a href="#任务拆分" class="headerlink" title="任务拆分"></a>任务拆分</h3><ul><li>在调和阶段递归遍历 VDOM 这个大任务分成若干小任务，每个任务只负责一个节点的处理。</li></ul><h3 id="任务挂起、恢复、终止"><a href="#任务挂起、恢复、终止" class="headerlink" title="任务挂起、恢复、终止"></a>任务挂起、恢复、终止</h3><ul><li>当当前分配的任务完成后，先判断这一帧是否还有空闲时间，没有就挂起下一个任务的执行，记住当前挂起的节点，让出控制权给浏览器执行更高优先级任务</li></ul><h3 id="任务恢复"><a href="#任务恢复" class="headerlink" title="任务恢复"></a>任务恢复</h3><ul><li>在浏览器渲染完一帧后，判断当前帧是否有剩余时间，如果有就恢复执行之前挂起的任务。如果没有任务需要处理，代表调和阶段完成，可以开始进入渲染阶段。</li><li>判断一帧是否用空闲时间，使用 RequestIdleCallback</li><li>恢复执行时通过链表获取下一个任务</li></ul><h3 id="任务终止"><a href="#任务终止" class="headerlink" title="任务终止"></a>任务终止</h3><ul><li>不是每次更新都会走到提交阶段。当在调和过程中触发了新的更新，在执行下一个任务的时候，判断是否有优先级更高的执行任务，如果有就终止原来将要执行的任务，开始新的 workInProgressFiber 树构建过程，开始新的更新流程。这样可以避免重复更新操作。这也是在 React 16 以后生命周期函数 componentWillMount 有可能会执行多次的原因。</li></ul><h3 id="任务具备优先级"><a href="#任务具备优先级" class="headerlink" title="任务具备优先级"></a>任务具备优先级</h3><ul><li>在任务执行过程中收集到的每个FiberNode的副作用，形成的副作用链表。到commit阶段时，直接遍历副作用链完成DOM更新。更新DOM的过程不可中断。</li><li>任务优先级有六种<ul><li>synchronous：与之前的堆栈协调器操作一样，同步执行</li><li>task：在next tick之前执行</li><li>animation：下一帧之前执行</li><li>high：在不久的将来立即执行</li><li>low：稍微延迟执行也没关系</li><li>offscreen：下一次render 或scroll 时执行</li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;style&gt;
    .en {
        color: green;
        font-weight: 600;
    }
    .desc {
        color: #CD853F;
        font-size:14px;
    }
&lt;/</summary>
      
    
    
    
    <category term="React" scheme="http://example.com/categories/React/"/>
    
    
    <category term="算法" scheme="http://example.com/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="React" scheme="http://example.com/tags/React/"/>
    
    <category term="React Fiber" scheme="http://example.com/tags/React-Fiber/"/>
    
  </entry>
  
  <entry>
    <title>7种强大的JavaScript继承技术</title>
    <link href="http://example.com/2025/03/19/JS/%E7%BB%A7%E6%89%BF%E6%8A%80%E6%9C%AF/"/>
    <id>http://example.com/2025/03/19/JS/%E7%BB%A7%E6%89%BF%E6%8A%80%E6%9C%AF/</id>
    <published>2025-03-19T02:56:54.768Z</published>
    <updated>2025-03-19T06:07:26.642Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-原型链继承"><a href="#1-原型链继承" class="headerlink" title="1. 原型链继承"></a>1. 原型链继承</h2><ul><li>最直接的继承方法之一</li><li>允许对象通过原型连接的”链”继承属性和方法</li><li>示例：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Animal</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">species</span> = <span class="string">&#x27;Mammal&#x27;</span>;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">habits</span> = [<span class="string">&#x27;sleep&#x27;</span>, <span class="string">&#x27;eat&#x27;</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Dog</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">breed</span> = <span class="string">&#x27;Bulldog&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Dog</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">Animal</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> d1 = <span class="keyword">new</span> <span class="title class_">Dog</span>();</span><br><span class="line"><span class="keyword">let</span> d2 = <span class="keyword">new</span> <span class="title class_">Dog</span>();</span><br><span class="line">d1.<span class="property">habits</span>.<span class="title function_">push</span>(<span class="string">&#x27;bark&#x27;</span>); <span class="comment">// 向Animal.habits添加了bark</span></span><br></pre></td></tr></table></figure></li><li>优点：设置简单，为子类提供所有父原型方法的访问权限</li><li>缺点：共享引用类型可能会导致副作用，为每个实例调用父对象的构造函数</li></ul><h2 id="2-构造函数继承"><a href="#2-构造函数继承" class="headerlink" title="2. 构造函数继承"></a>2. 构造函数继承</h2><ul><li>子对象通过在子构造函数中调用父对象的构造函数来继承属性</li><li>示例：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Animal</span>(<span class="params">species</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">species</span> = species;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">activities</span> = [];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Dog</span>(<span class="params">breed</span>) &#123;</span><br><span class="line">  <span class="title class_">Animal</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>, <span class="string">&#x27;Mammal&#x27;</span>); <span class="comment">// 给Dog中的父species赋值</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">breed</span> = breed;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> d = <span class="keyword">new</span> <span class="title class_">Dog</span>(<span class="string">&#x27;dog&#x27;</span>)</span><br></pre></td></tr></table></figure></li><li>优点：每个实例都有不同的属性，参数可以传递给父级</li><li>缺点：无法跨实例重用方法，从而导致冗余</li></ul><h2 id="3-复合继承"><a href="#3-复合继承" class="headerlink" title="3. 复合继承"></a>3. 复合继承</h2><ul><li>合并了原型链和构造函数继承，以便子类提供唯一属性和对父方法的访问</li><li>示例：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Animal</span>(<span class="params">species</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">species</span> = species;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">activities</span> = [];</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Animal</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">getSpecies</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123; <span class="comment">// 父方法</span></span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">species</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Dog</span>(<span class="params">breed</span>) &#123;</span><br><span class="line">  <span class="title class_">Animal</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>, <span class="string">&#x27;Mammal&#x27;</span>);</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">breed</span> = breed;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Dog</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">Animal</span>();</span><br><span class="line"><span class="title class_">Dog</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span> = <span class="title class_">Dog</span>;</span><br></pre></td></tr></table></figure></li><li>优点：子类有自己的属性和原型方法</li><li>缺点：父构造函数被调用两次，增加了开销</li></ul><h2 id="4-寄生继承"><a href="#4-寄生继承" class="headerlink" title="4. 寄生继承"></a>4. 寄生继承</h2><ul><li>创建、修改和返回对象，使继承变得灵活，但增加了复杂性</li><li>示例：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Animal</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">species</span> = <span class="string">&#x27;Mammal&#x27;</span>;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">habits</span> = [<span class="string">&#x27;eat&#x27;</span>, <span class="string">&#x27;sleep&#x27;</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Dog</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title class_">Animal</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>);</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">breed</span> = <span class="string">&#x27;Bulldog&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Dog</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="title class_">Animal</span>.<span class="property"><span class="keyword">prototype</span></span>);</span><br><span class="line"><span class="title class_">Dog</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span> = <span class="title class_">Dog</span>;</span><br></pre></td></tr></table></figure></li><li>优点：允许在克隆对象上使用原型扩展</li><li>缺点：不太适合大型继承结构</li></ul><h2 id="5-原型继承"><a href="#5-原型继承" class="headerlink" title="5. 原型继承"></a>5. 原型继承</h2><ul><li>Object.create()直接创建具有指定原型的对象</li><li>示例：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> animal = &#123;</span><br><span class="line">  <span class="attr">species</span>: <span class="string">&#x27;Mammal&#x27;</span>,</span><br><span class="line">  <span class="attr">traits</span>: [<span class="string">&#x27;warm-blooded&#x27;</span>, <span class="string">&#x27;vertebrate&#x27;</span>]</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createClone</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> clone = <span class="title class_">Object</span>.<span class="title function_">create</span>(obj);</span><br><span class="line">  clone.<span class="property">getTraits</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">traits</span>;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> clone;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> dog = <span class="title function_">createClone</span>(animal);</span><br></pre></td></tr></table></figure></li><li>优点：简单且不需要构造函数</li><li>缺点：所有实例共享 prototype 属性</li></ul><h2 id="6-寄生组合继承"><a href="#6-寄生组合继承" class="headerlink" title="6. 寄生组合继承"></a>6. 寄生组合继承</h2><ul><li>改进的复合继承，使用Object.create()</li><li>示例：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Animal</span>(<span class="params">species</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">species</span> = species;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">traits</span> = [];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Dog</span>(<span class="params">breed</span>) &#123;</span><br><span class="line">  <span class="title class_">Animal</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>, <span class="string">&#x27;Mammal&#x27;</span>);</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">breed</span> = breed;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Dog</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="title class_">Animal</span>.<span class="property"><span class="keyword">prototype</span></span>);</span><br><span class="line"><span class="title class_">Dog</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span> = <span class="title class_">Dog</span>;</span><br></pre></td></tr></table></figure></li><li>优点：解决 double 构造函数调用问题;保留综合效益</li><li>缺点：代码复杂性和需要额外的封装</li></ul><h2 id="7-ES6类继承"><a href="#7-ES6类继承" class="headerlink" title="7. ES6类继承"></a>7. ES6类继承</h2><ul><li>es6 中，在js中引入class语法</li><li>示例：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">species</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">species</span> = species;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">getSpecies</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">species</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Animal</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">breed</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(<span class="string">&#x27;Mammal&#x27;</span>);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">breed</span> = breed;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>优点：干净、可读的语法，类似于传统的 OOP</li><li>缺点：可能需要转译,与基于原型的方法相比，性能略有不同</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-原型链继承&quot;&gt;&lt;a href=&quot;#1-原型链继承&quot; class=&quot;headerlink&quot; title=&quot;1. 原型链继承&quot;&gt;&lt;/a&gt;1. 原型链继承&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;最直接的继承方法之一&lt;/li&gt;
&lt;li&gt;允许对象通过原型连接的”链”继承属性和方法&lt;</summary>
      
    
    
    
    <category term="JavaScript" scheme="http://example.com/categories/JavaScript/"/>
    
    
    <category term="JS" scheme="http://example.com/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>Solid</title>
    <link href="http://example.com/2025/03/19/Solid/%E5%88%9D%E8%AF%86/"/>
    <id>http://example.com/2025/03/19/Solid/%E5%88%9D%E8%AF%86/</id>
    <published>2025-03-19T02:06:58.733Z</published>
    <updated>2025-06-30T07:22:50.644Z</updated>
    
    <content type="html"><![CDATA[<style>    .en1 {        color: #3D82AC;        font-weight: 600;    }    .en {    color: green;        font-weight:600;  }  .desc {        color: #CD853F;        font-weight: 600;        font-size:14px;    }  .key {    color: #483D8B;    font-weight: 700;  }</style><h2 id="什么是-Solid？"><a href="#什么是-Solid？" class="headerlink" title="什么是 Solid？"></a>什么是 Solid？</h2><ul><li>一个 JavaScript 框架</li><li>局部更新，只更新改动的内容</li><li>当依赖的数据发生变化时更新</li><li>类似 react 语法</li></ul><h2 id="创建-Solid-应用程序"><a href="#创建-Solid-应用程序" class="headerlink" title="创建 Solid 应用程序"></a>创建 Solid 应用程序</h2><ul><li>前提： 安装 Node.js 或 Deno</li><li>创建：<ul><li>JS版：<span class="en">pnpm dlx degit solidjs&#x2F;templates&#x2F;js my-app</span></li><li>TS版：<span class="en">pnpm dlx degit solidjs&#x2F;templates&#x2F;ts my-app</span></li></ul></li><li>导航：<span class="en">cd my-app</span></li><li>安装：<span class="en">pnpm install</span></li><li>运行：<span class="en">pnpm run dev</span></li></ul><h2 id="反应性"><a href="#反应性" class="headerlink" title="反应性"></a>反应性</h2><ul><li>含义：系统<span class="en1">自动响应</span>数据或状态变化的能力，确保应用程序与底层数据<span class="en1">保持同步</span></li><li>示例：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Counter</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = <span class="title function_">createSignal</span>(<span class="number">0</span>)</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">increment</span> = (<span class="params"></span>) =&gt; <span class="title function_">setCount</span>(<span class="function">(<span class="params">prev</span>) =&gt;</span> prev + <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">span</span>&gt;</span>Count: &#123;count()&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span>&#123;&#x27; &#x27;&#125;</span></span><br><span class="line"><span class="language-xml">      &#123;/* 仅单击按钮时调用increment改变count，不刷新整个组件 */&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">type</span>=<span class="string">&#x27;button&#x27;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">onClick</span>=<span class="string">&#123;increment&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      &gt;</span></span></span><br><span class="line"><span class="language-xml">        Increment</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>可以看到跟 react hook 的相似处<ul><li>createSignal() &#x3D;&#x3D;&gt; useState()</li><li>count() &#x3D;&#x3D;&gt; count</li></ul></li></ul><h2 id="反应原理"><a href="#反应原理" class="headerlink" title="反应原理"></a>反应原理</h2><h3 id="信号-Signals"><a href="#信号-Signals" class="headerlink" title="信号 Signals"></a>信号 Signals</h3><ul><li>反应式系统的核心元素，在数据管理和系统响应能力中发挥着重要作用。</li><li>由两个主要功能组成：<ul><li><span class="en">getter</span>：访问存储在组件内 signal 的数据,用于获取 signal 当前值的<span class="en1">函数</span>。</li><li><span class="en">setter</span>：触发反应式更新,用于修改 signal 的<span class="en1">函数</span>。</li><li>通过使用 getter 和 setter 来负责存储和管理数据，以及触发整个系统的更新。</li></ul></li><li><span class="en">createSignal</span>：该函数执行两个主要任务<ul><li>初始值</li><li>返回一个包含两个元素的数组：getter和setter函数</li><li>示例：createSignal的原型<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">createSignal</span>(<span class="params">initialValue</span>) &#123;</span><br><span class="line">  <span class="comment">// 这个阶段不存在反应性</span></span><br><span class="line">  <span class="keyword">let</span> value = initialValue;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">getter</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">setter</span>(<span class="params">newValue</span>) &#123;</span><br><span class="line">    value = newValue;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> [getter, setter];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="订阅者-Subscribers"><a href="#订阅者-Subscribers" class="headerlink" title="订阅者 Subscribers"></a>订阅者 Subscribers</h3><ul><li>反应式系统的核心元素。</li><li>负责<span class="en1">跟踪信号的变化并相应地更新系统</span>。</li><li>是自动响应程序，使系统与最新的数据更改保持同步。</li><li>订阅者基于两个主要行为：<ul><li><span class="en">Observation</span>：订阅者的核心是观察信号。能及时捕抓正在跟踪的信号变化</li><li><span class="en">Response</span>：信号改变，订阅者会收到通知。触发响应信号的改变</li></ul></li></ul><h2 id="状态管理"><a href="#状态管理" class="headerlink" title="状态管理"></a>状态管理</h2><ul><li>作用：是处理和处理影响 Web 应用程序的行为和表示的数据的过程。涉及存储和更新数据</li><li>实现方式：通过信号和订阅者来处理。信号用于存储和更新数据，订阅者用于响应数据的更改</li><li>三要素：<ul><li><span class="en">State</span>：用于确定要向用户显示的内容的数据</li><li><span class="en">View</span>：状态对用户的只管表示</li><li><span class="en">Actions</span>：修改状态的事件</li><li>这些元素协同工作创建”单向数据流”。当修改状态行为，视图将更新当前状态并展示。</li></ul></li></ul><h3 id="管理基本状态"><a href="#管理基本状态" class="headerlink" title="管理基本状态"></a>管理基本状态</h3><ul><li>状态是应用程序的实施来源，用于确定要向用户显示的内容。</li><li>状态由信号表示,创建和使用过程与信号一样</li></ul><h3 id="跟踪更改"><a href="#跟踪更改" class="headerlink" title="跟踪更改"></a>跟踪更改</h3><ul><li>通过订阅者来监控数据的任何更新，并作出响应</li><li>响应式原句可用于创建订阅者</li><li>注意：<span class="key">要跟踪信号，必须在订阅者的范围内访问。否则不会触发</span></li><li>示例：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [count, setCount] = <span class="title function_">createSignal</span>(<span class="number">0</span>)</span><br><span class="line"><span class="title function_">createEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">count</span>())</span><br><span class="line">&#125;)</span><br><span class="line"><span class="title function_">setCount</span>(<span class="number">1</span>)</span><br></pre></td></tr></table></figure></li></ul><h3 id="在UI中呈现状态"><a href="#在UI中呈现状态" class="headerlink" title="在UI中呈现状态"></a>在UI中呈现状态</h3><ul><li>使用JSX语法</li></ul><h3 id="派生信号"><a href="#派生信号" class="headerlink" title="派生信号"></a>派生信号</h3><ul><li>基于现有state值计算新的state值</li><li>注意：<span class="key">只可计算简单计算，而且每次使用都会重新计算</span></li><li>频繁使用或高昂计算可以使用createMemo替代，因为memo仅在值更新时运行一次，并且可以多次访问</li><li>示例：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [count, setCount] = <span class="title function_">createSignal</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">doubleCount</span> = (<span class="params"></span>) =&gt; <span class="title function_">count</span>() * <span class="number">2</span> <span class="comment">// 这个就是派生信号</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="提升状态"><a href="#提升状态" class="headerlink" title="提升状态"></a>提升状态</h3><ul><li>含义：将state提升到一个共同的祖先组件</li><li>做法：就是在一个父组件定义state，然后这个父组件调用使用这个state的多个组件</li><li>在组件之间共享 state 时，可以通过props。</li><li>注意：<ul><li><span class="key">从父组件向下传递的 props 值是只读的。</span></li><li><span class="key">从父组件向下传递 setter 函数，子组件就可以间接修改父组件的状态。</span></li></ul></li><li>示例：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createSignal, createEffect, createMemo &#125; <span class="keyword">from</span> <span class="string">&quot;solid-js&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = <span class="title function_">createSignal</span>(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">const</span> [doubleCount, setDoubleCount] = <span class="title function_">createSignal</span>(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">const</span> squaredCount = <span class="title function_">createMemo</span>(<span class="function">() =&gt;</span> <span class="title function_">count</span>() * <span class="title function_">count</span>());</span><br><span class="line"></span><br><span class="line">  <span class="title function_">createEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">setDoubleCount</span>(<span class="title function_">count</span>() * <span class="number">2</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;/*父组件传递setter函数 */&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Counter</span> <span class="attr">count</span>=<span class="string">&#123;count()&#125;</span> <span class="attr">setCount</span>=<span class="string">&#123;setCount&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">DisplayCounts</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">count</span>=<span class="string">&#123;count()&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">doubleCount</span>=<span class="string">&#123;doubleCount()&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">squaredCount</span>=<span class="string">&#123;squaredCount()&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Counter</span>(<span class="params">props</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">increment</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="comment">// 子组件可以使用setter函数修改</span></span><br><span class="line">    props.<span class="title function_">setCount</span>(<span class="function">(<span class="params">prev</span>) =&gt;</span> prev + <span class="number">1</span>); </span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;increment&#125;</span>&gt;</span>Increment<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">DisplayCounts</span>(<span class="params">props</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>Current count: &#123;props.count&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>Doubled count: &#123;props.doubleCount&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>Squared count: &#123;props.squaredCount&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span>;</span><br></pre></td></tr></table></figure></li></ul><h3 id="管理复杂状态"><a href="#管理复杂状态" class="headerlink" title="管理复杂状态"></a>管理复杂状态</h3><ul><li>使用store</li></ul><h2 id="同步-vs-异步"><a href="#同步-vs-异步" class="headerlink" title="同步 vs 异步"></a>同步 vs 异步</h2><h3 id="同步反应性"><a href="#同步反应性" class="headerlink" title="同步反应性"></a>同步反应性</h3><ul><li>默认模式，系统以直接和线性的方式相应变化。</li><li>当信号发生变化时，任何相应的订阅者都会立即以<span class="en1">有序的方式更新</span>。</li></ul><h3 id="异步反应性"><a href="#异步反应性" class="headerlink" title="异步反应性"></a>异步反应性</h3><ul><li>系统以延迟或非线性方式响应变化。</li><li>当信号变化时，相应的订阅者不会立即更新。系统会等待特定事件或任务完成在更新</li><li>这在订阅者依赖多个信号的情况下非常重要，避免信号更新不同步导致数据不一致</li><li>注意：<span class="key">当存在异步响应性时，延迟非常重要。batch 可用于延迟更新。</span></li></ul><h2 id="关键概念（简单总结）"><a href="#关键概念（简单总结）" class="headerlink" title="关键概念（简单总结）"></a>关键概念（简单总结）</h2><ul><li>信号负责存储和管理数据。</li><li>由于 getter 和 setter，信号既可读又可写。</li><li>订阅者是自动响应者，可以跟踪信号的变化并相应地更新系统。</li><li>Signals 和 subscribers 协同工作，以确保系统与最新的数据更改保持同步。</li><li>反应式系统建立在数据驱动反应性原则之上。意味着系统的反应性是由它所基于的数据驱动。</li><li>反应式系统可以是同步的，也可以是异步的。</li></ul><h2 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h2><ul><li>基本跟 react 一样，省略</li></ul><h3 id="classList"><a href="#classList" class="headerlink" title="classList"></a>classList</h3><ul><li>作用：多个类应用于同一个元素时使用，处理多个条件类更有效</li><li>可以传递字符串或对象，其中 key 为类名，值为布尔表达式，当值为 false 删除</li><li>示例：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [current, setCurrent] = <span class="title function_">createSignal</span>(<span class="string">&#x27;foo&#x27;</span>)</span><br><span class="line"></span><br><span class="line">&lt;button</span><br><span class="line">  classList=&#123;&#123; <span class="string">&quot;selected&quot;</span>: <span class="title function_">current</span>() === <span class="string">&#x27;foo&#x27;</span> &#125;&#125;</span><br><span class="line">  onClick=&#123;<span class="function">() =&gt;</span> <span class="title function_">setCurrent</span>(<span class="string">&#x27;foo&#x27;</span>)&#125;</span><br><span class="line">&gt;&lt;/button&gt;</span><br></pre></td></tr></table></figure><ul><li>注意：<ul><li><span class="key">与 class 一起用时，都是动态的情况下，应用 class 删除 classList</span><ul><li><span class="key">解决方式：class 设置为静态或动态的计算值，然后放在 classList 前</span></li></ul></li><li><span class="key">classList 是一个伪属性，不适用于<code>&lt;div &#123;...props&#125; /&gt;</code> 或 <code>&lt;Dynamic&gt;</code>中的 prop 跨页</span></li></ul></li></ul><h2 id="事件处理程序"><a href="#事件处理程序" class="headerlink" title="事件处理程序"></a>事件处理程序</h2><ul><li><span class="en">on:__</span>: 将事件侦听器添加到元素，这也称为本机事件</li><li><span class="en">on__</span>: 向 document 添加事件侦听器并将其调度到元素，这称为<span class="en1">委托事件</span></li><li>注意：<span class="key">委托事件不区分大小写，本机事件区分大小写</span></li></ul><h3 id="绑定事件"><a href="#绑定事件" class="headerlink" title="绑定事件"></a>绑定事件</h3><ul><li>避免使用 js 的 bind 方法和添加额外闭包的开销</li><li>以数组作为事件处理程序传递，数组第二项作为处理程序的第一个参数</li><li>示例：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">handler</span> = (<span class="params">data, event</span>) =&gt; &#123;&#125;</span><br><span class="line"><span class="comment">// 单击按钮时，Hello!当作handler的第一个参数data传递进来</span></span><br><span class="line">&lt;button onClick=&#123;[handler, <span class="string">&#x27;Hello!&#x27;</span>]&#125;&gt;<span class="title class_">Click</span> <span class="title class_">Me</span>&lt;/button&gt;</span><br></pre></td></tr></table></figure><h3 id="动态处理程序"><a href="#动态处理程序" class="headerlink" title="动态处理程序"></a>动态处理程序</h3><ul><li>事件处理程序<span class="en1">不构成响应式系统的一部分</span>。</li><li>事件不会动态更新，并且绑定不是反应性的</li><li>如果要将处理程序当作 signal 传递，将不会响应<ul><li>示例：<span class="desc"><code>&lt;div onClick=&#123;() =&gt; props.handleClick?.()&#125; /&gt;</code></span></li></ul></li></ul><h3 id="活动委托"><a href="#活动委托" class="headerlink" title="活动委托"></a>活动委托</h3><ul><li>通过 <span class="en">on__</span>形式</li><li>支持的事件：看下方的委托事件列表</li><li>如果需要将事件侦听器附加到<span  class="en1">事件委托不支持的元素</span>，如自定义元素，<span class="en1">使用 on:__</span></li></ul><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><ul><li>事件委托是为了通过 JSX 树而不是 DOM 树进行事件传播而设计的</li><li>委托事件侦听器按事件类型添加一次，并处理该类型的<span class="en1">所有未来事件</span>。 这意味着，即使删除了添加委托事件侦听器的元素及其处理程序，委托事件侦听器仍保持活动状态。<ul><li><span class="desc">例：如果 div 监听 mousemove 并在稍后被删除，则事件仍将被分派给 document，以防其他元素也在监听鼠标移动。</span></li></ul></li><li><span class="en1">对于不经常发生的事件使用on:__</span></li><li><span class="en1">event.stopPropagation()未按预期工作</span>，因为事件附加到 document 而不是 element。<ul><li><span class="en1">使用 on:__ 解决</span></li></ul></li><li>onChange 和 onInput 事件根据其<span class="en1">本机行为</span>工作：<ul><li><span class="en1">onInput 将在值更改后立即触发</span></li><li><span class="en1">在<code>&lt;input&gt;</code>字段中，onChange 仅在字段失去焦点后触发</span>。</li></ul></li></ul><h3 id="委托事件列表"><a href="#委托事件列表" class="headerlink" title="委托事件列表"></a>委托事件列表</h3><ul><li>beforeinput</li><li>click</li><li>dbclick</li><li>contextmenu</li><li>focusin</li><li>focusout</li><li>input</li><li>keydown</li><li>keyup</li><li>mousedown</li><li>mousemove</li><li>mouseout</li><li>mouseover</li><li>mouseup</li><li>pointerdown</li><li>pointermove</li><li>pointerout</li><li>pointerover</li><li>poinyerup</li><li>touchend</li><li>touchmove</li><li>touchstart</li></ul><h2 id="Props"><a href="#Props" class="headerlink" title="Props"></a>Props</h2><ul><li>将 state 从父组件传递到子组件的方法</li><li>使用方法跟 react 一样</li></ul><h3 id="mergeProps"><a href="#mergeProps" class="headerlink" title="mergeProps"></a>mergeProps</h3><ul><li>一个实用函数</li><li>作用：把多个潜在的反应性对象合并在一起。行为类似于 Object.assign 但将保留正在合并的属性的响应性。</li><li>合并 props 时，如果 props 没有该值，则将使用第一个对象的值。</li><li>示例：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; mergeProps &#125; <span class="keyword">from</span> <span class="string">&#x27;solid-js&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">MyComponent</span>(<span class="params">props</span>) &#123;</span><br><span class="line">  <span class="comment">// mergeProps 第一个对象是设置默认值，当props中没有该值则使用第一个对象的值</span></span><br><span class="line">  <span class="keyword">const</span> finalProps = <span class="title function_">mergeProps</span>(&#123; <span class="attr">defaultName</span>: <span class="string">&#x27;Ryan Carniato&#x27;</span> &#125;, props)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Hello &#123;finalProps.defaultName&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Usage: &lt;MyComponent defaultName=&quot;Ryan Carniato&quot; /&gt;</span></span><br></pre></td></tr></table></figure><h3 id="解构-props"><a href="#解构-props" class="headerlink" title="解构 props"></a>解构 props</h3><ul><li>在Solid中，不建议使用解构 props，会破坏响应性。正确使用方式看示例</li><li>示例：<span class="desc"><code>const name = () =&gt; props.name</code></span></li></ul><h3 id="splitProps"><a href="#splitProps" class="headerlink" title="splitProps"></a>splitProps</h3><ul><li>实用函数，<span class="en1">将单个 props 对象拆分成多组 props</span>，同时保留其响应性</li><li>含义：定义一个或多个 key 数组，并能提取到单独的 props 对象中，同时保留各个属性的响应性。</li><li>返回：一个与每组键相关的 props 对象数组，以及一个包含任何剩余键的附加 props 对象。</li><li>用途：当 props 传递给子组件时，使用 splitProps 将 props 分成多个组，然后将每个组传递给相应的子组件：</li><li>示例：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; splitProps &#125; <span class="keyword">from</span> <span class="string">&#x27;solid-js&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">ParentComponent</span>(<span class="params">props</span>) &#123;</span><br><span class="line">  <span class="comment">// 第一个参数是props， 之后的参数是要拆分的组</span></span><br><span class="line">  <span class="keyword">const</span> [greetingProps, personalInfoProps, restProps] = <span class="title function_">splitProps</span>(</span><br><span class="line">    props,</span><br><span class="line">    [<span class="string">&#x27;name&#x27;</span>],</span><br><span class="line">    [<span class="string">&#x27;age&#x27;</span>]</span><br><span class="line">  )</span><br><span class="line"></span><br><span class="line">  <span class="comment">// greetingProps == name组（组中包含name属性）</span></span><br><span class="line">  <span class="comment">// personalInfoProps == age组（组中包含啊age属性）</span></span><br><span class="line">  <span class="comment">// restProps == props除去name和age 的组，附加 props 对象</span></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Greeting</span> &#123;<span class="attr">...greetingProps</span>&#125; /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">PersonalInfo</span> &#123;<span class="attr">...personalInfoProps</span>&#125; /&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;/* restProps can be passed down or used as needed */&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="将-props-传递给-children"><a href="#将-props-传递给-children" class="headerlink" title="将 props 传递给 children"></a>将 props 传递给 children</h3><ul><li>多数情况下，直接使用props。</li><li>避免重复创建子组件或元素</li><li>示例：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; children &#125; <span class="keyword">from</span> <span class="string">&#x27;solid-js&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">ColoredList</span>(<span class="params">props</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> safeChildren = <span class="title function_">children</span>(<span class="function">() =&gt;</span> props.<span class="property">children</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;&gt;</span>&#123;safeChildren()&#125;<span class="tag">&lt;/&gt;</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="螺旋桨钻孔-Prop-Drilling"><a href="#螺旋桨钻孔-Prop-Drilling" class="headerlink" title="螺旋桨钻孔 Prop Drilling"></a>螺旋桨钻孔 Prop Drilling</h3><ul><li>含义：用于描述将 prop 传递多个组件的过程</li><li>由于 Solid 中的组件不拥有 state，因此不需要 props 在组件之间传递 state，但可以使用 props。因此，有时可能需要通过多层组件传递 props。</li><li>多层级传递的缺点：props 难以管理，组件收到它们不需要的 props、不必要的重渲染和麻烦的重构</li><li><h3 id="避免多层级传递props"><a href="#避免多层级传递props" class="headerlink" title="避免多层级传递props"></a>避免多层级传递props</h3><ul><li>常见解决方案：使用 Context 将 state 传递给深度嵌套的组件</li></ul></li></ul><h2 id="条件渲染-Show标签"><a href="#条件渲染-Show标签" class="headerlink" title="条件渲染 Show标签"></a>条件渲染 Show标签</h2><ul><li>属性值<ul><li><span class="en">when</span>：判断是否渲染 children</li><li><span class="en">fallback</span>：当结果为 false，展示失败时的渲染 children</li></ul></li><li>有多个条件需要处理，采用嵌套的方式</li><li>示例：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Show</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;solid-js&#x27;</span></span><br><span class="line"></span><br><span class="line">&lt;<span class="title class_">Show</span></span><br><span class="line">  when=&#123;!data.<span class="property">loading</span>&#125;</span><br><span class="line">  fallback=&#123;<span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Loading...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>&#125;</span><br><span class="line">&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hi, I am &#123;data().name&#125;.<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">Show</span> <span class="attr">when</span>=<span class="string">&#123;data.error&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>Error: &#123;data.error&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">Show</span>&gt;</span></span></span><br><span class="line">&lt;/<span class="title class_">Show</span>&gt;</span><br></pre></td></tr></table></figure><h2 id="Switch-标签和-Match-标签"><a href="#Switch-标签和-Match-标签" class="headerlink" title="Switch 标签和 Match 标签"></a>Switch 标签和 Match 标签</h2><ul><li>处理多个条件,类似于 switch&#x2F;case</li><li>属性值：<ul><li><span class="en">fallback</span>：当所有条件都不符合时渲染</li><li><span class="en">when</span>：判断是否渲染这个Match</li></ul></li><li>示例：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Switch</span>, <span class="title class_">Match</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;solid-js&#x27;</span></span><br><span class="line"></span><br><span class="line">&lt;<span class="title class_">Switch</span> fallback=&#123;<span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Fallback content<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span>&#125;&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">Match</span> <span class="attr">when</span>=<span class="string">&#123;condition1&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Outcome 1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">Match</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">Match</span> <span class="attr">when</span>=<span class="string">&#123;condition2&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Outcome 2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">Match</span>&gt;</span></span></span><br><span class="line">&lt;/<span class="title class_">Switch</span>&gt;</span><br></pre></td></tr></table></figure><h2 id="Dynamic-标签"><a href="#Dynamic-标签" class="headerlink" title="Dynamic 标签"></a>Dynamic 标签</h2><ul><li>允许根据数据动态渲染组件</li><li>比<code>&lt;Switch&gt;</code>和<code>&lt;Match&gt;</code>简洁</li><li>属性值：<ul><li><span class="en">component</span>：传递一个动态的事件</li></ul></li><li>示例：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createSignal, <span class="title class_">For</span> &#125; <span class="keyword">from</span> <span class="string">&quot;solid-js&quot;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Dynamic</span> &#125; <span class="keyword">from</span> <span class="string">&quot;solid-js/web&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">RedDiv</span> = (<span class="params"></span>) =&gt; <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;color: red&quot;</span>&gt;</span>Red<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">GreenDiv</span> = (<span class="params"></span>) =&gt; <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;color: green&quot;</span>&gt;</span>Green<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">BlueDiv</span> = (<span class="params"></span>) =&gt; <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;color: blue&quot;</span>&gt;</span>Blue<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> options = &#123;</span><br><span class="line">  <span class="attr">red</span>: <span class="title class_">RedDiv</span>,</span><br><span class="line">  <span class="attr">green</span>: <span class="title class_">GreenDiv</span>,</span><br><span class="line">  <span class="attr">blue</span>: <span class="title class_">BlueDiv</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [selected, setSelected] = <span class="title function_">createSignal</span>(<span class="string">&quot;red&quot;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">select</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">value</span>=<span class="string">&#123;selected()&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">onInput</span>=<span class="string">&#123;(e)</span> =&gt;</span> setSelected(e.currentTarget.value)&#125;</span></span><br><span class="line"><span class="language-xml">      &gt;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">For</span> <span class="attr">each</span>=<span class="string">&#123;Object.keys(options)&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          &#123;(color) =&gt; <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&#123;color&#125;</span>&gt;</span>&#123;color&#125;<span class="tag">&lt;/<span class="name">option</span>&gt;</span>&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">For</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="comment">&lt;!-- 选择对应的颜色，触发对应的事件--&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Dynamic</span> <span class="attr">component</span>=<span class="string">&#123;options[selected()]&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="列表呈现"><a href="#列表呈现" class="headerlink" title="列表呈现"></a>列表呈现</h2><ul><li>渲染列表</li></ul><h3 id="For-标签"><a href="#For-标签" class="headerlink" title="For 标签"></a>For 标签</h3><ul><li>循环组件，根据数组或对象的内容呈现元素</li><li>使用场景：与复杂的数据结构一起使用，如列表的顺序和长度会频繁更改的情况使用</li><li>唯一的属性：<ul><li><span class="en">each</span>：指定要循环访问的数据收集，接受一个<span class="en1">数组</span>或者<span class="en1">使用 Object.entries()或 Object.value 处理的对象</span></li></ul></li><li>标签之间，组件需要有一个回调函数，类似于 map<ul><li><span class="en">item</span>：表示正在渲染的数据收集中的当前项</li><li><span class="en">index</span>：当前项在数据中的索引，<span class="en1">index 是一个信号，必须使用函数调用</span>才能检索</li></ul></li><li>示例：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="title class_">For</span> each=&#123;<span class="title function_">data</span>()&#125;&gt;</span><br><span class="line">  &#123;<span class="function">(<span class="params">item, index</span>) =&gt;</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">li</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">style</span>=<span class="string">&#123;&#123;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">color:</span> <span class="attr">index</span>() % <span class="attr">2</span> === <span class="string">0</span> ? &#x27;<span class="attr">red</span>&#x27; <span class="attr">:</span> &#x27;<span class="attr">blue</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      &#125;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    &gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;item.name&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">  )&#125;</span><br><span class="line">&lt;/<span class="title class_">For</span>&gt;</span><br></pre></td></tr></table></figure><h3 id="Index-标签"><a href="#Index-标签" class="headerlink" title="Index 标签"></a>Index 标签</h3><ul><li>循环组件，与<code>&lt;For&gt;</code>类似</li><li>使用场景：列表顺序和长度保持稳定，但内容会频繁更改时使用</li><li><code>&lt;Index&gt;</code>更关注元素在数组中的索引，所以回调中 index 固定</li><li><span class="en1">item 是信号，必须使用函数调用</span>才能检索</li><li>示例：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Index</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;solid-js&#x27;</span></span><br><span class="line"></span><br><span class="line">&lt;<span class="title class_">Index</span> each=&#123;<span class="title function_">data</span>()&#125;&gt;</span><br><span class="line">  &#123;<span class="function">(<span class="params">item, index</span>) =&gt;</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;item().name&#125; - &#123;item().completed&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">  )&#125;</span><br><span class="line">&lt;/<span class="title class_">Index</span>&gt;</span><br></pre></td></tr></table></figure><h3 id="Index-标签-vs-For-标签"><a href="#Index-标签-vs-For-标签" class="headerlink" title="Index 标签 vs For 标签"></a>Index 标签 vs For 标签</h3><ul><li><span class="en">For</span>: <ul><li><span class="en1">当列表的顺序和长度可能频繁更改时使用。</span></li><li><span class="en1">当列表值更改时，将刷新整个列表。但是，如果数据发生变化，如元素位置移动，只会修改列表中元素的索引，而不是重新渲染整个列表</span></li><li>最佳使用场景：在不需要信号、嵌套循环或动态列表的情况下</li></ul></li><li><span class="en">Index</span>: <ul><li>当列表的顺序和长度保持稳定，但<span class="en1">内容可能会频繁更改时使用。</span></li><li><span class="en1">当列表值更改时，只会更新指定索引处的内容，而列表的其余部分保持不变。</span></li><li>最佳使用场景：处理信号，JavaScript 基元（如字符串和数字）或 input 字段时</li></ul></li></ul><h2 id="Portal-标签"><a href="#Portal-标签" class="headerlink" title="Portal 标签"></a>Portal 标签</h2><ul><li><code>&lt;Portal&gt;</code>通过将元素放在文档中的其他位置，将元素引入文档流中</li><li>默认情况下，嵌套的内容将呈现并放置在正文末尾</li><li>可以通过 prop 传递给<code>&lt;Protal&gt;</code>来更改当前内容的挂载点。prop 接受一个 DOM 节点</li><li>使用场景：<ul><li>弹窗</li><li>父元素溢出等行为影响到<code>&lt;Protal&gt;</code>的内容时，可以将其放在父元素外</li><li>元素需要在文档流外进行渲染时，堆叠内容和 z-index影响到视图</li></ul></li><li>示例：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Portal</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;solid-js/web&#x27;</span></span><br><span class="line"></span><br><span class="line">&lt;<span class="title class_">Portal</span> mount=&#123;<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;main&#x27;</span>)&#125;&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&#x27;popup&#x27;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/<span class="title class_">Portal</span>&gt;</span><br></pre></td></tr></table></figure><ul><li>注意：<ul><li><code>&lt;Protal&gt;</code>将呈现包装，除非针对 document.head</li><li>事件会根据组件层次结构而不是元素层次结构</li><li><span class="key">默认情况下，子项包裹在 div。如果应用在 SVG 上，必须使用 isSVG 属性来避免子项包裹在 div 中</span></li></ul></li></ul><h2 id="ErrorBoundary-标签"><a href="#ErrorBoundary-标签" class="headerlink" title="ErrorBoundary 标签"></a>ErrorBoundary 标签</h2><ul><li>含义：用于创建错误边界。它会捕获在渲染或更新其子项期间发生的任何错误</li><li>注意: <span class="key">在渲染过程之外发生的错误(如在事件处理程序中或在 setTimeout 之后)不会被捕获</span></li><li>属性值：<ul><li><span class="en">fallback</span>：可用于在发生错误时显示用户友好的错误消息或通知。<ul><li>如果 fallback 是回调函数：<ul><li><span class="en">error</span>：error 对象</li><li><span class="en">reset</span>：重新渲染其子项并重置错误状态，为用户提供一种从错误中恢复的方法。</li></ul></li></ul></li></ul></li></ul><h2 id="Effects"><a href="#Effects" class="headerlink" title="Effects"></a>Effects</h2><ul><li>管理副作用，当它们所依赖的信号发生变化时触发的函数</li><li>场景：DOM、数据获取和订阅</li><li>createEffect: 传入一个函数，该函数立即调用其中的函数<ul><li>示例：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">createEffect</span>(<span class="params">fn</span>)&#123;</span><br><span class="line">  <span class="title function_">fn</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="管理依赖项"><a href="#管理依赖项" class="headerlink" title="管理依赖项"></a>管理依赖项</h3><ul><li>Solid 会自动跟踪效果的依赖关系，因此<span class="en1">无需手动指定依赖项</span>。</li><li>signals、变量、props、context 或任何其他响应式值，任何一个更改，都会重新运行</li><li><span class="en1">初始化后，将运行一次</span>，无论它是否有任何依赖项。<span class="en1">当依赖性更改才会再次运行</span></li></ul><h3 id="订阅信号"><a href="#订阅信号" class="headerlink" title="订阅信号"></a>订阅信号</h3><ul><li>当 Effect 设置为观察信号事，它会创建对该信号的订阅</li><li>一个 Effect 具有观察多个信号的能力，多个 Effect 可以跟踪单个信号</li><li>注意：<span class="key">当信号更新时，会按顺序通知所有订阅者，虽然可以保证 effect 在信号更新时运行，但执行可能不是即时的。这意味 Effect 的执行下顺序无法保证</span></li></ul><h3 id="嵌套效果"><a href="#嵌套效果" class="headerlink" title="嵌套效果"></a>嵌套效果</h3><ul><li><span class="en1">允许每个效果单独跟踪自己的依赖项，而不会影响它嵌套在其中的效果</span></li><li>执行顺序很重要。<span class="en1">内部效果不会影响外部效果。</span></li><li>内部效果器中访问的信号不会注册为外部效果器的依赖项。</li><li>示例：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createSignal, createEffect &#125; <span class="keyword">from</span> <span class="string">&#x27;solid-js&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> [count, setCount] = <span class="title function_">createSignal</span>(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="title function_">createEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Outer effect starts&#x27;</span>)</span><br><span class="line">  <span class="title function_">createEffect</span>(<span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">count</span>())) <span class="comment">// 当count变化, 仅运行该条Effect不影响外部</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Outer effect ends&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="生命周期函数"><a href="#生命周期函数" class="headerlink" title="生命周期函数"></a>生命周期函数</h3><h4 id="onMount"><a href="#onMount" class="headerlink" title="onMount"></a>onMount</h4><ul><li>只运行一次副作用,类似于 Effect，但不跟踪依赖项。</li><li><span class="en1">一旦组件初始化，回调将被执行且不会再次执行</span></li><li>比较适合只调用一次的 API</li><li>示例：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; onMount &#125; <span class="keyword">from</span> <span class="string">&#x27;solid-js&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Component</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [data, setData] = <span class="title function_">createSignal</span>(<span class="literal">null</span>)</span><br><span class="line"></span><br><span class="line">  <span class="title function_">createEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">data</span>() <span class="comment">// will run every time data changes</span></span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="title function_">onMount</span>(<span class="title function_">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="comment">// will run only once, when the component is mounted</span></span><br><span class="line">    <span class="keyword">const</span> fetchedData = <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">&#x27;https://example.com/data&#x27;</span>)</span><br><span class="line">    <span class="title function_">setData</span>(fetchedData)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="onCleanup"><a href="#onCleanup" class="headerlink" title="onCleanup"></a>onCleanup</h4><ul><li>在不需要任务时清理任务。</li><li><span class="en1">将在组件卸载时运行，并删除 Effect 具有的所有订阅</span></li><li>可以避免内存泄漏</li><li>适合清除定时器</li><li>示例：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; onCleanup &#125; <span class="keyword">from</span> <span class="string">&#x27;solid-js&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">const</span> [count, setCount] = <span class="title function_">createSignal</span>(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> timer = <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line"><span class="title function_">setCount</span>(<span class="function">(<span class="params">prev</span>) =&gt;</span> prev + <span class="number">1</span>)</span><br><span class="line">&#125;, <span class="number">1000</span>)</span><br><span class="line"></span><br><span class="line"><span class="title function_">onCleanup</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line"><span class="built_in">clearInterval</span>(timer)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Count: &#123;count()&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="memo"><a href="#memo" class="headerlink" title="memo"></a>memo</h2><ul><li>是一种响应式值，可用于记忆派生状态或昂贵的计算</li><li><span class="en1">仅对其依赖项的每次更改执行一次</span></li><li>示例：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createMemo, createSignal &#125; <span class="keyword">from</span> <span class="string">&#x27;solid-js&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> [count, setCount] = <span class="title function_">createSignal</span>(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> isEven = <span class="title function_">createMemo</span>(<span class="function">() =&gt;</span> <span class="title function_">count</span>() % <span class="number">2</span> === <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">isEven</span>()) <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">setCount</span>(<span class="number">3</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">isEven</span>()) <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h3 id="Memo-vs-Effect"><a href="#Memo-vs-Effect" class="headerlink" title="Memo vs Effect"></a>Memo vs Effect</h3><table><thead><tr><th></th><th>Memo</th><th>Effect</th></tr></thead><tbody><tr><td>返回值</td><td>返回计算或派生状态结果的 getter</td><td>不返回，但执行代码块以响应更改</td></tr><tr><td>缓存结果</td><td>是</td><td>不</td></tr><tr><td>行为</td><td>参数应该是干净的，没有反应式的副作用</td><td>可能会导致 UI 更新或数据获取等副作用</td></tr><tr><td>依赖项跟踪</td><td>是</td><td>是</td></tr><tr><td>示例用例</td><td>转换数据结构、计算聚合值、派生状态或其他昂贵的计算</td><td>UI 更新、网络请求或外部集</td></tr></tbody></table><h3 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h3><h4 id="纯函数"><a href="#纯函数" class="headerlink" title="纯函数"></a>纯函数</h4><ul><li>不会引起任何副作用的函数。意味着函数的输出取决于其输入</li><li>在memo中引入Effect，会导致无限循环，应改用createEffect()</li></ul><h4 id="将逻辑保留在memo中"><a href="#将逻辑保留在memo中" class="headerlink" title="将逻辑保留在memo中"></a>将逻辑保留在memo中</h4><ul><li>当派生state，使用memo</li></ul><h2 id="Context"><a href="#Context" class="headerlink" title="Context"></a>Context</h2><ul><li><a href="https://docs.solidjs.com/concepts/context">Context文档</a></li></ul><h3 id="何时使用？"><a href="#何时使用？" class="headerlink" title="何时使用？"></a>何时使用？</h3><ul><li>需要共享state的大型组件树时，可以避免prop钻探</li><li>共享全局数据或应用程序组件树的多个组件定期访问的信息</li></ul><h3 id="创建和使用"><a href="#创建和使用" class="headerlink" title="创建和使用"></a>创建和使用</h3><ul><li>在全局中创建&#x2F;content&#x2F;create.js<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createContext &#125; <span class="keyword">from</span> <span class="string">&quot;solid-js&quot;</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">MyContext</span> = <span class="title function_">createContext</span>()</span><br></pre></td></tr></table></figure></li><li>在全局中创建&#x2F;context&#x2F;component.jsx<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">MyContext</span> &#125; <span class="keyword">from</span> <span class="string">&quot;./create.js&quot;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">Provider</span> (<span class="params">props</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">MyContext.Provider</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;props.children&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">MyContext.Provider</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>传递单个值，直接在MyContext.Provider传递<ul><li><span class="desc">示例：<code>&lt;MyContext.Provider value=&quot;new value&quot;&gt;&lt;/MyContext.Provider&gt;</code></span></li></ul></li><li>传递多个值（如数组或Object）使用store</li></ul><h3 id="自定义上下文实用程序"><a href="#自定义上下文实用程序" class="headerlink" title="自定义上下文实用程序"></a>自定义上下文实用程序</h3><ul><li>当app包含多个上下文对象时，很难追踪正在使用的上下文对象。解决方式：创建自定义app</li></ul><h4 id="在app的不同区域访问Provider-导入组件并封装组件树"><a href="#在app的不同区域访问Provider-导入组件并封装组件树" class="headerlink" title="在app的不同区域访问Provider,导入组件并封装组件树"></a>在app的不同区域访问Provider,导入组件并封装组件树</h4><ul><li>结合·创建和使用·的代码一起看，步骤相似</li><li>示例：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">CounterProvider</span> &#125; <span class="keyword">from</span> <span class="string">&quot;./counterProvider&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">CounterProvider</span> <span class="attr">count</span>=<span class="string">&#123;1&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Welcome to Counter<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">NestedComponents</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">CounterProvider</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="创建自定义实用程序来访问上下文"><a href="#创建自定义实用程序来访问上下文" class="headerlink" title="创建自定义实用程序来访问上下文"></a>创建自定义实用程序来访问上下文</h4><ul><li>可以更轻松访问所需值，而不是在使用它的组件上导入和传入上下文对象</li><li>示例：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 封装</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">useCounter</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">useContext</span>(<span class="title class_">CounterContext</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 应用</span></span><br><span class="line"><span class="keyword">import</span> &#123; useCounter &#125; <span class="keyword">from</span> <span class="string">&quot;./counter&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">CounterProvider</span>(<span class="params">props</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> count = <span class="title function_">useCounter</span>();</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;count()&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="更新上下文"><a href="#更新上下文" class="headerlink" title="更新上下文"></a>更新上下文</h3><ul><li>信号提供一种方式使用上下文去同步和管理组件之间共享的数据方法。</li><li>是一种跨组件管理状态的方法，中间不必通过中间元素传递props</li><li><span class="en1">可以将信号直接传递给 Provider 组件的 value属性</span>，对信号的任何更改都将反映在所有使用上下文的组件中。</li><li>示例：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建Context.jsx</span></span><br><span class="line"><span class="keyword">import</span> &#123; createSignal, useContext &#125; <span class="keyword">from</span> <span class="string">&quot;solid-js&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">CounterProvider</span>(<span class="params">props</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = <span class="title function_">createSignal</span>(props.<span class="property">initialCount</span> || <span class="number">0</span>);</span><br><span class="line">  <span class="keyword">const</span> counter = [</span><br><span class="line">    count,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="title function_">increment</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="title function_">setCount</span>(<span class="function"><span class="params">prev</span> =&gt;</span> prev + <span class="number">1</span>);</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="title function_">decrement</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="title function_">setCount</span>(<span class="function"><span class="params">prev</span> =&gt;</span> prev - <span class="number">1</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">CounterContext.Provider</span> <span class="attr">value</span>=<span class="string">&#123;counter&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;props.children&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">CounterContext.Provider</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">useCounter</span>(<span class="params"></span>) &#123; <span class="keyword">return</span> <span class="title function_">useContext</span>(<span class="title class_">CounterContext</span>); &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 应用到全局App.jsx</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">CounterProvider</span> &#125; <span class="keyword">from</span> <span class="string">&quot;./Context&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Child</span> &#125; <span class="keyword">from</span> <span class="string">&quot;./Child&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">CounterProvider</span> <span class="attr">count</span>=<span class="string">&#123;1&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Welcome to Counter App<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Child</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">CounterProvider</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在这个组件单独使用上下文Child.tsx</span></span><br><span class="line"><span class="keyword">import</span> &#123; useCounter &#125; <span class="keyword">from</span> <span class="string">&quot;./Context&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">Child</span>(<span class="params">props</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [count, &#123; increment, decrement &#125;] = <span class="title function_">useCounter</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;count()&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;increment&#125;</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;decrement&#125;</span>&gt;</span>-<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h3 id="使用上下文进行调试"><a href="#使用上下文进行调试" class="headerlink" title="使用上下文进行调试"></a>使用上下文进行调试</h3><ul><li>createContext接受可选的 default 值，如果未提供，则可能会返回undefined</li><li>解决TS报错：<ul><li>1.指定默认值</li><li>2.使用自定义app处理好后在使用（错误在自定义app中处理，使用处理好后的自定义app）</li></ul></li></ul><h3 id="createContext-和-useContext-常见问题"><a href="#createContext-和-useContext-常见问题" class="headerlink" title="createContext 和 useContext 常见问题"></a>createContext 和 useContext 常见问题</h3><ul><li>如果没有将默认值传递给 createContext，则 useContext 可能会返回 undefined。</li><li>解决TS报错：将 useContext 的所有使用包装在一个函数中，如果上下文未定义，该函数将显式地抛出一个有用的错误。</li><li>示例： 跟createContext的处理方式一样<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">useCounterContext</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> context = <span class="title function_">useContext</span>(<span class="title class_">CounterContext</span>)</span><br><span class="line">  <span class="keyword">if</span> (!context) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;can&#x27;t find CounterContext&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> context</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="仓库-Store"><a href="#仓库-Store" class="headerlink" title="仓库 Store"></a>仓库 Store</h2><ul><li>store 可以生成一组反应式信号，每个信号对应于一个特定的属性，这在处理复杂状态时可能很有用</li></ul><h3 id="创建Store"><a href="#创建Store" class="headerlink" title="创建Store"></a>创建Store</h3><ul><li>可以管理多种数据类型，包括对象、数组、字符串和数字</li><li>示例：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createStore &#125; <span class="keyword">from</span> <span class="string">&quot;solid-js/store&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Initialize store</span></span><br><span class="line"><span class="keyword">const</span> [store, setStore] = <span class="title function_">createStore</span>(&#123;</span><br><span class="line">  <span class="attr">userCount</span>: <span class="number">3</span>,</span><br><span class="line">  <span class="attr">users</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">id</span>: <span class="number">0</span>,</span><br><span class="line">      <span class="attr">username</span>: <span class="string">&quot;felix909&quot;</span>,</span><br><span class="line">      <span class="attr">location</span>: <span class="string">&quot;England&quot;</span>,</span><br><span class="line">      <span class="attr">loggedIn</span>: <span class="literal">false</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">id</span>: <span class="number">1</span>,</span><br><span class="line">      <span class="attr">username</span>: <span class="string">&quot;tracy634&quot;</span>,</span><br><span class="line">      <span class="attr">location</span>: <span class="string">&quot;Canada&quot;</span>,</span><br><span class="line">      <span class="attr">loggedIn</span>: <span class="literal">true</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">id</span>: <span class="number">2</span>,</span><br><span class="line">      <span class="attr">username</span>: <span class="string">&quot;johny123&quot;</span>,</span><br><span class="line">      <span class="attr">location</span>: <span class="string">&quot;India&quot;</span>,</span><br><span class="line">      <span class="attr">loggedIn</span>: <span class="literal">true</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><h3 id="访问Store"><a href="#访问Store" class="headerlink" title="访问Store"></a>访问Store</h3><ul><li>语句：<span class="en">store.xxx(xxx指仓库的属性)</span></li><li>Store初始状态不会跟踪更改，此时去更改会报错。这些信号是惰性创建的，这意味着只有在响应式上下文中访问时才会形成（例如在组件函数、计算属性或效果的 return 语句中）</li><li><span class="en1">创建完后放在createEffect，会建立起跟踪，就可以访问到。</span></li></ul><h3 id="修改Store值"><a href="#修改Store值" class="headerlink" title="修改Store值"></a>修改Store值</h3><ul><li>语句：<span class="en">setStore(key, newValue)</span>，会自动更新的</li><li>也可以使用嵌套store来设置属性</li><li>示例：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [store, setStore] = <span class="title function_">createStore</span>(&#123;</span><br><span class="line">  <span class="attr">userCount</span>: <span class="number">3</span>,</span><br><span class="line">  <span class="attr">users</span>: [ ... ],</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> [users, setUsers] = <span class="title function_">createStore</span>(store.<span class="property">users</span>)</span><br><span class="line"></span><br><span class="line"><span class="title function_">setUsers</span>(<span class="function">(<span class="params">currentUsers</span>) =&gt;</span> [</span><br><span class="line">  ...currentUsers,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">id</span>: <span class="number">3</span>,</span><br><span class="line">    <span class="attr">username</span>: <span class="string">&quot;michael584&quot;</span>,</span><br><span class="line">    <span class="attr">location</span>: <span class="string">&quot;Nigeria&quot;</span>,</span><br><span class="line">    <span class="attr">loggedIn</span>: <span class="literal">false</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">])</span><br></pre></td></tr></table></figure></li></ul><h3 id="Path语法灵活性"><a href="#Path语法灵活性" class="headerlink" title="Path语法灵活性"></a>Path语法灵活性</h3><ul><li>初始参数用于指定导致要修改的目标值的键，而最后一个参数提供新值。</li><li>不仅可以使用字符串键，还可以选择使用键数组</li><li><span class="desc">示例：setState([1,3], user &#x3D;&gt; user.loggedln, false) &#x2F;&#x2F; 把users数组中索引为1和3的user.loggedln状态改为false</span></li></ul><h3 id="修改数组中的值"><a href="#修改数组中的值" class="headerlink" title="修改数组中的值"></a>修改数组中的值</h3><ul><li>path语法不依赖于发现单个索引，而是引入几种强大的数组作技术。</li></ul><h4 id="追加新值"><a href="#追加新值" class="headerlink" title="追加新值"></a>追加新值</h4><ul><li>要将新元素追加到 store 中的数组，请指定目标数组并将索引设置为所需位置。 <ul><li><span class="desc">例如: 如果要将新元素追加到数组的末尾，则可以将索引设置为：array.length</span><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">setStore</span>(<span class="string">&quot;users&quot;</span>, <span class="function">(<span class="params">otherUsers</span>) =&gt;</span> [</span><br><span class="line">  ...otherUsers,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">id</span>: <span class="number">3</span>,</span><br><span class="line">    <span class="attr">username</span>: <span class="string">&quot;michael584&quot;</span>,</span><br><span class="line">    <span class="attr">location</span>: <span class="string">&quot;Nigeria&quot;</span>,</span><br><span class="line">    <span class="attr">loggedIn</span>: <span class="literal">false</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line"><span class="comment">// 变成这样</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">setStore</span>(<span class="string">&quot;users&quot;</span>, store.<span class="property">users</span>.<span class="property">length</span>, &#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="number">3</span>,</span><br><span class="line">  <span class="attr">username</span>: <span class="string">&quot;michael584&quot;</span>,</span><br><span class="line">  <span class="attr">location</span>: <span class="string">&quot;Nigeria&quot;</span>,</span><br><span class="line">  <span class="attr">loggedIn</span>: <span class="literal">false</span>,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="修改多个元素"><a href="#修改多个元素" class="headerlink" title="修改多个元素"></a>修改多个元素</h4><ul><li>使用路径语法，可以定位数组的元素子集，或对象的属性，通过指定数组或索引范围。</li><li>如果store.users是对象数组，可以一次设置多个索引对应的属性<ul><li><span class="desc">示例：setStore(“users”, [2, 7, 10], “loggedIn”, false)</span></li></ul></li><li>如果store.users是对象将对象名映射到对象，可以一次设置多个用户的属性<ul><li><span class="desc">示例：setStore(“users”, [“me”, “you”], “loggedIn”, false)</span></li></ul></li><li>特别是对于数组，可以通过from 和 to指定索引范围（包括from 和to值）<ul><li><span class="desc">示例：setStore(“users”, {from: 1, to: store.users.length - 1}, “loggedIn”, false) &#x2F;&#x2F; 除了索引0都改变 </span></li></ul></li><li>在 range 对象中包含一个键来指定步长<ul><li><span class="desc">示例：setStore(“users”, { from: 0, to: store.users.length - 1, by: 2 }, “loggedIn”, false) 每2的倍数改变</span></li></ul></li></ul><h4 id="动态值分配"><a href="#动态值分配" class="headerlink" title="动态值分配"></a>动态值分配</h4><ul><li>函数接收旧值作为参数，允许您根据现有值计算新值</li><li><span class="desc">示例：setStore(“users”, 3, “loggedIn” , (loggedIn) &#x3D;&gt; !loggedIn)</span></li></ul><h4 id="筛选值"><a href="#筛选值" class="headerlink" title="筛选值"></a>筛选值</h4><ul><li>使用函数充当过滤器，该函数接收旧值和索引作为参数</li><li>除了.startsWith，还可以使用其他数组方法，例如.find以筛选所需的值。</li><li><span class="desc">示例：setStore(“users”, (user) &#x3D;&gt; user.username.startsWith(“t”), “loggedIn”, false) &#x2F;&#x2F; username开头为t的改变</span></li></ul><h3 id="修改对象"><a href="#修改对象" class="headerlink" title="修改对象"></a>修改对象</h3><ul><li>如果新值是对象，则会与现有值进行浅层合并。如果新对象中的值于旧对象有重叠，把旧值改为新值。</li><li>可以直接对 store 进行更改，而无需展开现有对象的属性。</li><li><span class="desc">示例：setStore(“users”, 0, { id: 109,})</span></li></ul><h3 id="Store-的实体函数"><a href="#Store-的实体函数" class="headerlink" title="Store 的实体函数"></a>Store 的实体函数</h3><h4 id="存储更新-produce"><a href="#存储更新-produce" class="headerlink" title="存储更新 produce"></a>存储更新 produce</h4><ul><li>提供了一种处理数据的方法，就好像它是可变的 JavaScript 对象一样。</li><li>还提供了一种同时更改多个属性的方法，无需多次调用。</li><li>注意：<span class="key">它是专门为处理数组和对象而设计的。其他集合类型与此实用程序不兼容。</span></li><li>produce vs setStore<ul><li>两者都可用于修改状态，但关键区别在于它们如何处理数据。 </li><li><span class="en">produce</span>：允许使用 State 的临时 Draft，应用更改，然后生成新的 Store 不可变版本。</li><li><span class="en">setStore</span>：提供了一种更直接的方式来直接更新 store，而无需创建新版本。</li></ul></li><li>示例：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; produce &#125; <span class="keyword">from</span> <span class="string">&quot;solid-js/store&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改users的0号元素的值</span></span><br><span class="line"><span class="title function_">setStore</span>(</span><br><span class="line">  <span class="string">&quot;users&quot;</span>,</span><br><span class="line">  <span class="number">0</span>,</span><br><span class="line">  <span class="title function_">produce</span>(<span class="function">(<span class="params">user</span>) =&gt;</span> &#123;</span><br><span class="line">    user.<span class="property">username</span> = <span class="string">&quot;newUsername&quot;</span></span><br><span class="line">    user.<span class="property">location</span> = <span class="string">&quot;newLocation&quot;</span></span><br><span class="line">  &#125;)</span><br><span class="line">)</span><br></pre></td></tr></table></figure></li></ul><h4 id="数据集成reconcile"><a href="#数据集成reconcile" class="headerlink" title="数据集成reconcile"></a>数据集成reconcile</h4><ul><li>当需要将新信息合并到现有store时，reconcile可能会很有用。</li><li><span class="en1">reconcile将确定新数据和现有数据之间的差异，并仅在值发生更改时启动更新</span>，从而避免不必要的更新</li><li>示例：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; createStore, reconcile &#125; <span class="keyword">from</span> <span class="string">&quot;solid-js/stores&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> [data, setData] = <span class="title function_">createStore</span>(&#123;</span><br><span class="line">  <span class="attr">animals</span>: [<span class="string">&#x27;cat&#x27;</span>, <span class="string">&#x27;dog&#x27;</span>, <span class="string">&#x27;bird&#x27;</span>, <span class="string">&#x27;gorilla&#x27;</span>]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> newData = <span class="title function_">getNewData</span>() <span class="comment">// eg. contains [&#x27;cat&#x27;, &#x27;dog&#x27;, &#x27;bird&#x27;, &#x27;gorilla&#x27;, &#x27;koala&#x27;]</span></span><br><span class="line"><span class="title function_">setData</span>(<span class="string">&#x27;animals&#x27;</span>, <span class="title function_">reconcile</span>(newData))</span><br></pre></td></tr></table></figure></li></ul><h4 id="提取原始数据unwrap"><a href="#提取原始数据unwrap" class="headerlink" title="提取原始数据unwrap"></a>提取原始数据unwrap</h4><ul><li>将 store 转换为标准对象的方法</li><li>示例：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createStore, unwrap &#125; <span class="keyword">from</span> <span class="string">&quot;solid-js/store&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> [data, setData] = <span class="title function_">createStore</span>(&#123;</span><br><span class="line">  <span class="attr">animals</span>: [<span class="string">&quot;cat&quot;</span>, <span class="string">&quot;dog&quot;</span>, <span class="string">&quot;bird&quot;</span>, <span class="string">&quot;gorilla&quot;</span>],</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> rawData = <span class="title function_">unwrap</span>(data)</span><br></pre></td></tr></table></figure></li></ul><h2 id="Refs"><a href="#Refs" class="headerlink" title="Refs"></a>Refs</h2><ul><li>以附加到任何元素，用于引用 DOM 元素或组件实例</li></ul><h3 id="访问DOM元素"><a href="#访问DOM元素" class="headerlink" title="访问DOM元素"></a>访问DOM元素</h3><ul><li>不建议通过元素选择器访问 DOM 元素</li><li>由于 Solid 中的元素可以根据state在 DOM 中添加或删除，因此需要等到元素附加到 DOM 后才能访问它。可以通过使用onMount等到元素附加到 DOM 后再访问它</li></ul><h3 id="JSX作为值"><a href="#JSX作为值" class="headerlink" title="JSX作为值"></a>JSX作为值</h3><ul><li>可以在直接访问 DOM 元素时分配给变量</li><li>优点：可以多次使用，而不用担心重复</li><li>缺点：将元素和任何子元素与 JSX 结构的其余部分分开。难阅读</li><li>示例：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Component</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> myElement = <span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>My Element<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;myElement&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="Solid-中的-Refs"><a href="#Solid-中的-Refs" class="headerlink" title="Solid 中的 Refs"></a>Solid 中的 Refs</h3><ul><li>可以直接在 JSX 模板中访问 DOM 元素，从而保持元素的结构不变</li><li>先赋值后再添加DOM<ul><li>示例：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Component</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> myElement;<span class="comment">//  先定义一个变量（赋值发生在将元素添加到 DOM 之前的创建时）</span></span><br><span class="line">  <span class="comment">// TS声明定义：let myElement!: HTMLDivElement;</span></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">ref</span>=<span class="string">&#123;myElement&#125;</span>&gt;</span>My Element<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li>如果在将元素添加到 DOM 之前需要访问该元素，则可以使用以下回调形式：<ul><li>示例：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;p ref=&#123;<span class="function">(<span class="params">el</span>) =&gt;</span> &#123;</span><br><span class="line">  myElement = el <span class="comment">// el已经创建但不能添加到DOM</span></span><br><span class="line">  &#125;&#125;&gt;</span><br><span class="line">  <span class="title class_">My</span> <span class="title class_">Element</span></span><br><span class="line">&lt;/p&gt;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="信号也可以用作-refs"><a href="#信号也可以用作-refs" class="headerlink" title="信号也可以用作 refs"></a>信号也可以用作 refs</h3><ul><li>直接访问元素时有用，但在组件首次呈现时该元素可能不存在，或者可能在某个时候从 DOM 中删除。</li><li>可以嵌套在条件判断中，条件添加成立才显示</li></ul><h3 id="转发refs"><a href="#转发refs" class="headerlink" title="转发refs"></a>转发refs</h3><ul><li>作用：允许将 ref 从父组件传递到子组件的技术</li><li>过程：将 ref 传递给子组件，然后将 ref 分配给子组件的元素，子组件获取props拿到该值</li><li>类似于react中的组件传递值</li></ul><h3 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h3><ul><li>作用：允许将可重用的行为附加到 DOM 元素</li><li>功能：<ul><li>在一个元素上有多个指令</li><li>将响应式数据传递给回调</li></ul></li><li>本质：具有特定签名的函数：<code>function directive(element: Element, accessor: () =&gt; any): void</code><ul><li><span class="en">element</span>: 应用指令的DOM元素</li><li><span class="en">accessor</span>：一个函数，用于访问传递给指令的值</li></ul></li><li>指令函数在渲染时调用，但在将元素添加到DOM之前调用</li><li>用途： <ul><li>创建信号</li><li>启动Effect</li><li>添加事件侦听器等</li></ul></li></ul><h2 id="细粒度反应性"><a href="#细粒度反应性" class="headerlink" title="细粒度反应性"></a>细粒度反应性</h2><ul><li>反应性确保对数据更改的自动响应，无需手动更新用户界面 （UI）。 通过将 UI 元素连接到基础数据，更新变得自动化。 在细粒度的反应式系统中，应用程序现在将能够进行高度针对性和特定的更新。</li><li>Solid vs React<ul><li>在 Solid 中，对需要更改的目标属性进行更新，从而避免更广泛的更新，有时甚至是不必要的更新。 </li><li>React 会重新执行整个组件来更改单个 attribute，这可能效率较低。</li></ul></li></ul><h3 id="构建反应式系统"><a href="#构建反应式系统" class="headerlink" title="构建反应式系统"></a>构建反应式系统</h3><ul><li>示例：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">createSignal</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createEffect</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> [count, setCount] = <span class="title function_">createSignal</span>(<span class="number">0</span>);</span><br><span class="line"><span class="comment">// 按照观察者模式：signals 将维护订阅者effect的</span></span><br><span class="line"><span class="title function_">createEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;The count is &quot;</span> + <span class="title function_">count</span>());</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><h3 id="响应式原语"><a href="#响应式原语" class="headerlink" title="响应式原语"></a>响应式原语</h3><ul><li>在Solid的响应性系统中，有两个关键元素：信号和观察者。</li><li>响应式功能的基础，也是核心元素：<ul><li><span class="en">Stores</span>：这些代理在后台创建、读取和写入信号</li><li><span class="en">Memo</span>：类似于Effects，但区别在于它们返回信号并通过缓存优化计算。它们根据效果的行为进行更新，但更适合计算优化。</li><li><span class="en">resources</span>：基于 memo 的概念，将网络请求的异步性转换为同步性，其中结果嵌入到 signal 中。</li><li>渲染效果是一种立即启动的定制效果，专为管理渲染过程而设计。</li></ul></li></ul><h3 id="制作系统反应式"><a href="#制作系统反应式" class="headerlink" title="制作系统反应式"></a>制作系统反应式</h3><ul><li>示例：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> currentSubscriber = <span class="literal">null</span> <span class="comment">// 初始化订阅</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createSignal</span>(<span class="params">initValue</span>) &#123; <span class="comment">// 创建信号</span></span><br><span class="line">  <span class="keyword">let</span> value = initValue</span><br><span class="line">  <span class="keyword">const</span> subscribers = <span class="keyword">new</span> <span class="title class_">Set</span>()</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">getter</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(currentSubscriber) &#123; <span class="comment">// 添加订阅者</span></span><br><span class="line">      subscribers.<span class="title function_">add</span>(currentSubscriber)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> value</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">setter</span>(<span class="params">newValue</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(value === initValue) <span class="keyword">return</span> <span class="comment">// 相同不处理</span></span><br><span class="line">    value = newValue  <span class="comment">// 更新变量</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">const</span> subscribers <span class="keyword">of</span> subscribes) &#123; <span class="comment">// 通知所有订阅者</span></span><br><span class="line">      <span class="title function_">subscriber</span>()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span>  [getter, setter]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createEffect</span>(<span class="params">fn</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> preSubscriber = currentSubscriber</span><br><span class="line">  currentSubscriber = fn</span><br><span class="line">  <span class="title function_">fn</span>() <span class="comment">// 注册signals</span></span><br><span class="line">  currentSubscriber = preSubscriber <span class="comment">// 一旦函数运行，重置订阅者</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="验证反应式系统"><a href="#验证反应式系统" class="headerlink" title="验证反应式系统"></a>验证反应式系统</h3><ul><li>可以使用定时器验证每隔n秒是否有响应更改</li></ul><h3 id="管理反应式系统中的生命周期"><a href="#管理反应式系统中的生命周期" class="headerlink" title="管理反应式系统中的生命周期"></a>管理反应式系统中的生命周期</h3><ul><li>在反应式系统中，各种元素（同称为节点）是相互关联的。</li><li>这些节点可以是signal、effect或其他反应式基元。</li><li>它们充当共同构成系统反应行为的各个单元。</li></ul><h4 id="效果跟踪的同步性质"><a href="#效果跟踪的同步性质" class="headerlink" title="效果跟踪的同步性质"></a>效果跟踪的同步性质</h4><ul><li>系统注册订阅者，运行effect函数，然后取消注册订阅者。所有的这些都是以线性、同步的顺序进行</li><li>在createEffect中创建setTimeout。由于系统式同步的，因此它不会等待完成。在setTimeout中触发getter式，全局范围不在具有已注册的订阅者。跟踪会出现问题</li></ul><h4 id="处理异步效果"><a href="#处理异步效果" class="headerlink" title="处理异步效果"></a>处理异步效果</h4><ul><li>虽然基本的响应式系统式同步的。但是像Solid这样的框架提供了处理异步的功能。</li><li><span class="en">on</span>：提供了手动指定效果的依赖关系方法</li><li><span class="en">resource</span>: 将网络请求的异步性转换为同步性，并将结果嵌入信号中</li></ul><h2 id="Router"><a href="#Router" class="headerlink" title="Router"></a>Router</h2><h3 id="基础使用"><a href="#基础使用" class="headerlink" title="基础使用"></a>基础使用</h3><ul><li>安装：<span class="en">npm install @solidjs&#x2F;router</span></li><li><span class="en1">基础设置</span>：组件将匹配URL以显示所需的页面<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">render</span>(<span class="function">() =&gt;</span> <span class="language-xml"><span class="tag">&lt;<span class="name">Router</span> /&gt;</span></span>, <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;root&quot;</span>))</span><br></pre></td></tr></table></figure></li><li><span class="en1">提供根级布局</span>:不会在页面更改时更新，是顶级导航和上下文提供程序的理想位置<ul><li>把 router 的 根节点挂载在App上<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; render &#125; <span class="keyword">from</span> <span class="string">&quot;solid-js/web&quot;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Router</span> &#125; <span class="keyword">from</span> <span class="string">&quot;@solidjs/router&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">App</span> = (<span class="params">props</span>) =&gt; &#123;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">    &#123;props.children&#125;</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">render</span>(<span class="function">() =&gt;</span> <span class="language-xml"><span class="tag">&lt;<span class="name">Router</span> <span class="attr">root</span>=<span class="string">&#123;App&#125;</span> /&gt;</span></span>, <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;root&quot;</span>))</span><br></pre></td></tr></table></figure></li></ul></li><li><span class="en1">添加路由</span>: 在Router嵌入Route，Route可以指定一个path和一个组件</li><li><span class="en1">catchall路由</span>：用于路由器找不到的页面，如404页面。<ul><li>使用方式：<span class="en1">*参数名</span>，参数名为可选</li></ul></li><li><span class="en1">创建指向路由的链接</span><ul><li>途径1：可以使用原生锚点标签（<code>&lt;a&gt;</code>）</li><li>途径2：使用<span class="en"><code>&lt;A&gt;组件</code></span>：提供路由的导航，可以使用CSS、inactiveClass和activeClass属性<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; render &#125; <span class="keyword">from</span> <span class="string">&quot;solid-js/web&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Router</span>, <span class="title class_">Route</span>, A &#125; <span class="keyword">from</span> <span class="string">&quot;@solidjs/router&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Home</span> <span class="keyword">from</span> <span class="string">&quot;./pages/Home&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Users</span> <span class="keyword">from</span> <span class="string">&quot;./pages/Users&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">NotFound</span> <span class="keyword">from</span> <span class="string">&quot;./pages/NotFound&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">App</span> = (<span class="params">props</span>) =&gt; (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">    &#123;/* 创建指向路由的链接: href指向path一样的路由 */&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">nav</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">A</span> <span class="attr">href</span>=<span class="string">&quot;/&quot;</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">A</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">A</span> <span class="attr">href</span>=<span class="string">&quot;/users&quot;</span>&gt;</span>Users<span class="tag">&lt;/<span class="name">A</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Site Title<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    &#123;props.children&#125;</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="title function_">render</span>(</span><br><span class="line">  <span class="function">() =&gt;</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Router</span> <span class="attr">root</span>=<span class="string">&#123;App&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">     &#123;/*  添加路由 */&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/&quot;</span> <span class="attr">component</span>=<span class="string">&#123;Home&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/users&quot;</span> <span class="attr">component</span>=<span class="string">&#123;Users&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;/*  catchall路由示例，NotFound为遇到404是显示的页面组件 */&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;*paramName&quot;</span> <span class="attr">component</span>=<span class="string">&#123;NotFound&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">Router</span>&gt;</span></span></span><br><span class="line">  ),</span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;root&quot;</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="延迟加载路由组件"><a href="#延迟加载路由组件" class="headerlink" title="延迟加载路由组件"></a>延迟加载路由组件</h3><ul><li><span class="en">lazy函数</span>：推迟组件的加载，直到导航到该组件为止</li><li>示例：组件引入时使用<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; lazy &#125; <span class="keyword">from</span> <span class="string">&quot;solid-js&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Users</span> = <span class="title function_">lazy</span>(<span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&quot;./pages/Users&quot;</span>));</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Home</span> = <span class="title function_">lazy</span>(<span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&quot;./pages/Home&quot;</span>));</span><br></pre></td></tr></table></figure></li></ul><h3 id="动态路由"><a href="#动态路由" class="headerlink" title="动态路由"></a>动态路由</h3><ul><li>使用<span class="en">冒号:</span>,后面可以是任意字符串，只要url符合该模式，组件都会显示</li><li><span class="desc">示例：<code>&lt;Route path=&quot;/users/:id&quot; component=&#123;User&#125; /&gt;</code></span></li><li>关于动画&#x2F;过渡的注意事项：共享相同路径的路由将被视为同一路由。<ul><li>如果想强制重新渲染，可以将组件包装在一个带键的<code>&lt;Show&gt;</code>:</li><li>示例：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="title class_">Show</span> when=&#123;params.<span class="property">something</span>&#125; keyed&gt;</span><br><span class="line">    &lt;<span class="title class_">MyComponent</span>&gt;</span><br><span class="line">&lt;/<span class="title class_">Show</span>&gt;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="访问参数-useParams"><a href="#访问参数-useParams" class="headerlink" title="访问参数 useParams()"></a>访问参数 useParams()</h4><ul><li>含义：使用useParams访问后，可以在组件中使用它们</li><li>useParams对于createResource和createSignal，可以基于路由参数创建动态行为</li><li>示例：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createResource &#125; <span class="keyword">from</span> <span class="string">&quot;solid-js&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; useParams &#125; <span class="keyword">from</span> <span class="string">&quot;@solidjs/router&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">fetchUser</span>(<span class="params">id</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> response = <span class="keyword">await</span> <span class="title function_">fetch</span>(</span><br><span class="line">    <span class="string">`https://jsonplaceholder.typicode.com/users/<span class="subst">$&#123;id&#125;</span>`</span></span><br><span class="line">  );</span><br><span class="line">  <span class="keyword">return</span> response.<span class="title function_">json</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">User</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> params = <span class="title function_">useParams</span>();</span><br><span class="line">  <span class="keyword">const</span> [data] = <span class="title function_">createResource</span>(<span class="function">() =&gt;</span> params.<span class="property">id</span>, fetchUser); <span class="comment">// 通过参数去创建resource</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Show</span> <span class="attr">when</span>=<span class="string">&#123;!data.loading&#125;</span> <span class="attr">fallback</span>=<span class="string">&#123;</span>&lt;<span class="attr">p</span>&gt;</span>Loading...<span class="tag">&lt;/<span class="name">p</span>&gt;</span>&#125;&gt;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">p</span>&gt;</span>Name: &#123;data().name&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">p</span>&gt;</span>Email: &#123;data().email&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">p</span>&gt;</span>Phone: &#123;data().phone&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">Show</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul><h4 id="验证路由-matchFilters"><a href="#验证路由-matchFilters" class="headerlink" title="验证路由 matchFilters"></a>验证路由 matchFilters</h4><ul><li>含义：传递一个每个参数对应的验证规则的对象</li><li>示例：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="attr">filters</span>: <span class="title class_">MatchFilters</span> = &#123; <span class="comment">// 任何一个不符合都不匹配</span></span><br><span class="line">  <span class="attr">parent</span>: [<span class="string">&quot;mom&quot;</span>, <span class="string">&quot;dad&quot;</span>], <span class="comment">// 只允许是这两个字符串</span></span><br><span class="line">  <span class="attr">id</span>: <span class="regexp">/^\d+$/</span>, <span class="comment">// 只允许数字</span></span><br><span class="line">  <span class="attr">withHtmlExtension</span>: <span class="function">(<span class="params">v: string</span>) =&gt;</span> v.<span class="property">length</span> &gt; <span class="number">5</span> &amp;&amp; v.<span class="title function_">endsWith</span>(<span class="string">&quot;.html&quot;</span>), <span class="comment">// 只允许v的长度大于5，且后缀为.html</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title function_">render</span>(<span class="function">() =&gt;</span> (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">Router</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">Route</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">path</span>=<span class="string">&quot;/users/:parent/:id/:withHtmlExtension&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">component</span>=<span class="string">&#123;User&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">matchFilters</span>=<span class="string">&#123;filters&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    /&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">Router</span>&gt;</span></span></span><br><span class="line">), <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;root&quot;</span>));</span><br></pre></td></tr></table></figure></li></ul><h4 id="可选参数"><a href="#可选参数" class="headerlink" title="可选参数 ?"></a>可选参数 ?</h4><ul><li>在参数名称的<span class="en">末尾添加?</span>，将指定参数设置为可选参数</li><li><span class="desc">示例: <code>&lt;Route path=&quot;/stories/:id?&quot; component=&#123;Stories&#125; /&gt;</code> id可有可无都不影响</span></li></ul><h4 id="通配符路由"><a href="#通配符路由" class="headerlink" title="通配符路由 *"></a>通配符路由 *</h4><ul><li>*必须是<span class="en1">路径的最后一部分</span></li><li><span class="desc">示例：<code>&lt;Route path=&quot;foo/*&quot; component=&#123;Foo&#125; /&gt;</code></span></li><li>要将通配符部分作为参数公开给组件，可以将其命名：<ul><li><span class="en"><code>&lt;Route path=&quot;foo/*any&quot; component=&#123;Foo&#125; /&gt;</code></span></li></ul></li></ul><h4 id="多路径"><a href="#多路径" class="headerlink" title="多路径"></a>多路径</h4><ul><li>使用数组定义路径</li><li><span class="desc">示例：<code>&lt;Route path=&#123;[&quot;login&quot;, &quot;register&quot;]&#125; component=&#123;Login&#125; /&gt;</code></span></li></ul><h3 id="嵌套路由"><a href="#嵌套路由" class="headerlink" title="嵌套路由"></a>嵌套路由</h3><ul><li><span class="en">component 属性</span>可以直接传递同页面的函数组件，也可以直接使用箭头函数返回一个Dom</li><li>只有叶节点（最里面的组件）才会被赋予</li><li>路由可以无限嵌套</li><li>示例： 两个指向同一个URL并渲染同一组件<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="title class_">Route</span> path=<span class="string">&quot;/users&quot;</span> component=&#123;<span class="title class_">Users</span>&#125; /&gt; <span class="comment">// 让 parent 成为自己的路由，你必须单独指定它</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/users/:id&quot;</span> <span class="attr">component</span>=<span class="string">&#123;User&#125;</span> /&gt;</span></span></span><br><span class="line"></span><br><span class="line">&#123;<span class="comment">/* 嵌套组件 */</span>&#125;</span><br><span class="line">&lt;<span class="title class_">Route</span> path=<span class="string">&quot;/users&quot;</span>&gt; <span class="comment">// 可以在这里添加一个component=&#123;函数组件&#125;，该组件中&lt;A&gt;指向/，还使用props.children ,返回的节点应该是声明props.children的父节点，而不是下面单独指定的父节点</span></span><br><span class="line">  &#123;<span class="comment">/* 必须单独指定父节点，才会成为自己的路由 */</span>&#125;</span><br><span class="line">  &lt;<span class="title class_">Route</span> path=<span class="string">&quot;/&quot;</span> component=&#123;<span class="title class_">Users</span>&#125; /&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/:id&quot;</span> <span class="attr">component</span>=<span class="string">&#123;User&#125;</span> /&gt;</span></span></span><br><span class="line">&lt;/<span class="title class_">Route</span>&gt;</span><br></pre></td></tr></table></figure></li></ul><h3 id="预加载函数-preload"><a href="#预加载函数-preload" class="headerlink" title="预加载函数 preload"></a>预加载函数 preload</h3><ul><li>使用 preload 函数，数据获取与加载 route 并行启动</li><li>preload 函数通过在 Route 加载后调用或者在链接悬停时急切地调用</li><li>示例：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">preloadUser</span>(<span class="params">&#123; params, location &#125;</span>) &#123;&#125; <span class="comment">// 该函数传递用于访问路由信息的对象</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义并传递preload</span></span><br><span class="line">&lt;<span class="title class_">Route</span> path=<span class="string">&quot;/users/:id&quot;</span> component=&#123;<span class="title class_">User</span>&#125; preload=&#123;preloadUser&#125; /&gt;</span><br></pre></td></tr></table></figure></li><li>可以从专用文件或文件中导出与路由相对应的预加载函数和数据包装器。此模式提供了一种无需加载其他任何内容即可导入 data 函数的方法</li><li>示例：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/pages/users/[id].data.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; query &#125; <span class="keyword">from</span> <span class="string">&quot;@solidjs/router&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> getUser = <span class="title function_">query</span>(<span class="title function_">async</span> (id) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> (<span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">`https://swapi.tech/api/people/<span class="subst">$&#123;id&#125;</span>/`</span>)).<span class="title function_">json</span>();</span><br><span class="line">&#125;, <span class="string">&quot;getUser&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">preloadUser</span>(<span class="params">&#123; params, location, intent &#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">getUser</span>(params.<span class="property">id</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用时直接导入</span></span><br><span class="line"><span class="keyword">import</span> &#123; preloadUser &#125; <span class="keyword">from</span> <span class="string">&quot;./pages/users/[id].data.js&quot;</span>;</span><br></pre></td></tr></table></figure></li><li>在除 preload 之外的任何时间调用时，preload 函数的值都会传递给页面组件。可以初始化页面或使用createAsync</li><li>注意：<span class="key">要防止多次提取或触发重新提取，使用query</span></li></ul><h2 id="数据获取-createResource"><a href="#数据获取-createResource" class="headerlink" title="数据获取 createResource"></a>数据获取 createResource</h2><ul><li>专为管理异步数据获取而设计的专用信号。</li><li>它包装了异步操作，提供了一种处理各种状态的方法：<span class="en">loading、success 和 error。</span></li><li>此功能是非阻塞的，这意味着即使在检索信息期间，也可以保证应用程序保持响应。</li></ul><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><ul><li>createResource需要一个返回 Promise 作为其参数的函数。在调用时返回一个信号，该信号具有反应性属性：<ul><li><span class="en">state</span>：当前状态(unresolved、pending、ready、refreshing 或 errored)</li><li><span class="en">loading</span>：当前任务是否正在进行，boolean类型</li><li><span class="en">error</span>：错误的信息。</li><li><span class="en">latest</span>：返回最新数据或结果。</li></ul></li><li>示例：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">fetchUser</span> = <span class="keyword">async</span> (<span class="params">id</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> response = <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">`https://swapi.dev/api/people/<span class="subst">$&#123;id&#125;</span>/`</span>);</span><br><span class="line">  <span class="keyword">return</span> response.<span class="title function_">json</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> [user] = <span class="title function_">createResource</span>(userId, fetchUser);</span><br><span class="line"><span class="comment">// 使用 user.loading ...</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="调用多个异步事件-Suspense"><a href="#调用多个异步事件-Suspense" class="headerlink" title="调用多个异步事件 Suspense"></a>调用多个异步事件 Suspense</h3><ul><li><span class="en1">同步多个异步事件的显示。</span>允许等待所有异步事件解析时回退占位符，防止显示部分加载内容</li><li>直接在使用异步语句的最外层添加</li><li>示例：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="title class_">Suspense</span> fallback=&#123;<span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Loading...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>&#125;&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">Switch</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">Match</span> <span class="attr">when</span>=<span class="string">&#123;user.error&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">span</span>&gt;</span>Error: &#123;user.error.message&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">Match</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">Match</span> <span class="attr">when</span>=<span class="string">&#123;user()&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;JSON.stringify(user())&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">Match</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">Switch</span>&gt;</span></span></span><br><span class="line">&lt;/<span class="title class_">Suspense</span>&gt;</span><br></pre></td></tr></table></figure></li></ul><h3 id="动态数据处理"><a href="#动态数据处理" class="headerlink" title="动态数据处理"></a>动态数据处理</h3><h4 id="mutate"><a href="#mutate" class="headerlink" title="mutate"></a>mutate</h4><ul><li>在即时反馈或响应很重要的情况下，该方法提供“乐观突变”。</li><li>此功能在任务列表等应用程序中特别有价值。</li><li><span class="desc">例如: 当用户输入新任务并单击按钮时，无论与服务器正在进行的数据通信如何，列表都将立即刷新。</span></li><li>示例：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">For</span>, createResource &#125; <span class="keyword">from</span> <span class="string">&quot;solid-js&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">TodoList</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [tasks, &#123; mutate &#125;] = <span class="title function_">createResource</span>(fetchTasksFromServer);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">For</span> <span class="attr">each</span>=<span class="string">&#123;tasks()&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          &#123;(task) =&gt; (</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;task.name&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          )&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">For</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-xml">          mutate((todos) =&gt; [...todos, &quot;do new task&quot;]); // add todo for user</span></span><br><span class="line"><span class="language-xml">          // make a call to send to database</span></span><br><span class="line"><span class="language-xml">        &#125;&#125;</span></span><br><span class="line"><span class="language-xml">      &gt;</span></span><br><span class="line"><span class="language-xml">        Add Task</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="refetch"><a href="#refetch" class="headerlink" title="refetch"></a>refetch</h4><ul><li>当需要实时反馈时，该方法可用于重新加载当前查询，而不管任何更改。</li><li>示例：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createResource, onCleanup &#125; <span class="keyword">from</span> <span class="string">&quot;solid-js&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">StockPriceTicker</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [prices, &#123; refetch &#125;] = <span class="title function_">createResource</span>(fetchStockPrices);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> timer = <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">refetch</span>()</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">  <span class="title function_">onCleanup</span>(<span class="function">() =&gt;</span> <span class="built_in">clearInterval</span>(timer))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;style&gt;
    .en1 {
        color: #3D82AC;
        font-weight: 600;
    }
    .en {
    color: green;
        font-weight:600;
  }
  .desc </summary>
      
    
    
    
    <category term="JS框架" scheme="http://example.com/categories/JS%E6%A1%86%E6%9E%B6/"/>
    
    
    <category term="Solid" scheme="http://example.com/tags/Solid/"/>
    
  </entry>
  
  <entry>
    <title>SVG基础</title>
    <link href="http://example.com/2025/03/10/%E5%8F%AF%E8%A7%86%E5%8C%96/SVG%E5%9F%BA%E7%A1%80/"/>
    <id>http://example.com/2025/03/10/%E5%8F%AF%E8%A7%86%E5%8C%96/SVG%E5%9F%BA%E7%A1%80/</id>
    <published>2025-03-10T04:01:56.690Z</published>
    <updated>2025-06-30T07:27:39.037Z</updated>
    
    <content type="html"><![CDATA[<style>.key {  color: #483D8B;  font-weight: 700;}.en {  color: green;  font-weight:600;}.desc {  color: #CD853F;  font-weight: 600;  font-size:14px;}.en1 {  color: #3D82AC;  font-weight: 600;}</style><h1 id="svg标签"><a href="#svg标签" class="headerlink" title="svg标签"></a>svg标签</h1><ul><li>绘制图形使，使用svg标签包裹</li></ul><h2 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h2><h3 id="width-height-决定svg-的宽高"><a href="#width-height-决定svg-的宽高" class="headerlink" title="width,height: 决定svg 的宽高"></a><span class="en">width,height</span>: 决定svg 的宽高</h3><ul><li>注意：默认宽高300*150，内部元素大于时，溢出部分被隐藏</li></ul><h3 id="viewBox-定义svg可以显示的区域"><a href="#viewBox-定义svg可以显示的区域" class="headerlink" title="viewBox: 定义svg可以显示的区域"></a><span class="en">viewBox</span>: 定义svg可以显示的区域</h3><ul><li>语法：<span class="en">viewBox&#x3D;”x y w h”</span></li><li>x,y为起始点，w,h为显示区域的宽高</li><li>示例：<ul><li>viewBox：以(0,0)为圆点，宽高为100*100的显示区域</li><li>svg: 宽高300*300</li><li>circle: 以(100,100)为圆点，半径为100</li><li>最终显示：viewBox在svg中截取的这一部分并放大到svg布局中，相当于viewBox区域放大3倍<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;svg width=<span class="string">&quot;300&quot;</span> height=<span class="string">&quot;300&quot;</span> viewBox=<span class="string">&quot;0 0 100 100&quot;</span>&gt; </span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">circle</span> <span class="attr">cx</span>=<span class="string">&quot;100&quot;</span> <span class="attr">cy</span>=<span class="string">&quot;100&quot;</span> <span class="attr">r</span>=<span class="string">&quot;100&quot;</span>/&gt;</span></span></span><br><span class="line">&lt;/svg&gt;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="version-指明SVG的版本和规范"><a href="#version-指明SVG的版本和规范" class="headerlink" title="version: 指明SVG的版本和规范"></a><span class="en">version</span>: 指明SVG的版本和规范</h3><ul><li>目前只有1.0和1.1版本，只做说明，对渲染没有影响</li></ul><h3 id="xmlns和xmlns-xlink"><a href="#xmlns和xmlns-xlink" class="headerlink" title="xmlns和xmlns:xlink:"></a><span class="en">xmlns和xmlns:xlink</span>:</h3><ul><li>svg是使用xml格式定义的图形，svg文件是纯粹的xml文件</li><li>xmlns用于声明命名空间，再次声明下的所有子标签都属于这个空间内</li><li>xmlns:xlink 表示前缀为xlink的标签和属性，应该由理解该规范的UA 使用xlink规范 来解释。</li><li><span class="desc">注解：UA是User Agent的简称。User Agent是Http协议中的一部分，属于头域的组成部分。通俗地讲UA是一种向访问网站提供你所使用的浏览器类型、操作系统、浏览器内核等信息的标识。通过这个标识，用户所访问的网站可以显示不同的排版，从而为用户提供更好的体验或者进行信息统计</span><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;svg xmlns=<span class="string">&quot;http://www.w3.org/2000/svg&quot;</span> <span class="attr">xmlns</span>:xlink=<span class="string">&quot;http://www.w3.org/1999/xlink&quot;</span>&gt;</span><br><span class="line">    <span class="comment">// ......</span></span><br><span class="line">&lt;/svg&gt;</span><br></pre></td></tr></table></figure></li></ul><h1 id="基本图形"><a href="#基本图形" class="headerlink" title="基本图形"></a>基本图形</h1><ul><li>以下所有代码都包裹在该svg标签中<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;svg</span><br><span class="line">  width=<span class="string">&quot;300&quot;</span></span><br><span class="line">  height=<span class="string">&quot;300&quot;</span></span><br><span class="line">  xmlns=<span class="string">&quot;http://www.w3.org/2000/svg&quot;</span></span><br><span class="line">  style=<span class="string">&quot;border: 2px solid orange&quot;</span></span><br><span class="line">  &gt;&lt;/svg&gt;</span><br></pre></td></tr></table></figure></li></ul><h2 id="圆-circle"><a href="#圆-circle" class="headerlink" title="圆 circle"></a>圆 circle</h2><ul><li>语法: <span class="en"><code>&lt;circle cx=&quot;5&quot; cy=&quot;5&quot; r=&quot;4&quot; /&gt;</code></span></li><li>参数：<ul><li><span class="en">cx</span>: 圆心所在x位置</li><li><span class="en">cy</span>：圆心所在y位置</li><li><span class="en">r</span>：圆的半径，决定圆大小</li></ul></li><li>示例：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;circle cx=<span class="string">&quot;100&quot;</span> cy=<span class="string">&quot;100&quot;</span> r=<span class="string">&quot;20&quot;</span>/&gt;</span><br></pre></td></tr></table></figure><img src="/../../img/visualization/circle.png" alt="圆"  data-tag='post-image' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></li></ul><h2 id="矩形-rect"><a href="#矩形-rect" class="headerlink" title="矩形 rect"></a>矩形 rect</h2><ul><li>语法：<span class="en"><code>&lt;rect x=&quot;0&quot; y=&quot;0&quot; rx=&quot;5&quot; ry=&quot;5&quot; width=&quot;300&quot; height=&quot;200&quot; /&gt;</code></span></li><li>参数：<ul><li><span class="en">x、y</span>：矩形的起始点坐标</li><li><span class="en">rx、ry</span>：为圆角x、y轴方向的半径， </li><li><span class="en">width、height</span>：为矩形的宽高</li></ul></li><li>示例：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;rect</span><br><span class="line">  x=<span class="string">&quot;0&quot;</span></span><br><span class="line">  y=<span class="string">&quot;0&quot;</span></span><br><span class="line">  rx=<span class="string">&quot;10&quot;</span></span><br><span class="line">  ry=<span class="string">&quot;10&quot;</span></span><br><span class="line">  width=<span class="string">&quot;250&quot;</span></span><br><span class="line">  height=<span class="string">&quot;200&quot;</span></span><br><span class="line">/&gt;</span><br></pre></td></tr></table></figure><img src="/../../img/visualization/rect.png" alt="矩形"  data-tag='post-image' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></li></ul><h2 id="椭圆-ellipse"><a href="#椭圆-ellipse" class="headerlink" title="椭圆 ellipse"></a>椭圆 ellipse</h2><ul><li>语法：<span class="en"><code>&lt;ellipse cx=&quot;100&quot; cy=&quot;100&quot; rx=&quot;100&quot; ry=&quot;50&quot;/&gt;</code></span></li><li>参数：<ul><li><span class="en">cx、cy</span>: 椭圆的坐标，</li><li><span class="en">rx</span>: 椭圆的x轴半径</li><li><span class="en">ry</span>: 椭圆的y轴半径</li></ul></li><li>示例：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;ellipse</span><br><span class="line">  cx=<span class="string">&quot;100&quot;</span></span><br><span class="line">  cy=<span class="string">&quot;100&quot;</span></span><br><span class="line">  rx=<span class="string">&quot;80&quot;</span></span><br><span class="line">  ry=<span class="string">&quot;50&quot;</span></span><br><span class="line">/&gt;</span><br></pre></td></tr></table></figure><img src="/../../img/visualization/ellipse.png" alt="椭圆"  data-tag='post-image' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></li></ul><h2 id="线条-line"><a href="#线条-line" class="headerlink" title="线条 line"></a>线条 line</h2><ul><li>语法：<span class="en"><code>&lt;line x1=&quot;10&quot; x2=&quot;50&quot; y1=&quot;110&quot; y2=&quot;150&quot; style=&quot;stroke:#dedede&quot;/&gt;</code></span></li><li>参数：<ul><li><span class="en">x1、y1</span>: 起点的坐标</li><li><span class="en">x2、y2</span>: 终点的坐标</li></ul></li><li>注意：<span class="key">要设置样式才看的出来</span></li><li>示例：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;line</span><br><span class="line">  x1=<span class="string">&quot;10&quot;</span></span><br><span class="line">  x2=<span class="string">&quot;250&quot;</span></span><br><span class="line">  y1=<span class="string">&quot;110&quot;</span></span><br><span class="line">  y2=<span class="string">&quot;150&quot;</span></span><br><span class="line">  stroke=<span class="string">&quot;green&quot;</span></span><br><span class="line">/&gt;</span><br></pre></td></tr></table></figure><img src="/../../img/visualization/line.png" alt="线条"  data-tag='post-image' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></li></ul><h2 id="折线-polyline"><a href="#折线-polyline" class="headerlink" title="折线 polyline"></a>折线 polyline</h2><ul><li>语法：<span class="en"><code>&lt;polyline points=&quot;0 0, 20 40, 70 80, 100 90, 200 30, 250 50&quot; /&gt;</code></span></li><li>参数：<ul><li><span class="en">points</span>: 点集数列，以x坐标 y坐标成对出现，多个用逗号隔开</li></ul></li><li>注意：<span class="key">polyline默认为填充需要把fill属性设置为none,再添加样式</span></li><li>示例：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;polyline</span><br><span class="line">  points=<span class="string">&quot;0 0, 20 40, 70 80, 100 90, 200 30, 250 50&quot;</span></span><br><span class="line">  fill=<span class="string">&quot;none&quot;</span></span><br><span class="line">  stroke=<span class="string">&quot;green&quot;</span></span><br><span class="line">/&gt;</span><br></pre></td></tr></table></figure><img src="/../../img/visualization/polyline.png" alt="折线"  data-tag='post-image' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></li></ul><h2 id="多边形-polygon"><a href="#多边形-polygon" class="headerlink" title="多边形 polygon"></a>多边形 polygon</h2><ul><li>语法：<span class="en"><code>&lt;polygon points=&quot;0 0, 20 40, 70 80, 100 90, 200 30, 250 50&quot; /&gt;</code></span></li><li>参数：<ul><li><span class="en">points</span>：点集数列，以x坐标 y坐标成对出现，多个用逗号隔开</li></ul></li><li>注意：<ul><li><span class="key">最后一个点和第一个点默认闭合，polyline不是</span></li><li><span class="key">polyline默认为填充需要把fill属性设置为none,再添加样式</span></li></ul></li><li>示例：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;polygon</span><br><span class="line">  points=<span class="string">&quot;0 0, 20 40, 70 80, 100 90, 200 30, 250 50&quot;</span></span><br><span class="line">  fill=<span class="string">&quot;none&quot;</span></span><br><span class="line">  stroke=<span class="string">&quot;green&quot;</span></span><br><span class="line">/&gt;</span><br></pre></td></tr></table></figure><img src="/../../img/visualization/polygon.png" alt="多边形"  data-tag='post-image' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></li></ul><h2 id="路径-path"><a href="#路径-path" class="headerlink" title="路径 path"></a>路径 path</h2><ul><li>语法：<span class="en"><code>&lt;path d=&quot;M50 50 H 200 V 200 H 50 L 50 50&quot;/&gt;</code></span></li><li>解释：<span class="desc">从(50,50)出发水平画一条到(200,50)的线，然后从(200,50)垂直画一条(200,200)的线，然后从(200,200)水平画一条(50,200),最后把(50,200)和(50,50)连接起来</span></li><li>参数<ul><li><span class="en">d</span>：为一个点集数列以及其它绘制路径的信息</li></ul></li><li>示例：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;path</span><br><span class="line">  d=<span class="string">&quot;M50 50 H 200 V 200 H 50 L 50 50&quot;</span></span><br><span class="line">  fill=<span class="string">&quot;none&quot;</span></span><br><span class="line">  stroke=<span class="string">&quot;green&quot;</span></span><br><span class="line">/&gt;</span><br></pre></td></tr></table></figure><img src="/../../img/visualization/path.png" alt="多边形"  data-tag='post-image' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></li></ul><h1 id="路径-path-1"><a href="#路径-path-1" class="headerlink" title="路径 path"></a>路径 path</h1><ul><li>注意：<span class="key">所有命令中大写为绝对定位，小写为相对定位</span></li></ul><h2 id="path字母意义（简）"><a href="#path字母意义（简）" class="headerlink" title="path字母意义（简）"></a>path字母意义（简）</h2><ul><li><span class="en">M</span> &#x3D; Move to 移动</li><li><span class="en">L</span> &#x3D; Line to 线</li><li><span class="en">H</span> &#x3D; Horizontal Line to 水平线</li><li><span class="en">V</span> &#x3D; Vertical Line to 垂直线</li><li><span class="en">Q</span> &#x3D; Quadratic Bezier Curve to 二次贝塞尔曲线</li><li><span class="en">T</span> &#x3D; Smooth Quadratic Bezier Curve to 延长二次贝塞尔曲线</li><li><span class="en">C</span> &#x3D; Curve to 三次贝塞尔曲线</li><li><span class="en">S</span> &#x3D; Smooth Curve to 三次贝塞尔曲线延长</li><li><span class="en">A</span> &#x3D; Elliptical Arc 椭圆弧</li><li><span class="en">Z</span> &#x3D; close path 关闭路径</li></ul><h2 id="直线命令"><a href="#直线命令" class="headerlink" title="直线命令"></a>直线命令</h2><h3 id="M"><a href="#M" class="headerlink" title="M"></a>M</h3><ul><li>路径的起始点，用来指明画笔从何处开始绘制。（还没画）</li><li>每一段路径都必须以M开头，如果有多个M命令则表示新路径开始</li><li>语法：<ul><li>绝对定位：<span class="en">Mx y</span></li><li>相对定位：<span class="en">mx y</span></li></ul></li><li>参数：<ul><li><span class="en">x,y</span>: X轴和Y轴坐标</li></ul></li></ul><h3 id="L"><a href="#L" class="headerlink" title="L"></a>L</h3><ul><li>绘制一点并且和之前的点（也就是L命令前面的点）连成一条直线。</li><li>与M命令结合就是从M点到L点形成一条直线</li><li>语法:<ul><li>绝对定位：<span class="en">Lx y</span></li><li>相对定位：<span class="en">lx y</span></li></ul></li><li>参数：<ul><li><span class="en">x,y</span>: X轴和Y轴坐标</li></ul></li><li>示例： <ul><li>示例1：从起始点(50, 50)画一条到(250, 50)的直线 和 从起始点(50, 100)画一条到(250, 100)的直线<ul><li>注意：<span class="key">M命令为多个时，后面的M命令为新线段的起始点</span></li></ul></li><li>示例2：从起始点(50, 50)画一条到(250, 50)的直线<ul><li>注意：<span class="key">M命令后面连续跟着多个坐标点，除了第一个坐标点，后面的全部默认为隐式的L命令</span></li></ul></li><li>示例3：从起始点(50, 50)画一条到(250, 200)的直线，然后画一条从(250, 200)到(250,250)的直线<ul><li>注意：<span class="key">多个L命令连续可以省略后面的L命令，并且前一个L跟后一个L相连</span><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 示例1：</span></span><br><span class="line">&lt;path d=<span class="string">&quot;M50 50 L250 50 M50 100 L250 100&quot;</span> stroke=<span class="string">&quot;red&quot;</span> /&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 示例2：</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M50 150 250 150&quot;</span> <span class="attr">stroke</span>=<span class="string">&quot;blue&quot;</span> /&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 示例3：</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M50 200 L250 200 250 250 &quot;</span> <span class="attr">fill</span>=<span class="string">&quot;none&quot;</span> <span class="attr">stroke</span>=<span class="string">&quot;green&quot;</span>/&gt;</span></span></span><br></pre></td></tr></table></figure><img src="/../../img/visualization/L.png" alt="L"  data-tag='post-image' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></li></ul></li></ul></li></ul><h3 id="H"><a href="#H" class="headerlink" title="H"></a>H</h3><ul><li>从前一个点绘制一条水平的直线，与前一个点为y相同，x不同</li><li>语法：<ul><li>绝对定位：<span class="en">H x</span></li><li>相对定位：<span class="en">h x</span></li></ul></li><li>参数：<ul><li><span class="en">x</span>：X轴坐标</li></ul></li><li>注意：<span class="key">连续的H命令取最大值</span><ul><li>如：d&#x3D;”M50 20 H250 100”，会直接从(50,20)到(250,20)</li></ul></li><li>示例：从起始点(50, 50)画一条X坐标为250的水平直线，即把(50,50)和(250,50)连接起来的直线<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;path d=<span class="string">&quot;M50 50 H250&quot;</span> fill=<span class="string">&quot;none&quot;</span> stroke=<span class="string">&quot;green&quot;</span>/&gt;</span><br></pre></td></tr></table></figure><img src="/../../img/visualization/H.png" alt="H"  data-tag='post-image' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></li></ul><h3 id="V"><a href="#V" class="headerlink" title="V"></a>V</h3><ul><li>从前一个点绘制一条垂直的直线，与前一个点为x相同，y不同</li><li>语法：<ul><li>绝对定位：<span class="en">V y</span></li><li>相对定位：<span class="en">v y</span></li></ul></li><li>参数：<ul><li><span class="en">y</span>：Y轴坐标</li></ul></li><li>注意：<span class="key">连续的V命令取最大值</span><ul><li>如：d&#x3D;”M50 20 V250 100”，会直接从(50,20)到(50,250)</li></ul></li><li>示例：从起始点(50, 50)画一条Y坐标为250的垂直直线，即把(50,50)和(50,250)连接起来的直线<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;path d=<span class="string">&quot;M50 50 V250&quot;</span> fill=<span class="string">&quot;none&quot;</span> stroke=<span class="string">&quot;green&quot;</span>/&gt;</span><br></pre></td></tr></table></figure><img src="/../../img/visualization/V.png" alt="V"  data-tag='post-image' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></li></ul><h3 id="Z"><a href="#Z" class="headerlink" title="Z"></a>Z</h3><ul><li>从当前点画一条直线到路径的起始点</li><li>语法：<ul><li>绝对定位：<span class="en">Z</span></li><li>相对定位：<span class="en">z</span></li></ul></li><li>参数：无</li><li>示例：从起始点(50, 50)画一条X坐标为200的水平直线，然后再画一条Y200的垂直线条，然后闭合路径<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;path d=<span class="string">&quot;M50 50 H200 V200 Z&quot;</span> fill=<span class="string">&quot;none&quot;</span> stroke=<span class="string">&quot;green&quot;</span>/&gt;</span><br></pre></td></tr></table></figure><img src="/../../img/visualization/Z.png" alt="Z"  data-tag='post-image' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></li></ul><h2 id="曲线命令"><a href="#曲线命令" class="headerlink" title="曲线命令"></a>曲线命令</h2><h3 id="Q"><a href="#Q" class="headerlink" title="Q"></a>Q</h3><ul><li>绘制一条二次贝塞尔曲线，二次贝塞尔曲线需要一个控制点，用来确定起点和终点的曲线斜率。</li><li>语法：<ul><li>绝对定位：<span class="en">Q x1 y1 x y</span></li><li>相对定位：<span class="en">q x1 y1 x y</span></li></ul></li><li>参数：<ul><li><span class="en">x、y</span>: 终点位置</li><li><span class="en">x1、y1</span>: 控制点</li><li>起点是M命令</li></ul></li><li>示例：可以看出控制点就是弧度最低点或最高点<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;path</span><br><span class="line">  d=<span class="string">&quot;M50 100 Q 175 200 250 100&quot;</span></span><br><span class="line">  fill=<span class="string">&quot;none&quot;</span></span><br><span class="line">  stroke=<span class="string">&quot;green&quot;</span></span><br><span class="line">/&gt;</span><br></pre></td></tr></table></figure><img src="/../../img/visualization/Q.png" alt="Q"  data-tag='post-image' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></li></ul><h3 id="T"><a href="#T" class="headerlink" title="T"></a>T</h3><ul><li>延长Q的简化命令。可以通过前一个控制点推断后一个控制点</li><li>语法：<ul><li>绝对定位：<span class="en">T x y</span></li><li>相对定位：<span class="en">t x y</span></li></ul></li><li>参数：<ul><li><span class="en">x,y</span>: 终点位置</li></ul></li><li>注意：<span class="key">T命令前面必须有一个Q或其他T命令。单独使用会被认为控制点和终点是同一个点，变成一条直线</span></li><li>示例：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;path</span><br><span class="line">  d=<span class="string">&quot;M50 100 Q 145 200 200 100 T 300 100&quot;</span></span><br><span class="line">  fill=<span class="string">&quot;none&quot;</span></span><br><span class="line">  stroke=<span class="string">&quot;green&quot;</span></span><br><span class="line">/&gt;</span><br></pre></td></tr></table></figure><img src="/../../img/visualization/T.png" alt="T"  data-tag='post-image' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></li></ul><h3 id="C"><a href="#C" class="headerlink" title="C"></a>C</h3><ul><li>绘制一条三次贝塞尔曲线</li><li>语法：<ul><li>绝对定位：<span class="en">C x1 y1 x2 y2 x y</span></li><li>相对定位：<span class="en">c x1 y1 x2 y2 x y</span></li></ul></li><li>参数：<ul><li><span class="en">x、y</span>：终点位置</li><li><span class="en">x1、y1</span>：曲线起始点的控制点</li><li><span class="en">x2、y2</span>：曲线终止的控制点</li></ul></li><li>示例：x1，y1都过M来判断方向和x2，y2通过终点来判断方向，然后中间连接起来<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;path</span><br><span class="line">  d=<span class="string">&quot;M50 20 C 100 100 150 200 250 100&quot;</span></span><br><span class="line">  fill=<span class="string">&quot;none&quot;</span></span><br><span class="line">  stroke=<span class="string">&quot;green&quot;</span></span><br><span class="line">/&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">path</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  <span class="attr">d</span>=<span class="string">&quot;M50 200 C 100 100 150 200 250 100&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  <span class="attr">fill</span>=<span class="string">&quot;none&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  <span class="attr">stroke</span>=<span class="string">&quot;blue&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">/&gt;</span></span></span><br></pre></td></tr></table></figure><img src="/../../img/visualization/C.png" alt="C"  data-tag='post-image' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></li></ul><h3 id="S"><a href="#S" class="headerlink" title="S"></a>S</h3><ul><li>与T相似，如果<span class="key">跟在C或者其他S后面，那么第一个控制点被假设成前一个控制点的对称点</span></li><li>如果<span class="key">单独使用，它的两个控制点当做为同一个控制点</span></li><li>语法：</li><li><ul><li>绝对定位：<span class="en">S x2 y2 x y</span></li><li>相对定位：<span class="en">s x2 y2 x y</span></li></ul></li><li>参数：<ul><li><span class="en">x、y</span>：终点位置，</li><li><span class="en">x2、y2</span>：曲线终止的控制点</li></ul></li><li>示例：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;path</span><br><span class="line">  d=<span class="string">&quot;M50 150 S 100 250 150 150&quot;</span></span><br><span class="line">  fill=<span class="string">&quot;none&quot;</span></span><br><span class="line">  stroke=<span class="string">&quot;green&quot;</span></span><br><span class="line">/&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">path</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  <span class="attr">d</span>=<span class="string">&quot;M10 80 S 60 10 120 80 S 180 140 260 80&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  <span class="attr">fill</span>=<span class="string">&quot;none&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  <span class="attr">stroke</span>=<span class="string">&quot;blue&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">/&gt;</span></span></span><br></pre></td></tr></table></figure><img src="/../../img/visualization/S.png" alt="S"  data-tag='post-image' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></li></ul><h3 id="A"><a href="#A" class="headerlink" title="A"></a>A</h3><ul><li>画弧形，可以截取圆或者椭圆的弧形成曲线</li><li>语法：<ul><li>绝对定位：<span class="en">A rx ry x-axis-rotation large-arc-flag sweep-flag x y</span></li><li>相对定位：<span class="en">a rx ry x-axis-rotation large-arc-flag sweep-flag x y</span></li></ul></li><li>参数：<ul><li><span class="en">rx、ry</span>：分别为X轴的半径和Y轴的半径</li><li><span class="en">x-axis-rotation</span>：弧度在X轴的旋转角度</li><li><span class="en">large-arc-flag</span>：决定弧线是大于还是小于180度，0表示小角度弧，1表示大角度弧</li><li><span class="en">sweep-flag</span>: 弧的方向，0表示从起点到终点沿逆时针画弧，1表示从起点到终点沿顺时针画弧</li><li><span class="en">x、y</span>：弧形的终点</li></ul></li><li>示例：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 半径为30的圆 旋转0 小角弧 顺时针</span></span><br><span class="line">&lt;path</span><br><span class="line">  d=<span class="string">&quot;M10 50 50 50 A 30 30 0 0 1 150 50 L 200 50&quot;</span></span><br><span class="line">  fill=<span class="string">&quot;none&quot;</span></span><br><span class="line">  stroke=<span class="string">&quot;green&quot;</span></span><br><span class="line">/&gt;</span><br><span class="line"><span class="comment">// x半径为30, y半径50的椭圆 旋转45 小角弧 顺时针</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">path</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  <span class="attr">d</span>=<span class="string">&quot;M10 100 50 100 A 30 50 45 0 1 150 100 L 200 100&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  <span class="attr">fill</span>=<span class="string">&quot;none&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  <span class="attr">stroke</span>=<span class="string">&quot;blue&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">/&gt;</span></span></span><br><span class="line"><span class="comment">// x半径为30, y半径50的椭圆 旋转-45 大角弧 逆时针</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">path</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  <span class="attr">d</span>=<span class="string">&quot;M10 200 50 200 A 30 50 -45 1 1 150 200 L 200 200&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  <span class="attr">fill</span>=<span class="string">&quot;none&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  <span class="attr">stroke</span>=<span class="string">&quot;pink&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">/&gt;</span></span></span><br><span class="line"><span class="comment">// x半径为30, y半径50的椭圆 旋转45 大角弧 顺时针</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">path</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  <span class="attr">d</span>=<span class="string">&quot;M10 220 50 220 A 30 50 45 1 0 150 220 L 200 220&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  <span class="attr">fill</span>=<span class="string">&quot;none&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  <span class="attr">stroke</span>=<span class="string">&quot;red&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">/&gt;</span></span></span><br></pre></td></tr></table></figure><img src="/../../img/visualization/A.png" alt="A"  data-tag='post-image' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></li></ul><h1 id="填充和轮廓"><a href="#填充和轮廓" class="headerlink" title="填充和轮廓"></a>填充和轮廓</h1><h2 id="fill"><a href="#fill" class="headerlink" title="fill"></a>fill</h2><ul><li>用于填充图形，文本的颜色</li><li>语法：<span class="en">fill&#x3D;”color” 或者 style&#x3D;”fill:color”</span></li><li><span class="key">不设置时，默认填充为黑色</span></li><li>取消默认填充:<span class="en">fill&#x3D;”none”</span></li></ul><h3 id="fill-opacity"><a href="#fill-opacity" class="headerlink" title="fill-opacity"></a>fill-opacity</h3><ul><li>用于设置颜色的透明度</li></ul><h3 id="fill-rule"><a href="#fill-rule" class="headerlink" title="fill-rule"></a>fill-rule</h3><ul><li>用来设置复杂形状的填充规则</li><li>填充方式：大概是判断图形绘制结束后，中间闭合的部分填不填充，图形一定会填充<ul><li><span class="en">fnonzero</span> 默认值，大部分中间填充</li><li><span class="en">fevenodd</span> 大部分中间不填充</li></ul></li><li>nonzero：判断一个点是否在图形内，从该点做任意方向的一条射线，然后检测射线与图形路径的交点情况。从0开始计数，路径从左向右（顺时针）穿过射线则计数加1，从右向左（逆时针）穿过射线则计数减1。得出计数结果后，如果结果是0，则认为点在图形外部，否则认为在内部。</li><li>evenodd: 要判断一个点是否在图形内，从该点作任意方向的一条射线，然后检测射线与图形路径的交点的数量。如果结果是奇数则认为点在内部，是偶数则认为点在外部。</li></ul><h2 id="stroke"><a href="#stroke" class="headerlink" title="stroke"></a>stroke</h2><ul><li>线条、文本或者元素轮廓的颜色</li><li>语法：<span class="en">stroke&#x3D;”color” 或者 style&#x3D;”stroke&#x3D;color”</span></li><li>如果不取消默认填充，在不设置宽度的情况下很难看的</li></ul><h3 id="stroke-width"><a href="#stroke-width" class="headerlink" title="stroke-width"></a>stroke-width</h3><ul><li>轮廓的宽度</li></ul><h3 id="stroke-opacity"><a href="#stroke-opacity" class="headerlink" title="stroke-opacity"></a>stroke-opacity</h3><ul><li>轮廓的透明度</li></ul><h3 id="stroke-linecap"><a href="#stroke-linecap" class="headerlink" title="stroke-linecap"></a>stroke-linecap</h3><ul><li>轮廓终点的形状</li><li>语法: <span class="en">stroke-linecap&#x3D;””</span></li><li>属性值：<ul><li><span class="en">butt</span>: 默认，两端是直边</li><li><span class="en">round</span>: 两端是圆角，圆角半径由stroke-width控制</li><li><span class="en">square</span>: 两端是直边，但是两边会多出一小截，这一截由stroke-width控制</li></ul></li><li>示例：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;g</span><br><span class="line">  stroke=<span class="string">&quot;green&quot;</span></span><br><span class="line">  stroke-width=<span class="string">&quot;10&quot;</span></span><br><span class="line">&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">path</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">stroke-linecap</span>=<span class="string">&quot;butt&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">d</span>=<span class="string">&quot;M20 50 L200 50&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  &gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">path</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">stroke-linecap</span>=<span class="string">&quot;round&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">d</span>=<span class="string">&quot;M20 100 L200 100&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  &gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">path</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">stroke-linecap</span>=<span class="string">&quot;square&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">d</span>=<span class="string">&quot;M20 150 L200 150&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  &gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span></span></span><br><span class="line">&lt;/g&gt;</span><br></pre></td></tr></table></figure><img src="/../../img/visualization/linecap.png" alt="linecap"  data-tag='post-image' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></li></ul><h3 id="stroke-linejoin"><a href="#stroke-linejoin" class="headerlink" title="stroke-linejoin"></a>stroke-linejoin</h3><ul><li>轮廓连接处的样式（线段的交点样式）</li><li>语法: <span class="en">stroke-linejoin&#x3D;””</span></li><li>属性值：<ul><li><span class="en">miter</span>: 默认，两条线相交，交点是一个直角</li><li><span class="en">round</span>: 交点是圆角</li><li><span class="en">bevel</span>：交点是直角但被切了一个三角形</li></ul></li><li>示例：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;g</span><br><span class="line">  fill=<span class="string">&quot;none&quot;</span></span><br><span class="line">  stroke=<span class="string">&quot;green&quot;</span></span><br><span class="line">  stroke-width=<span class="string">&quot;30&quot;</span></span><br><span class="line">&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">path</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">stroke-linecap</span>=<span class="string">&quot;butt&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">stroke-linejoin</span>=<span class="string">&quot;miter&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">d</span>=<span class="string">&quot;M40 70 80 30 120 70&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  &gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">path</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">stroke-linecap</span>=<span class="string">&quot;round&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">stroke-linejoin</span>=<span class="string">&quot;round&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">d</span>=<span class="string">&quot;M40 140 80 100 120 140&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  &gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">path</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">stroke-linecap</span>=<span class="string">&quot;square&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">stroke-linejoin</span>=<span class="string">&quot;bevel&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">d</span>=<span class="string">&quot;M40 220 80 180 120 220&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  &gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span></span></span><br><span class="line">&lt;/g&gt;</span><br></pre></td></tr></table></figure><img src="/../../img/visualization/linejoin.png" alt="linejoin"  data-tag='post-image' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></li></ul><h3 id="stroke-dasharray"><a href="#stroke-dasharray" class="headerlink" title="stroke-dasharray"></a>stroke-dasharray</h3><ul><li>轮廓变虚线</li><li>语法：<span class="en">stroke-dasharray&#x3D;”xxx”</span></li><li>参数: 数值的形式，以线, 空格, 线段, 空格….不断循环</li><li>示例：可能上一轮回是线段长度，下一轮回是空格长度<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;g</span><br><span class="line">  fill=<span class="string">&quot;none&quot;</span></span><br><span class="line">  stroke=<span class="string">&quot;green&quot;</span></span><br><span class="line">  stroke-width=<span class="string">&quot;5&quot;</span></span><br><span class="line">&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">path</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">stroke-dasharray</span>=<span class="string">&quot;5,10&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">d</span>=<span class="string">&quot;M40 70 150 70&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  &gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">path</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">stroke-dasharray</span>=<span class="string">&quot;5,10,5&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">d</span>=<span class="string">&quot;M40 140 150 140&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  &gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">path</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">stroke-dasharray</span>=<span class="string">&quot;10,5,20&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">d</span>=<span class="string">&quot;M40 220 150 220&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  &gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span></span></span><br><span class="line">&lt;/g&gt;</span><br></pre></td></tr></table></figure><img src="/../../img/visualization/dasharray.png" alt="dasharray"  data-tag='post-image' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></li></ul><h3 id="stroke-dashoffset"><a href="#stroke-dashoffset" class="headerlink" title="stroke-dashoffset"></a>stroke-dashoffset</h3><ul><li>虚线的偏移量，按照固定的范围偏移</li><li>参数：正数 | 负数 | 百分比</li><li><span class="key">前提：要先设置好stroke-dasharray</span></li><li>示例：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;path</span><br><span class="line">  d=<span class="string">&quot;M40 20 250 20&quot;</span></span><br><span class="line">  stroke=<span class="string">&quot;green&quot;</span></span><br><span class="line">  stroke-width=<span class="string">&quot;5&quot;</span></span><br><span class="line">&gt;&lt;/path&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">g</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  <span class="attr">fill</span>=<span class="string">&quot;none&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  <span class="attr">stroke</span>=<span class="string">&quot;green&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  <span class="attr">stroke-width</span>=<span class="string">&quot;5&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  <span class="attr">stroke-dasharray</span>=<span class="string">&quot;20&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">path</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">d</span>=<span class="string">&quot;M40 70 250 70&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">stroke-dashoffset</span>=<span class="string">&quot;10&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  &gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">path</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">stroke-dashoffset</span>=<span class="string">&quot;1%&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">d</span>=<span class="string">&quot;M40 140 250 140&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  &gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">path</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">stroke-dashoffset</span>=<span class="string">&quot;-10&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">d</span>=<span class="string">&quot;M40 220 250 220&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  &gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">g</span>&gt;</span></span></span><br></pre></td></tr></table></figure><img src="/../../img/visualization/dashoffset.png" alt="dashoffset"  data-tag='post-image' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></li></ul><h3 id="stroke-miterlimit"><a href="#stroke-miterlimit" class="headerlink" title="stroke-miterlimit"></a>stroke-miterlimit</h3><ul><li>当两条线相交，且stroke-linejoin&#x3D;”miter”，斜接可能远超过路径轮廓线的线宽。</li><li><span class="key">而stroke-miterlimit 对斜接长度和stroke-width的比率强加了一个极限。</span></li><li><span class="key">当极限到达时，交汇处由斜接变成倒角。</span></li><li>示例：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&lt;g</span><br><span class="line">  fill=<span class="string">&quot;none&quot;</span></span><br><span class="line">  stroke=<span class="string">&quot;green&quot;</span></span><br><span class="line">  stroke-width=<span class="string">&quot;15&quot;</span></span><br><span class="line">&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">path</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">stroke-linejoin</span>=<span class="string">&quot;miter&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">d</span>=<span class="string">&quot;M20 80 60 40 100 80 100 40 130 90&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  &gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">path</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">stroke-linejoin</span>=<span class="string">&quot;miter&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">stroke-miterlimit</span>=<span class="string">&quot;1&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">d</span>=<span class="string">&quot;M20 180 60 140 100 180 100 140 130 190&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  &gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">path</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">stroke-linejoin</span>=<span class="string">&quot;miter&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">stroke-miterlimit</span>=<span class="string">&quot;2&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">d</span>=<span class="string">&quot;M20 280 60 240 100 280 100 240 130 290&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  &gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">path</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">stroke-linejoin</span>=<span class="string">&quot;miter&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">stroke-miterlimit</span>=<span class="string">&quot;3&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">d</span>=<span class="string">&quot;M180 80 220 40 260 80 260 40 290 90&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  &gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">path</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">stroke-linejoin</span>=<span class="string">&quot;miter&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">stroke-miterlimit</span>=<span class="string">&quot;4&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">d</span>=<span class="string">&quot;M180 180 220 140 260 180 260 140 290 190&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  &gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">path</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">stroke-linejoin</span>=<span class="string">&quot;miter&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">stroke-miterlimit</span>=<span class="string">&quot;5&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">d</span>=<span class="string">&quot;M180 280 220 240 260 280 260 240 290 290&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  &gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span></span></span><br><span class="line">&lt;/g&gt;</span><br></pre></td></tr></table></figure><img src="/../../img/visualization/miterlimit.png" alt="miterlimit"  data-tag='post-image' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></li></ul><h1 id="文字"><a href="#文字" class="headerlink" title="文字"></a>文字</h1><h2 id="text-标签"><a href="#text-标签" class="headerlink" title="text 标签"></a>text 标签</h2><h3 id="x-和-y"><a href="#x-和-y" class="headerlink" title="x 和 y"></a>x 和 y</h3><ul><li>决定文字的起点位置</li><li>注意：<span class="key">如果x和y是一个数列，则每个坐标会应用到每一个字符上，数列形式下空字符也算字符</span></li><li>示例：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;text</span><br><span class="line">  x=<span class="string">&quot;0 30 60 90 120 150 180 210 240&quot;</span></span><br><span class="line">  y=<span class="string">&quot;60 90 120 150 180 150 120 90 60&quot;</span></span><br><span class="line">  fill=<span class="string">&quot;green&quot;</span></span><br><span class="line">  stroke=<span class="string">&quot;blue&quot;</span></span><br><span class="line">  font-size=<span class="string">&quot;30&quot;</span></span><br><span class="line">  font-weight=<span class="string">&quot;bold&quot;</span></span><br><span class="line">&gt;</span><br><span class="line">  <span class="variable constant_">HELLO</span> <span class="variable constant_">SVG</span>!!</span><br><span class="line">&lt;/text&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">text</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  <span class="attr">x</span>=<span class="string">&quot;0&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  <span class="attr">y</span>=<span class="string">&quot;240&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  <span class="attr">fill</span>=<span class="string">&quot;green&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  <span class="attr">stroke</span>=<span class="string">&quot;blue&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  <span class="attr">font-size</span>=<span class="string">&quot;30&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  <span class="attr">font-weight</span>=<span class="string">&quot;bold&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">&gt;</span></span></span><br><span class="line"><span class="language-xml">  HELLO SVG!!</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">text</span>&gt;</span></span></span><br></pre></td></tr></table></figure><img src="/../../img/visualization/text.png" alt="text"  data-tag='post-image' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></li></ul><h3 id="dx-和-dy"><a href="#dx-和-dy" class="headerlink" title="dx 和 dy"></a>dx 和 dy</h3><ul><li>相对于当前位置的偏移量</li><li>注意：<span class="key">如果参数是一个数列，则每个坐标会应用到每一个字符上，数列形式下空字符也算字符</span></li><li>示例：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;text</span><br><span class="line">  dx=<span class="string">&quot;10 10 10 10 10 10 10 10 10&quot;</span></span><br><span class="line">  dy=<span class="string">&quot;50 20 -20 20 -20 20 -20 20 -20&quot;</span></span><br><span class="line">  fill=<span class="string">&quot;green&quot;</span></span><br><span class="line">  stroke=<span class="string">&quot;blue&quot;</span></span><br><span class="line">  font-size=<span class="string">&quot;30&quot;</span></span><br><span class="line">  font-weight=<span class="string">&quot;bold&quot;</span></span><br><span class="line">&gt;</span><br><span class="line">  <span class="variable constant_">HELLO</span> <span class="variable constant_">SVG</span>!!</span><br><span class="line">&lt;/text&gt;</span><br></pre></td></tr></table></figure><img src="/../../img/visualization/dxdy.png" alt="dxdy"  data-tag='post-image' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></li></ul><h3 id="rotate"><a href="#rotate" class="headerlink" title="rotate"></a>rotate</h3><ul><li>把文字旋转到一个角度</li><li>注意：<span class="key">如果参数是一个数列，则每个坐标会应用到每一个字符上，数列形式下空字符也算字符</span></li><li>示例：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;text</span><br><span class="line">  x=<span class="string">&quot;50&quot;</span></span><br><span class="line">  y=<span class="string">&quot;50&quot;</span></span><br><span class="line">  rotate=<span class="string">&quot;10&quot;</span></span><br><span class="line">  fill=<span class="string">&quot;green&quot;</span></span><br><span class="line">  stroke=<span class="string">&quot;blue&quot;</span></span><br><span class="line">  font-size=<span class="string">&quot;30&quot;</span></span><br><span class="line">  font-weight=<span class="string">&quot;bold&quot;</span></span><br><span class="line">&gt;</span><br><span class="line">  <span class="variable constant_">HELLO</span> <span class="variable constant_">SVG</span>!!</span><br><span class="line">&lt;/text&gt;</span><br></pre></td></tr></table></figure><img src="/../../img/visualization/rotate.png" alt="rotate"  data-tag='post-image' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></li></ul><h3 id="textLength"><a href="#textLength" class="headerlink" title="textLength"></a>textLength</h3><ul><li>规定字符串的计算长度。在文字长度和textLength属性给定长度不一致的情况下，会自动调整字型的位置。</li><li>计算长度：包括了字体的大小，粗细</li><li>示例：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&lt;text</span><br><span class="line">  x=<span class="string">&quot;10&quot;</span></span><br><span class="line">  y=<span class="string">&quot;50&quot;</span></span><br><span class="line">  textLength=<span class="string">&quot;140&quot;</span></span><br><span class="line">  fill=<span class="string">&quot;green&quot;</span></span><br><span class="line">  stroke=<span class="string">&quot;blue&quot;</span></span><br><span class="line">  font-size=<span class="string">&quot;30&quot;</span></span><br><span class="line">  font-weight=<span class="string">&quot;bold&quot;</span></span><br><span class="line">&gt;</span><br><span class="line">  <span class="variable constant_">HELLO</span> <span class="variable constant_">SVG</span>!!</span><br><span class="line">&lt;/text&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">text</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  <span class="attr">x</span>=<span class="string">&quot;10&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  <span class="attr">y</span>=<span class="string">&quot;100&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  <span class="attr">textLength</span>=<span class="string">&quot;140&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  <span class="attr">fill</span>=<span class="string">&quot;green&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  <span class="attr">stroke</span>=<span class="string">&quot;blue&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  <span class="attr">font-size</span>=<span class="string">&quot;30&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  <span class="attr">font-weight</span>=<span class="string">&quot;normal&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">&gt;</span></span></span><br><span class="line"><span class="language-xml">  HELLO SVG!!</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">text</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">text</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  <span class="attr">x</span>=<span class="string">&quot;10&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  <span class="attr">y</span>=<span class="string">&quot;150&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  <span class="attr">textLength</span>=<span class="string">&quot;300&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  <span class="attr">fill</span>=<span class="string">&quot;green&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  <span class="attr">stroke</span>=<span class="string">&quot;blue&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  <span class="attr">font-size</span>=<span class="string">&quot;30&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  <span class="attr">font-weight</span>=<span class="string">&quot;bold&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">&gt;</span></span></span><br><span class="line"><span class="language-xml">  HELLO SVG!!</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">text</span>&gt;</span></span></span><br></pre></td></tr></table></figure><img src="/../../img/visualization/textLength.png" alt="textLength.png"  data-tag='post-image' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></li></ul><h3 id="lengthAdjust"><a href="#lengthAdjust" class="headerlink" title="lengthAdjust"></a>lengthAdjust</h3><ul><li>控制文本已说明方式伸展到由textLength属性定义的长度</li><li>参数：<ul><li><span class="en">spacing</span>: 只拉伸或压缩间距（文字不变形）</li><li><span class="en">spacingAndGlyphs</span>: 同时拉伸或压缩间距和文字本身（文字变形）</li></ul></li><li>示例:<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">&lt;text</span><br><span class="line">  x=<span class="string">&quot;10&quot;</span></span><br><span class="line">  y=<span class="string">&quot;50&quot;</span></span><br><span class="line">  textLength=<span class="string">&quot;140&quot;</span></span><br><span class="line">  lengthadjust=<span class="string">&quot;spacing&quot;</span></span><br><span class="line">  fill=<span class="string">&quot;green&quot;</span></span><br><span class="line">  stroke=<span class="string">&quot;blue&quot;</span></span><br><span class="line">  font-size=<span class="string">&quot;30&quot;</span></span><br><span class="line">  font-weight=<span class="string">&quot;bold&quot;</span></span><br><span class="line">&gt;</span><br><span class="line">  <span class="variable constant_">HELLO</span> <span class="variable constant_">SVG</span>!!</span><br><span class="line">&lt;/text&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">text</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  <span class="attr">x</span>=<span class="string">&quot;10&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  <span class="attr">y</span>=<span class="string">&quot;100&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  <span class="attr">textLength</span>=<span class="string">&quot;140&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  <span class="attr">lengthadjust</span>=<span class="string">&quot;spacingAndGlyphs&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  <span class="attr">fill</span>=<span class="string">&quot;green&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  <span class="attr">stroke</span>=<span class="string">&quot;blue&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  <span class="attr">font-size</span>=<span class="string">&quot;30&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  <span class="attr">font-weight</span>=<span class="string">&quot;bold&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">&gt;</span></span></span><br><span class="line"><span class="language-xml">  HELLO SVG!!</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">text</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">text</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  <span class="attr">x</span>=<span class="string">&quot;10&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  <span class="attr">y</span>=<span class="string">&quot;150&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  <span class="attr">textLength</span>=<span class="string">&quot;300&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  <span class="attr">lengthadjust</span>=<span class="string">&quot;spacing&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  <span class="attr">fill</span>=<span class="string">&quot;green&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  <span class="attr">stroke</span>=<span class="string">&quot;blue&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  <span class="attr">font-size</span>=<span class="string">&quot;30&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  <span class="attr">font-weight</span>=<span class="string">&quot;bold&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">&gt;</span></span></span><br><span class="line"><span class="language-xml">  HELLO SVG!!</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">text</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">text</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  <span class="attr">x</span>=<span class="string">&quot;10&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  <span class="attr">y</span>=<span class="string">&quot;200&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  <span class="attr">textLength</span>=<span class="string">&quot;300&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  <span class="attr">lengthadjust</span>=<span class="string">&quot;spacingAndGlyphs&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  <span class="attr">fill</span>=<span class="string">&quot;green&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  <span class="attr">stroke</span>=<span class="string">&quot;blue&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  <span class="attr">font-size</span>=<span class="string">&quot;30&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  <span class="attr">font-weight</span>=<span class="string">&quot;bold&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">&gt;</span></span></span><br><span class="line"><span class="language-xml">  HELLO SVG!!</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">text</span>&gt;</span></span></span><br></pre></td></tr></table></figure><img src="/../../img/visualization/lengthadjust.png" alt="lengthadjust.png"  data-tag='post-image' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></li></ul><h3 id="CSS文字属性"><a href="#CSS文字属性" class="headerlink" title="CSS文字属性"></a>CSS文字属性</h3><ul><li>一些CSS中的文字样式属性同样也可以应用于SVG的文字中</li><li>font-size、font-family、font-style、font-variant、font-stretch、font-size-adjust、kerning、letter-spacing、word-spacing、text-decoration等</li></ul><h2 id="tspan-标签"><a href="#tspan-标签" class="headerlink" title="tspan 标签"></a>tspan 标签</h2><ul><li>标记文本中的部分内容。类似于span</li><li>tspan标签的属性和text标签一致</li><li>注意：<span class="key">tspan必须是一个text元素的子元素或别的子元素tspan的子元素</span></li><li>注意：<span class="key">tspan的x、y和dx、dy会影响标签后面的内容</span></li><li>示例：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;text</span><br><span class="line">  x=<span class="string">&quot;10&quot;</span></span><br><span class="line">  y=<span class="string">&quot;50&quot;</span></span><br><span class="line">  fill=<span class="string">&quot;green&quot;</span></span><br><span class="line">  stroke=<span class="string">&quot;blue&quot;</span></span><br><span class="line">  font-size=<span class="string">&quot;30&quot;</span></span><br><span class="line">  font-weight=<span class="string">&quot;bold&quot;</span></span><br><span class="line">&gt;</span><br><span class="line">  <span class="variable constant_">HELLO</span></span><br><span class="line">  &lt;tspan fill=<span class="string">&quot;orange&quot;</span>&gt;<span class="variable constant_">SVG</span>&lt;/tspan&gt;</span><br><span class="line">  !!</span><br><span class="line">&lt;/text&gt;</span><br></pre></td></tr></table></figure><img src="/../../img/visualization/tspan.png" alt="tspan"  data-tag='post-image' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></li></ul><h2 id="tref-标签"><a href="#tref-标签" class="headerlink" title="tref 标签"></a>tref 标签</h2><ul><li>配合xlink:href属性能引用已经定义好的文本，实现复制的效果。并且还可以自定义样式</li><li>2.0版本已废弃，只能用在SVG 1.1</li><li>2.0版本替代方案: <span class="key">use标签</span><ul><li>defs标签可以定义一些之后绘制中需要重复使用的图形元素. <span class="en1">defs中的元素定义id，没有使用不会展示</span></li><li>use标签可以在SVG文档内读取目标节点，并在别的地方复制使用。<span class="en1">use使用xlink:href复制对应元素的id，才会显示这个元素</span></li></ul></li><li>示例：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;defs&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">text</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">x</span>=<span class="string">&quot;10&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">y</span>=<span class="string">&quot;50&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">id</span>=<span class="string">&quot;text&quot;</span>   // &lt;<span class="attr">---</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">stroke</span>=<span class="string">&quot;blue&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">font-size</span>=<span class="string">&quot;30&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">font-weight</span>=<span class="string">&quot;bold&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  &gt;</span></span></span><br><span class="line"><span class="language-xml">    HELLO SVG !!</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">text</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">defs</span>&gt;</span></span></span><br><span class="line">&lt;use</span><br><span class="line">  x=&quot;10&quot;</span><br><span class="line">  y=&quot;100&quot;</span><br><span class="line">  fill=&quot;red&quot;</span><br><span class="line">  xlink:href=&quot;#text&quot; // &lt;---</span><br><span class="line">/&gt;</span><br><span class="line">&lt;use</span><br><span class="line">  x=&quot;10&quot;</span><br><span class="line">  y=&quot;150&quot;</span><br><span class="line">  fill=&quot;pink&quot;</span><br><span class="line">  rotate=&quot;45&quot;</span><br><span class="line">  xlink:href=&quot;#text&quot; // &lt;---</span><br><span class="line">/&gt;</span><br></pre></td></tr></table></figure><img src="/../../img/visualization/tref.png" alt="tref"  data-tag='post-image' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></li></ul><h2 id="textPath-标签"><a href="#textPath-标签" class="headerlink" title="textPath 标签"></a>textPath 标签</h2><ul><li>利用<span class="en">xlink:href</span>属性取得一个任意路径，并且可以让字符顺着路径渲染</li><li>示例：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;path</span><br><span class="line">  id=<span class="string">&quot;pathM&quot;</span></span><br><span class="line">  d=<span class="string">&quot;M 50 50 100 100 200 50 300 100&quot;</span></span><br><span class="line">  fill=<span class="string">&quot;none&quot;</span></span><br><span class="line">/&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">path</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  <span class="attr">id</span>=<span class="string">&quot;pathQ&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  <span class="attr">d</span>=<span class="string">&quot;M50 100 Q 175 200 300 100 T 600 100&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  <span class="attr">fill</span>=<span class="string">&quot;none&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">/&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">text</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">textPath</span> <span class="attr">xlink:href</span>=<span class="string">&quot;#pathM&quot;</span>&gt;</span>HELLO SVG !!<span class="tag">&lt;/<span class="name">textPath</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">textPath</span> <span class="attr">xlink:href</span>=<span class="string">&quot;#pathQ&quot;</span>&gt;</span>HELLO SVG !!<span class="tag">&lt;/<span class="name">textPath</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">text</span>&gt;</span></span></span><br></pre></td></tr></table></figure><img src="/../../img/visualization/textpath.png" alt="textpath"  data-tag='post-image' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></li></ul><h1 id="渐变"><a href="#渐变" class="headerlink" title="渐变"></a>渐变</h1><ul><li>应用： 图形，文字, 轮廓</li><li>使用的标签及意义：<ul><li><span class="en">defs标签</span>：定义渐变</li><li><span class="en">stop标签</span>：定义渐变的颜色坡度<ul><li><span class="en">offset</span>：渐变开始和结束的位置</li><li><span class="en">stop-color</span>：颜色</li><li><span class="en">stop-opacity</span>：透明度</li></ul></li></ul></li></ul><h2 id="线性渐变"><a href="#线性渐变" class="headerlink" title="线性渐变"></a>线性渐变</h2><ul><li>语法：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;defs&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">linearGradient</span> <span class="attr">x1</span>=<span class="string">&quot;&quot;</span> <span class="attr">y1</span>=<span class="string">&quot;&quot;</span> <span class="attr">x2</span>=<span class="string">&quot;&quot;</span> <span class="attr">y2</span>=<span class="string">&quot;&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">stop</span> <span class="attr">offset</span>=<span class="string">&quot;0%&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">    ...</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">stop</span> <span class="attr">offset</span>=<span class="string">&quot;20%&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">    ...</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">stop</span> <span class="attr">offset</span>=<span class="string">&quot;100%&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">linearGradient</span>&gt;</span></span></span><br><span class="line">&lt;/defs&gt;</span><br></pre></td></tr></table></figure></li><li>参数：<ul><li><span class="en">x1，y1</span>：线性渐变的起点</li><li><span class="en">x2，y2</span>：线性渐变的终点</li></ul></li><li>示例：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">&lt;defs&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">linearGradient</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">id</span>=<span class="string">&quot;linearGradient&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">x1</span>=<span class="string">&quot;0&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">y1</span>=<span class="string">&quot;0&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">x2</span>=<span class="string">&quot;100%&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">y2</span>=<span class="string">&quot;0&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  &gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">stop</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">offset</span>=<span class="string">&quot;0%&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">stop-color</span>=<span class="string">&quot;rgb(255,255,0)&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">stop</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">offset</span>=<span class="string">&quot;100%&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">stop-color</span>=<span class="string">&quot;rgb(255,0,0)&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    /&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">linearGradient</span>&gt;</span></span></span><br><span class="line">&lt;/defs&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">ellipse</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  <span class="attr">cx</span>=<span class="string">&quot;150&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  <span class="attr">cy</span>=<span class="string">&quot;70&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  <span class="attr">rx</span>=<span class="string">&quot;100&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  <span class="attr">ry</span>=<span class="string">&quot;50&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  <span class="attr">fill</span>=<span class="string">&quot;url(#linearGradient)&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">/&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">text</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  <span class="attr">fill</span>=<span class="string">&quot;url(#linearGradient)&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  <span class="attr">font-size</span>=<span class="string">&quot;100&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  <span class="attr">font-family</span>=<span class="string">&quot;Verdana&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  <span class="attr">x</span>=<span class="string">&quot;50&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  <span class="attr">y</span>=<span class="string">&quot;200&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">&gt;</span></span></span><br><span class="line"><span class="language-xml">  SVG</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">text</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">text</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  <span class="attr">stroke-width</span>=<span class="string">&quot;5&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  <span class="attr">stroke</span>=<span class="string">&quot;url(#linearGradient)&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  <span class="attr">fill</span>=<span class="string">&quot;none&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  <span class="attr">font-size</span>=<span class="string">&quot;100&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  <span class="attr">font-family</span>=<span class="string">&quot;Verdana&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  <span class="attr">x</span>=<span class="string">&quot;50&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  <span class="attr">y</span>=<span class="string">&quot;280&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">&gt;</span></span></span><br><span class="line"><span class="language-xml">  SVG</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">text</span>&gt;</span></span></span><br></pre></td></tr></table></figure><img src="/../../img/visualization/linearGradient.png" alt="linearGradient"  data-tag='post-image' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></li></ul><h2 id="径向渐变"><a href="#径向渐变" class="headerlink" title="径向渐变"></a>径向渐变</h2><ul><li>语法：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;defs&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">radialGradient</span> <span class="attr">cx</span>=<span class="string">&quot;&quot;</span> <span class="attr">cy</span>=<span class="string">&quot;&quot;</span> <span class="attr">r</span>=<span class="string">&quot;&quot;</span> <span class="attr">fx</span>=<span class="string">&quot;&quot;</span> <span class="attr">fy</span>=<span class="string">&quot;&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">stop</span> <span class="attr">offset</span>=<span class="string">&quot;0%&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">    ...</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">stop</span> <span class="attr">offset</span>=<span class="string">&quot;20%&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">    ...</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">stop</span> <span class="attr">offset</span>=<span class="string">&quot;100%&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">radialGradient</span>&gt;</span></span></span><br><span class="line">&lt;/defs&gt;</span><br></pre></td></tr></table></figure></li><li>参数：<ul><li><span class="en">cx，cy</span>：圆的坐标</li><li><span class="en">r</span>：渐变半径</li><li><span class="en">fx，fy</span>：渐变的中心点（渐变焦点）</li></ul></li><li>示例：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">&lt;defs&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">radialGradient</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  <span class="attr">id</span>=<span class="string">&quot;radialGradient&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  <span class="attr">cx</span>=<span class="string">&quot;50%&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  <span class="attr">cy</span>=<span class="string">&quot;50%&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  <span class="attr">r</span>=<span class="string">&quot;50%&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  <span class="attr">fx</span>=<span class="string">&quot;50%&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  <span class="attr">fy</span>=<span class="string">&quot;100%&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">stop</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">offset</span>=<span class="string">&quot;0%&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">stop-color</span>=<span class="string">&quot;rgb(255, 255, 0)&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  /&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">stop</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">offset</span>=<span class="string">&quot;100%&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">stop-color</span>=<span class="string">&quot;rgb(255, 0, 0)&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  /&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">radialGradient</span>&gt;</span></span></span><br><span class="line">&lt;/defs&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">ellipse</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml"><span class="attr">cx</span>=<span class="string">&quot;150&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml"><span class="attr">cy</span>=<span class="string">&quot;70&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml"><span class="attr">rx</span>=<span class="string">&quot;100&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml"><span class="attr">ry</span>=<span class="string">&quot;50&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml"><span class="attr">fill</span>=<span class="string">&quot;url(#radialGradient)&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">/&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">text</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml"><span class="attr">fill</span>=<span class="string">&quot;url(#radialGradient)&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml"><span class="attr">font-size</span>=<span class="string">&quot;100&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml"><span class="attr">font-family</span>=<span class="string">&quot;Verdana&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml"><span class="attr">x</span>=<span class="string">&quot;50&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml"><span class="attr">y</span>=<span class="string">&quot;200&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">&gt;</span></span></span><br><span class="line"><span class="language-xml">SVG</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">text</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">text</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml"><span class="attr">stroke-width</span>=<span class="string">&quot;5&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml"><span class="attr">stroke</span>=<span class="string">&quot;url(#radialGradient)&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml"><span class="attr">fill</span>=<span class="string">&quot;none&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml"><span class="attr">font-size</span>=<span class="string">&quot;100&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml"><span class="attr">font-family</span>=<span class="string">&quot;Verdana&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml"><span class="attr">x</span>=<span class="string">&quot;50&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml"><span class="attr">y</span>=<span class="string">&quot;280&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">&gt;</span></span></span><br><span class="line"><span class="language-xml">SVG</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">text</span>&gt;</span></span></span><br></pre></td></tr></table></figure><img src="/../../img/visualization/radialGradient.png" alt="radialGradient"  data-tag='post-image' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></li></ul><h1 id="裁剪和蒙层"><a href="#裁剪和蒙层" class="headerlink" title="裁剪和蒙层"></a>裁剪和蒙层</h1><h2 id="裁剪-clipPath标签"><a href="#裁剪-clipPath标签" class="headerlink" title="裁剪 clipPath标签"></a>裁剪 clipPath标签</h2><ul><li>定义一条裁剪路径，然后从元素中裁剪出对应的路径形状</li><li>无透明效果</li><li>示例：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;defs&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">clipPath</span> <span class="attr">id</span>=<span class="string">&quot;clipPath&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">path</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">d</span>=<span class="string">&quot;M10 50 A50 50 0 0 1 100 50 A50 50 0 0 1 190 50 Q210 100 100 200  Q-5 100 10 50 Z&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    /&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">clipPath</span>&gt;</span></span></span><br><span class="line">&lt;/defs&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">rect</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  <span class="attr">x</span>=<span class="string">&quot;0&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  <span class="attr">y</span>=<span class="string">&quot;0&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  <span class="attr">width</span>=<span class="string">&quot;200&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  <span class="attr">height</span>=<span class="string">&quot;200&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  <span class="attr">fill</span>=<span class="string">&quot;#f00&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  <span class="attr">clip-path</span>=<span class="string">&quot;url(#clipPath)&quot;</span> //&lt;<span class="attr">--</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">/&gt;</span></span></span><br></pre></td></tr></table></figure><img src="/../../img/visualization/clippath.png" alt="clipPath"  data-tag='post-image' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></li></ul><h2 id="蒙层-mask标签"><a href="#蒙层-mask标签" class="headerlink" title="蒙层 mask标签"></a>蒙层 mask标签</h2><ul><li>裁剪并显示mask标签路径中的元素</li><li>与clipPath不同的是，可以有透明度（透明度为0 无蒙层效果）和灰度值遮罩计算得软边缘</li><li>示例：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;defs&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">mask</span> <span class="attr">id</span>=<span class="string">&quot;Mask&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">path</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">d</span>=<span class="string">&quot;M10 50 A50 50 0 0 1 100 50 A50 50 0 0 1 190 50 Q210 100 100 200  Q-5 100 10 50 Z&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">fill</span>=<span class="string">&quot;#fff&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">fill-opacity</span>=<span class="string">&quot;0.5&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    /&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">mask</span>&gt;</span></span></span><br><span class="line">&lt;/defs&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">rect</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  <span class="attr">x</span>=<span class="string">&quot;0&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  <span class="attr">y</span>=<span class="string">&quot;0&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  <span class="attr">width</span>=<span class="string">&quot;200&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  <span class="attr">height</span>=<span class="string">&quot;200&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  <span class="attr">fill</span>=<span class="string">&quot;green&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  <span class="attr">mask</span>=<span class="string">&quot;url(#Mask)&quot;</span> // &lt;<span class="attr">--</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">/&gt;</span></span></span><br></pre></td></tr></table></figure><img src="/../../img/visualization/mask.png" alt="mask"  data-tag='post-image' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></li></ul><h1 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h1><h2 id="基础动画"><a href="#基础动画" class="headerlink" title="基础动画"></a>基础动画</h2><ul><li>跟css动画属性一样</li></ul><h3 id="translate-平移"><a href="#translate-平移" class="headerlink" title="translate 平移"></a>translate 平移</h3><ul><li>语法：<span class="en">transform&#x3D;”translate(x, y)”</span></li><li>参数： <ul><li><span class="en">x:</span> x轴上的平移距离</li><li><span class="en">y：</span>y轴上的平移距离</li></ul></li></ul><h3 id="scale-缩放"><a href="#scale-缩放" class="headerlink" title="scale 缩放"></a>scale 缩放</h3><ul><li>语法：<span class="en">transform&#x3D;”scale(x, y)”</span></li><li>参数：<ul><li><span class="en">x</span>：X轴上的缩放大小</li><li><span class="en">y</span>：Y轴上的缩放大小，当两个值一样时，写一个值就可以</li></ul></li></ul><h3 id="rotate-旋转"><a href="#rotate-旋转" class="headerlink" title="rotate 旋转"></a>rotate 旋转</h3><ul><li>语法：<span class="en">transform&#x3D;”rotate(deg)”</span></li><li>参数：<span class="en">deg</span>：旋转的角度，不用带单位</li><li>注意：<span class="key">元素的旋转中心点默认是svg布局的（0，0）,而不是元素中心</span></li><li>示例：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;rect</span><br><span class="line">  x=<span class="string">&quot;200&quot;</span></span><br><span class="line">  y=<span class="string">&quot;0&quot;</span></span><br><span class="line">  width=<span class="string">&quot;100&quot;</span></span><br><span class="line">  height=<span class="string">&quot;100&quot;</span></span><br><span class="line">  fill=<span class="string">&quot;orange&quot;</span></span><br><span class="line">/&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">rect</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  <span class="attr">x</span>=<span class="string">&quot;200&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  <span class="attr">y</span>=<span class="string">&quot;0&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  <span class="attr">width</span>=<span class="string">&quot;100&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  <span class="attr">height</span>=<span class="string">&quot;100&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  <span class="attr">fill</span>=<span class="string">&quot;pink&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  <span class="attr">transform</span>=<span class="string">&quot;rotate(20)&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">/&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">rect</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  <span class="attr">x</span>=<span class="string">&quot;200&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  <span class="attr">y</span>=<span class="string">&quot;0&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  <span class="attr">width</span>=<span class="string">&quot;100&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  <span class="attr">height</span>=<span class="string">&quot;100&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  <span class="attr">fill</span>=<span class="string">&quot;green&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  <span class="attr">transform</span>=<span class="string">&quot;rotate(40)&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">/&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">rect</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  <span class="attr">x</span>=<span class="string">&quot;200&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  <span class="attr">y</span>=<span class="string">&quot;0&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  <span class="attr">width</span>=<span class="string">&quot;100&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  <span class="attr">height</span>=<span class="string">&quot;100&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  <span class="attr">fill</span>=<span class="string">&quot;blue&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  <span class="attr">transform</span>=<span class="string">&quot;rotate(60)&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">/&gt;</span></span></span><br></pre></td></tr></table></figure><img src="/../../img/visualization/animation-rotate.png" alt="animation-rotate"  data-tag='post-image' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></li></ul><h3 id="transform-origin"><a href="#transform-origin" class="headerlink" title="transform-origin"></a>transform-origin</h3><ul><li>设置元素的中点</li><li>示例：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;rect</span><br><span class="line">  x=<span class="string">&quot;200&quot;</span></span><br><span class="line">  y=<span class="string">&quot;0&quot;</span></span><br><span class="line">  width=<span class="string">&quot;100&quot;</span></span><br><span class="line">  height=<span class="string">&quot;100&quot;</span></span><br><span class="line">  fill=<span class="string">&quot;orange&quot;</span></span><br><span class="line">/&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">rect</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  <span class="attr">x</span>=<span class="string">&quot;200&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  <span class="attr">y</span>=<span class="string">&quot;0&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  <span class="attr">width</span>=<span class="string">&quot;100&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  <span class="attr">height</span>=<span class="string">&quot;100&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  <span class="attr">fill</span>=<span class="string">&quot;pink&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  <span class="attr">transform-origin</span>=<span class="string">&quot;250 50&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  <span class="attr">transform</span>=<span class="string">&quot;rotate(20)&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">/&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">rect</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  <span class="attr">x</span>=<span class="string">&quot;200&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  <span class="attr">y</span>=<span class="string">&quot;0&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  <span class="attr">width</span>=<span class="string">&quot;100&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  <span class="attr">height</span>=<span class="string">&quot;100&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  <span class="attr">fill</span>=<span class="string">&quot;green&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  <span class="attr">transform-origin</span>=<span class="string">&quot;250 50&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  <span class="attr">transform</span>=<span class="string">&quot;rotate(40)&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">/&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">rect</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  <span class="attr">x</span>=<span class="string">&quot;200&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  <span class="attr">y</span>=<span class="string">&quot;0&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  <span class="attr">width</span>=<span class="string">&quot;100&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  <span class="attr">height</span>=<span class="string">&quot;100&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  <span class="attr">fill</span>=<span class="string">&quot;blue&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  <span class="attr">transform-origin</span>=<span class="string">&quot;250 50&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  <span class="attr">transform</span>=<span class="string">&quot;rotate(60)&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">/&gt;</span></span></span><br></pre></td></tr></table></figure><img src="/../../img/visualization/transform-origin.png" alt="transform-origin"  data-tag='post-image' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></li></ul><h3 id="skew-倾斜"><a href="#skew-倾斜" class="headerlink" title="skew 倾斜"></a>skew 倾斜</h3><ul><li>语法：<span class="en">transform&#x3D;”skewX(x) skewY(y)”</span></li><li>参数：<ul><li><span class="en">x</span>：X轴上的倾斜度</li><li><span class="en">y</span>：Y轴上的倾斜度</li></ul></li><li>注意：<span class="key">在SVG中skew属性需要分开设置，写成 skew(x, y) 是不生效的</span></li></ul><h2 id="JS动画"><a href="#JS动画" class="headerlink" title="JS动画"></a>JS动画</h2><ul><li>用定时器setInterval来实现</li><li>通过更改对应属性来实现动画，不同框架有不同做法</li><li>如：<ul><li>更改dom位置：<span class="en">transform&#x3D;<code>translate($&#123;x&#125;, $&#123;y&#125;)</code></span></li><li>更改路径：<span class="en">d&#x3D;<code>M 250 100 300 0 $&#123;x&#125; 100 $&#123;x1&#125; $&#123;y&#125; z</code></span></li></ul></li></ul><h2 id="CSS-动画"><a href="#CSS-动画" class="headerlink" title="CSS 动画"></a>CSS 动画</h2><ul><li>使用@keyframes定义动画帧然后使用animation去调用</li><li>示例：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">#line &#123;</span><br><span class="line">  stroke-<span class="attr">dasharray</span>: <span class="number">500</span>;</span><br><span class="line">  stroke-<span class="attr">dashoffset</span>: <span class="number">500</span>;</span><br><span class="line">  <span class="attr">animation</span>: animation 2s linear infinite;</span><br><span class="line">&#125;</span><br><span class="line">@keyframes animation &#123;</span><br><span class="line">  to &#123;</span><br><span class="line">    stroke-<span class="attr">dashoffset</span>: <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">line</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  <span class="attr">id</span>=<span class="string">&quot;line&quot;</span> // &lt;<span class="attr">--</span> <span class="attr">或者</span> <span class="attr">class</span>=<span class="string">&quot;line&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  <span class="attr">x1</span>=<span class="string">&quot;0&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  <span class="attr">x2</span>=<span class="string">&quot;500&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  <span class="attr">y1</span>=<span class="string">&quot;0&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  <span class="attr">y2</span>=<span class="string">&quot;0&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  <span class="attr">stroke</span>=<span class="string">&quot;orange&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  <span class="attr">stroke-width</span>=<span class="string">&quot;10&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">/&gt;</span></span></span><br></pre></td></tr></table></figure></li></ul><h3 id="案例-动态框"><a href="#案例-动态框" class="headerlink" title="案例-动态框"></a>案例-动态框</h3><ul><li>主要改变stroke-dasharray 和stroke-dashoffset</li><li>示例：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line"><span class="comment">/*定义线初始展示位置*/</span></span><br><span class="line">.<span class="property">line</span> &#123;</span><br><span class="line">  stroke-<span class="attr">dasharray</span>: <span class="number">100</span> <span class="number">500</span>; <span class="comment">/*修改dasharray和dashoffset*/</span></span><br><span class="line">  stroke-<span class="attr">dashoffset</span>: -<span class="number">320</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.<span class="property">line</span>:hover &#123;</span><br><span class="line">  <span class="attr">animation</span>: animation 12s linear infinite;</span><br><span class="line">&#125;</span><br><span class="line">@keyframes animation &#123;</span><br><span class="line">  <span class="number">0</span>% &#123;</span><br><span class="line">    stroke-<span class="attr">dasharray</span>: <span class="number">100</span> <span class="number">500</span>;</span><br><span class="line">    stroke-<span class="attr">dashoffset</span>: -<span class="number">320</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="number">100</span>% &#123;</span><br><span class="line">    stroke-<span class="attr">dasharray</span>: <span class="number">700</span>;</span><br><span class="line">    stroke-<span class="attr">dashoffset</span>: <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">svg</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  <span class="attr">width</span>=<span class="string">&quot;300&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  <span class="attr">height</span>=<span class="string">&quot;300&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  <span class="attr">xmlns</span>=<span class="string">&quot;http://www.w3.org/2000/svg&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  <span class="attr">style</span>=<span class="string">&quot;border: 2px solid orange&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">defs</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">linearGradient</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">id</span>=<span class="string">&quot;linearGradient&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">x1</span>=<span class="string">&quot;0&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">y1</span>=<span class="string">&quot;0&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">x2</span>=<span class="string">&quot;100%&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">y2</span>=<span class="string">&quot;0&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    &gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">stop</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">offset</span>=<span class="string">&quot;0%&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">stop-color</span>=<span class="string">&quot;rgb(255,255,0)&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">stop</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">offset</span>=<span class="string">&quot;100%&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">stop-color</span>=<span class="string">&quot;rgb(255,0,0)&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">linearGradient</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">defs</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">text</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">x</span>=<span class="string">&quot;120&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">y</span>=<span class="string">&quot;150&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">fill</span>=<span class="string">&quot;url(#linearGradient)&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  &gt;</span></span></span><br><span class="line"><span class="language-xml">    Hover</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">text</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">rect</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">class</span>=<span class="string">&quot;line&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">x</span>=<span class="string">&quot;50&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">y</span>=<span class="string">&quot;120&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">fill</span>=<span class="string">&quot;transparent&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">height</span>=<span class="string">&quot;60&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">width</span>=<span class="string">&quot;200&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">stroke</span>=<span class="string">&quot;url(#linearGradient)&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  /&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br></pre></td></tr></table></figure><img src="/../../img/visualization/animation-stroke.gif" alt="动态按钮"  data-tag='post-image' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></li></ul><h2 id="GreenSock-GSAP"><a href="#GreenSock-GSAP" class="headerlink" title="GreenSock(GSAP)"></a>GreenSock(GSAP)</h2><ul><li>可以借用一些插件来实现比如GSAP</li><li><a href="https://gsap.com/docs/v3/GSAP/Tween/">https://gsap.com/docs/v3/GSAP/Tween/</a></li></ul><h1 id="工具和插件"><a href="#工具和插件" class="headerlink" title="工具和插件"></a>工具和插件</h1><h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><ul><li>生成SVG路径： 去iconfont网站找图标然后选择svg下载</li><li>然后复制代码，保留svg那一段然后用手动给图形添加id</li><li>之后使用use获取这个图标</li><li>路径生成： 使用Sketch辅助生成路径</li><li>示例：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">gsap.<span class="title function_">registerPlugin</span>(<span class="title class_">MotionPathPlugin</span>);</span><br><span class="line">  gsap.<span class="title function_">to</span>(<span class="string">&quot;#airplane&quot;</span>, &#123; <span class="comment">// 要运动的元素</span></span><br><span class="line">    <span class="attr">duration</span>: <span class="number">3</span>, <span class="comment">// 时间</span></span><br><span class="line">    <span class="attr">repeat</span>: -<span class="number">1</span>, <span class="comment">// 循环（1、2、3、4 为循环次数，-1为无限循环）</span></span><br><span class="line">    <span class="attr">ease</span>: <span class="title class_">Linear</span>.<span class="property">easeNone</span>, <span class="comment">// 运动曲线</span></span><br><span class="line">    <span class="attr">motionPath</span>:&#123;</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&quot;#airplane-path&quot;</span>, <span class="comment">// 运动的轨迹</span></span><br><span class="line">      <span class="attr">align</span>: <span class="string">&quot;#airplane-path&quot;</span>,</span><br><span class="line">      <span class="attr">autoRotate</span>: <span class="number">45</span>, <span class="comment">// 飞机运动旋转角度 （true为自动调整角度）</span></span><br><span class="line">      <span class="attr">alignOrigin</span>: [<span class="number">1</span>, <span class="number">1</span>] <span class="comment">// 飞机的运动原点</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>原出处：<a href="https://juejin.cn/post/7124312346947764260?searchId=202503101451055B89B2C172923C00C2DA#heading-75">https://juejin.cn/post/7124312346947764260?searchId=202503101451055B89B2C172923C00C2DA#heading-75</a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;style&gt;
.key {
  color: #483D8B;
  font-weight: 700;
}
.en {
  color: green;
  font-weight:600;
}
.desc {
  color: #CD853F;
  font-weight: 6</summary>
      
    
    
    
    <category term="可视化" scheme="http://example.com/categories/%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
    
    
    <category term="可视化" scheme="http://example.com/tags/%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>CSS-渐变篇</title>
    <link href="http://example.com/2025/03/06/HTMLCSS/css-%E6%B8%90%E5%8F%98/"/>
    <id>http://example.com/2025/03/06/HTMLCSS/css-%E6%B8%90%E5%8F%98/</id>
    <published>2025-03-06T06:54:08.930Z</published>
    <updated>2025-06-30T07:22:50.746Z</updated>
    
    <content type="html"><![CDATA[<style>.en1 {  color: #3D82AC;  font-weight: 600;}.en {  color: green;  font-weight:600;}.desc {  color: #CD853F;  font-weight: 600;  font-size:14px;}</style><h2 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h2><ul><li>属于background的背景方式之一</li><li>语法：<span class="en">background: 渐变函数;</span></li><li>渐变可以使用关键字作为起始位置，但在小程序中关键字无效<br><img src="/../../img/visualization/gradient.jpg" alt="渐变"  data-tag='post-image' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></li></ul><h2 id="线性渐变linear-gradient"><a href="#线性渐变linear-gradient" class="headerlink" title="线性渐变linear-gradient()"></a>线性渐变linear-gradient()</h2><ul><li>场景：条纹背景</li><li>语法：<span class="en">linear-gradient(角度，起始颜色， 终止颜色)</span></li><li>多个渐变,可以用百分比，确定每个颜色从那个位置开始过渡<ul><li>如：<span class="desc">linear-gradient(red 0%, orange 25%, blue 50%, black 90%);</span></li></ul></li><li>如果每个颜色都有起始和结束，则形成条纹(色块分明)，起始0%和结束100%可以忽略不写<ul><li>如：<span class="desc">linear-gradient(to right, red 20%, orange 20% 40%, yellow 40% 60%, green 60% 80%, blue 80%);</span></li></ul></li></ul><h3 id="重复线性渐变repeating-linear-gradient"><a href="#重复线性渐变repeating-linear-gradient" class="headerlink" title="重复线性渐变repeating-linear-gradient()"></a>重复线性渐变repeating-linear-gradient()</h3><ul><li>语法跟linear-gradient()一样，但是最后一个颜色要给一个长度，如果没有长度，默认长度0-100%，不会重复渐变。</li><li>只要末尾有长度，就会无限循环直到容器被填满</li><li>只有末尾有值：<span class="en1">(0%-最后一个颜色的值)</span>的重复渐变<ul><li>示例：<span class="desc">repeating-linear-gradient(45deg, white, grey 25%);</span></li></ul></li><li>每个颜色都带值: <span class="en1">(第一个颜色的值-最后一个颜色的值)</span>的重复渐变<ul><li>示例：<span class="desc">repeating-linear-gradient(45deg, white 10%, red 15%, grey 20%);</span> 代表每10-20%是一个渐变轮回</li></ul></li><li>每个颜色都带区间值，条纹：<span class="en1">(第一个颜色的最小区间值-最后一个颜色的最大区间值)</span>的重复渐变<ul><li>示例：<span class="desc">repeating-linear-gradient(45deg, grey -10% 0%, white 0% 5%, green 5% 10%);</span> 代表每-10%-10%是一个渐变轮回,且色块分明，没有渐变过渡效果</li></ul></li></ul><h2 id="径向渐变radial-gradient-由原点一圈一圈往外形成"><a href="#径向渐变radial-gradient-由原点一圈一圈往外形成" class="headerlink" title="径向渐变radial-gradient() - 由原点一圈一圈往外形成"></a>径向渐变radial-gradient() - 由原点一圈一圈往外形成</h2><ul><li>语法：<span class="en">radial-gradient(渐变位置, 渐变结束位置, 中间的颜色, 结束的颜色)</span></li><li>渐变位置：有circle 和 ellipse两种形状<ul><li>关键字：<ul><li>如：<span class="desc">radial-gradient(circle at center, red, blue)</span></li></ul></li><li>不写，默认：<ul><li>如：<span class="desc">center：radial-gradient(circle, red, blue)</span></li></ul></li><li>关键字+范围：限制第一个颜色的大小(包括渐变)<ul><li>如：<span class="desc">radial-gradient(circle 50px at center, red, blue);</span>代表中间红色只有50px</li></ul></li><li>椭圆比圆多一个范围值，其他写法一样：<ul><li>如：<span class="desc">radial-gradient(ellipse 50px 20px at center, red, blue)</span></li></ul></li></ul></li><li>渐变结束形状： <ul><li><span class="en">farthest-corner</span>: 默认,最远角</li><li><span class="en">farthest-side</span>: 与容器距离渐变中心点最远的一边或最远的垂直和水平边相切</li><li><span class="en">closest-side</span>: 与容器距离渐变中心点最近的一边(圆)或最近的垂直和水平边(椭圆)相切。</li><li><span class="en">closest-corner</span>: 最近角</li></ul></li><li>颜色带一个值的，渐变范围在值间，0%和100%默认可以忽略不写<ul><li>如：<span class="desc">radial-gradient(cyan, transparent 20%, salmon 40%);</span> 从中间开始三种颜色0-20是cyan，20-40是transparent，40-100是salmon</li></ul></li><li>每个值固定的区间范围，色块分明<ul><li>如：<span class="desc">radial-gradient(cyan 0% 10%, transparent 20% 40%, salmon 40% 80%, blue);</span></li></ul></li></ul><h3 id="重复径向渐变repeating-radial-gradient"><a href="#重复径向渐变repeating-radial-gradient" class="headerlink" title="重复径向渐变repeating-radial-gradient()"></a>重复径向渐变repeating-radial-gradient()</h3><ul><li>语法与径向渐变一样，但一定要有范围，不管是在位置上还是在跟着颜色在末尾处，只选取其中的最大值重复渐变</li><li>不加位置，只使用颜色，渐变相交<ul><li>如：<span class="desc">repeating-radial-gradient(black, white 10px);</span></li></ul></li><li>加了位置，和每个颜色带范围，从位置开始0%-最大值一轮回<ul><li>如：<span class="desc">repeating-radial-gradient(ellipse farthest-corner at 20% 20%, red, black 5%, blue 5%, green 10%);</span></li></ul></li><li>区间范围,色块分明<ul><li>如：<span class="desc">background: repeating-radial-gradient(ellipse farthest-corner at 20% 20%, red 0 5%, green 5% 10%);</span></li></ul></li></ul><h2 id="圆锥渐变conic-gradient-–-从中间向外放射直线所形成的面"><a href="#圆锥渐变conic-gradient-–-从中间向外放射直线所形成的面" class="headerlink" title="圆锥渐变conic-gradient() – 从中间向外放射直线所形成的面"></a>圆锥渐变conic-gradient() – 从中间向外放射直线所形成的面</h2><ul><li>场景：用来创建环形，扇形,充电等形状的渐变</li><li>语法：<span class="en">conic-gradient(&lt;起始角度&gt;, &lt;颜色值1&gt; &lt;起始位置&gt;, &lt;颜色值2&gt; &lt;结束位置&gt;,…);</span></li><li>普遍应用<ul><li><span class="desc">conic-gradient(color1, color2, color3)</span></li></ul></li><li>颜色分明，带区间范围<ul><li><span class="desc">conic-gradient(color1 0% 30%, color2 30% 60%)</span></li><li><span class="desc">conic-gradient(color1 30%, color2 30% 100%)</span></li></ul></li><li>带一个值，在值附近会有过渡渐变<ul><li><span class="desc">conic-gradient(color1 30%, color2 70%)</span></li></ul></li><li>动态效果：360旋转这个图形</li><li>想要实现动态充电效果百分比，最主要是动态修改区间范围颜色值的第一个范围</li></ul><h3 id="重复圆锥渐变repeating-conic-gradient"><a href="#重复圆锥渐变repeating-conic-gradient" class="headerlink" title="重复圆锥渐变repeating-conic-gradient()"></a>重复圆锥渐变repeating-conic-gradient()</h3><ul><li>语法与圆锥渐变一样，重复直到把容器填满</li><li>重复渐变使用区间范围的第二中写法不会重复，因为容器默认0%-100%</li></ul><h3 id="用重复圆锥渐变实现一个充电环形底"><a href="#用重复圆锥渐变实现一个充电环形底" class="headerlink" title="用重复圆锥渐变实现一个充电环形底"></a>用重复圆锥渐变实现一个充电环形底</h3><ul><li>底部的条纹：使用重复圆锥渐变</li><li>中间白色部分：用绝对定位叠加</li><li>进度条： 定位一个跟条纹圆形一样大小的圆，置于中间，然后定时改变圆锥渐变的变量<br><img src="/../../img/visualization/charge1-conic.png" alt="条纹充电效果图"  data-tag='post-image' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">.<span class="property">bottom</span> &#123;</span><br><span class="line">  <span class="attr">position</span>: relative;</span><br><span class="line">  <span class="attr">width</span>: 200px;</span><br><span class="line">  <span class="attr">height</span>: 200px;</span><br><span class="line">  border-<span class="attr">radius</span>: 200px;</span><br><span class="line">  <span class="attr">background</span>: repeating-conic-<span class="title function_">gradient</span>(#fff <span class="number">0</span> 3deg, #<span class="number">000</span> 3deg 6deg);</span><br><span class="line">  z-<span class="attr">index</span>:<span class="number">20</span>;</span><br><span class="line">&#125;</span><br><span class="line">.<span class="property">center</span> &#123;</span><br><span class="line">  <span class="attr">position</span>: absolute;</span><br><span class="line">  <span class="attr">top</span>:<span class="number">0</span>;</span><br><span class="line">  <span class="attr">left</span>:<span class="number">0</span>;</span><br><span class="line">  <span class="attr">width</span>: 200px;</span><br><span class="line">  <span class="attr">height</span>: 200px;</span><br><span class="line">  border-<span class="attr">radius</span>: 200px;</span><br><span class="line">  z-<span class="attr">index</span>:<span class="number">30</span>;</span><br><span class="line">&#125;</span><br><span class="line">.<span class="property">top</span> &#123;</span><br><span class="line">  <span class="attr">position</span>: absolute;</span><br><span class="line">  <span class="attr">top</span>:10px;</span><br><span class="line">  <span class="attr">left</span>: 10px;</span><br><span class="line">  <span class="attr">width</span>:180px;</span><br><span class="line">  <span class="attr">height</span>:180px;</span><br><span class="line">  border-<span class="attr">radius</span>: 180px;</span><br><span class="line">  <span class="attr">background</span>: white;</span><br><span class="line">  z-<span class="attr">index</span>: <span class="number">50</span>;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;bottom&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;center&quot;</span> <span class="attr">id</span>=<span class="string">&quot;center&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;top&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">let</span> cnt = <span class="number">0</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">let</span> center = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;center&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">let</span> timer = <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">if</span> (center &gt; <span class="number">100</span>) <span class="built_in">clearInterval</span>(timer)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      center.<span class="property">style</span>.<span class="property">background</span> = <span class="string">`conic-gradient(green <span class="subst">$&#123;cnt&#125;</span>%, transparent <span class="subst">$&#123;cnt&#125;</span>% 100%)`</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      cnt++</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;, <span class="number">100</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;style&gt;
.en1 {
  color: #3D82AC;
  font-weight: 600;
}
.en {
  color: green;
  font-weight:600;
}
.desc {
  color: #CD853F;
  font-weight: 6</summary>
      
    
    
    
    <category term="CSS&amp;HTML" scheme="http://example.com/categories/CSS-HTML/"/>
    
    
    <category term="CSS" scheme="http://example.com/tags/CSS/"/>
    
    <category term="渐变" scheme="http://example.com/tags/%E6%B8%90%E5%8F%98/"/>
    
  </entry>
  
  <entry>
    <title>echartGL</title>
    <link href="http://example.com/2025/03/05/%E5%8F%AF%E8%A7%86%E5%8C%96/echartGL/"/>
    <id>http://example.com/2025/03/05/%E5%8F%AF%E8%A7%86%E5%8C%96/echartGL/</id>
    <published>2025-03-05T06:05:27.077Z</published>
    <updated>2025-06-30T07:27:39.037Z</updated>
    
    <content type="html"><![CDATA[<style>.en {  color: green;  font-weight:600;}</style><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ul><li><span class="en">pnpm install echarts-gl</span></li></ul><h2 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h2><ul><li><a href="https://echarts.apache.org/zh/option-gl.html#globe">GL配置</a></li></ul><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><ul><li><span class="en">bar3D，line3D</span>: 三维直角坐标系</li><li><span class="en">globe</span>: 地球仪</li><li><span class="en">map3D</span>: 地图</li><li><span class="en">scatter3D</span>: 散点图、气泡图</li><li><span class="en">lines3D</span>: 飞线图</li><li><span class="en">surface</span>: 曲面图金属零件</li><li><span class="en">polygons3D</span>: 建筑群</li><li><span class="en">graphGL</span>: 关系图</li><li><span class="en">flowGL</span>: 风场气象等量子场</li></ul><h3 id="三维直角坐标系要素"><a href="#三维直角坐标系要素" class="headerlink" title="三维直角坐标系要素"></a>三维直角坐标系要素</h3><ul><li><span class="en">grid3D</span>：控制图形的位置</li><li><span class="en">xAxisD</span>：控制x轴坐标</li><li><span class="en">yAxis3D</span>：控制y轴坐标</li><li><span class="en">zAxis3D</span>：控制z轴坐标</li></ul><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><ul><li><span class="en">mapbox3D</span>：基于 mapbox-gl-js 的地理组件，地图上绘制三维的散点图、飞线图、柱状图、地图</li><li><span class="en">geo3D</span>：三维的地理坐标系组件，地图上绘制三维的散点图、气泡图、柱状图、飞线图</li><li><span class="en">globe</span>：地球组件。展示三维的散点图、气泡图、柱状图、飞线图</li></ul><h2 id="灯光"><a href="#灯光" class="headerlink" title="灯光"></a>灯光</h2><ul><li>在三维图形中，灯光必不可少</li><li>通过设置<span class="en">light</span>决定图形的影子与物体的距离</li><li>另外series中的对象也需要设置着色效果<span class="en">shading</span></li></ul><h2 id="如何隐藏网格线和视觉坐标辅助线"><a href="#如何隐藏网格线和视觉坐标辅助线" class="headerlink" title="如何隐藏网格线和视觉坐标辅助线"></a>如何隐藏网格线和视觉坐标辅助线</h2><ul><li>在grid3D中<span class="en">show: false</span>,解决视觉坐标线条</li><li><span class="en">axisTick，axisLabel，splitLine，splitArea</span>解决网格线，坐标轴线，标签等显隐</li></ul><h2 id="如何不让物体随鼠标左右滑动而移动，也不受滑轮影响"><a href="#如何不让物体随鼠标左右滑动而移动，也不受滑轮影响" class="headerlink" title="如何不让物体随鼠标左右滑动而移动，也不受滑轮影响"></a>如何不让物体随鼠标左右滑动而移动，也不受滑轮影响</h2><ul><li>通过grid中的<span class="en">viewControl</span><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">projection</span>: <span class="string">&#x27;orthographic&#x27;</span>, <span class="comment">// 投影方式</span></span><br><span class="line"><span class="attr">orthographicSize</span>: <span class="number">110</span>, <span class="comment">//控制地图大小</span></span><br><span class="line"><span class="attr">maxOrthographicSize</span>: <span class="number">110</span>, <span class="comment">// 投影最大值</span></span><br><span class="line"><span class="attr">minOrthographicSize</span>: <span class="number">110</span>, <span class="comment">// 投影最小值</span></span><br><span class="line"><span class="attr">alpha</span>:<span class="number">60</span>, <span class="comment">// 确定视线角度</span></span><br><span class="line"><span class="attr">beta</span>:<span class="number">10</span>,</span><br><span class="line"><span class="attr">autoRotate</span>:<span class="literal">false</span>, <span class="comment">// 是否开启自动旋转</span></span><br><span class="line"><span class="attr">rotateSensitivity</span>: <span class="number">0</span>, <span class="comment">// 设置为0 无法旋转</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="scatter3D"><a href="#scatter3D" class="headerlink" title="scatter3D"></a>scatter3D</h2><ul><li><span class="en">symbol</span>: 决定物体的形状，可以添加svg路径</li><li><span class="en">symbolSize</span>: 设置物体的宽高[宽,高]</li><li><span class="en">data</span>：要以[{value：[x, y, z]}]的形式</li><li>像是做一些自定义的图案，比如3D金字塔比较方便</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;style&gt;
.en {
  color: green;
  font-weight:600;
}
&lt;/style&gt;


&lt;h2 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;s</summary>
      
    
    
    
    <category term="可视化" scheme="http://example.com/categories/%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
    
    
    <category term="可视化" scheme="http://example.com/tags/%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>词云图</title>
    <link href="http://example.com/2025/03/05/%E5%8F%AF%E8%A7%86%E5%8C%96/%E8%AF%8D%E4%BA%91%E5%9B%BE/"/>
    <id>http://example.com/2025/03/05/%E5%8F%AF%E8%A7%86%E5%8C%96/%E8%AF%8D%E4%BA%91%E5%9B%BE/</id>
    <published>2025-03-05T02:09:32.469Z</published>
    <updated>2025-06-30T07:27:39.133Z</updated>
    
    <content type="html"><![CDATA[<style>.en {  color: green;  font-weight:600;}</style><p><img src="/../../img/echart/wordcloud.png" alt="词云图示例"  data-tag='post-image' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ul><li><span class="en">pnpm install echarts-wordcloud</span></li><li>注意wordcloud版本2 对应 echart版本5，wordcloud版本1 对应 echart4</li></ul><h3 id="自定义形状-maskImage"><a href="#自定义形状-maskImage" class="headerlink" title="自定义形状 maskImage"></a>自定义形状 maskImage</h3><ul><li>主要是改变maskImage，自定义配置，图片必须是base64格式,并且以Image的方法返回</li><li>图片必须是闭合的，填充区域必须为黑色，图片可以通过<a href="https://www.iconfont.cn/">阿里巴巴矢量图标库</a><br>下载图片</li></ul><h3 id="字体范围-sizeRange"><a href="#字体范围-sizeRange" class="headerlink" title="字体范围 sizeRange"></a>字体范围 sizeRange</h3><ul><li>如果sizeRange设置的范围差距过大，数据渲染时，数据量不会全部展示</li><li>因为图形的大小限制和<span class="en">drawOutOfBound: false</span>不允许超过边界</li></ul><h3 id="字体颜色"><a href="#字体颜色" class="headerlink" title="字体颜色"></a>字体颜色</h3><ul><li>可以全局配置也可给单个字体配置<ul><li>全局：直接在全局的textStyle的color中设置随机颜色，当然也可以固定一种颜色</li><li>单个：给数据的每个对象单独配置颜色，如：<span class="en">{ name: “深圳”, value: 164910, textStyle: { color: ‘red’ } }</span></li></ul></li><li>参考其他使用的应用，会发现存在使用基本是是统一色系颜色的随机颜色，这个如何实现？<ul><li>创建对应的配色主题，每个主题有若干颜色</li><li>配置option的主题颜色</li></ul></li></ul><h3 id="排列方式"><a href="#排列方式" class="headerlink" title="排列方式"></a>排列方式</h3><ul><li>主要使用 <span class="en">rotationRange 和 rotationStep</span></li><li>横向：<span class="en">rotationRange: [0, 0], rotationStep: 0</span></li><li>对角线：<span class="en">rotationRange: [-90, 90], rotationStep: 7</span></li><li>横竖混排：<span class="en">rotationRange: [0, 90], rotationStep: 90</span></li><li>横切混排：<span class="en">rotationRange: [0, 90], rotationStep: 45</span></li></ul><h3 id="配置项"><a href="#配置项" class="headerlink" title="配置项"></a>配置项</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">type</span>: <span class="string">&#x27;wordCloud&#x27;</span>, <span class="comment">// 类型</span></span><br><span class="line"></span><br><span class="line"><span class="attr">shape</span>: <span class="string">&#x27;circle&#x27;</span>, <span class="comment">// 词云形状，内置形状有circle，cardioid(心形),diamond(棱形),triangle-forward, triangle,triangle-upright, pentagon, and star</span></span><br><span class="line"></span><br><span class="line"><span class="attr">keepAspect</span>: <span class="literal">false</span>, <span class="comment">// v2.1.0时可以保持maskImage纵横比或1：1</span></span><br><span class="line"><span class="attr">maskImage</span>: maskImage, <span class="comment">// 背景图，白底不画，最好黑底，maskImage优先级比shape高</span></span><br><span class="line"></span><br><span class="line"><span class="attr">left</span>: <span class="string">&#x27;center&#x27;</span>, <span class="comment">// 调整词云位置</span></span><br><span class="line"><span class="attr">top</span>: <span class="string">&#x27;center&#x27;</span>,</span><br><span class="line"><span class="attr">width</span>: <span class="string">&#x27;70%&#x27;</span>,</span><br><span class="line"><span class="attr">height</span>: <span class="string">&#x27;80%&#x27;</span>,</span><br><span class="line"><span class="attr">right</span>: <span class="literal">null</span>,</span><br><span class="line"><span class="attr">bottom</span>: <span class="literal">null</span>,</span><br><span class="line"></span><br><span class="line"><span class="attr">sizeRange</span>: [<span class="number">12</span>, <span class="number">60</span>], <span class="comment">// 字体范围,默认最小12px，最大60px大小</span></span><br><span class="line"></span><br><span class="line"><span class="attr">rotationRange</span>: [-<span class="number">90</span>, <span class="number">90</span>], <span class="comment">// 词云中文字的角度</span></span><br><span class="line"><span class="attr">rotationStep</span>: <span class="number">45</span>, <span class="comment">// 渲染梯度，越小角度种类越多</span></span><br><span class="line"></span><br><span class="line"><span class="attr">gridSize</span>: <span class="number">8</span>, <span class="comment">// 网格大小，越大，词之间间隙越大</span></span><br><span class="line"></span><br><span class="line"><span class="attr">drawOutOfBound</span>: <span class="literal">false</span>, <span class="comment">// v2.1.0时可以设置是否允许词云在边界外渲染，默认false，否则容易造成词重叠</span></span><br><span class="line"></span><br><span class="line"><span class="attr">shrinkToFit</span>: <span class="literal">false</span>, <span class="comment">// v2.1.0时可以允许当字体过大是否缩小字体，false不渲染，true缩小</span></span><br><span class="line"></span><br><span class="line"><span class="attr">layoutAnimation</span>: <span class="literal">true</span>, <span class="comment">// 是否开启动画</span></span><br><span class="line"></span><br><span class="line"><span class="attr">textStyle</span>: &#123;<span class="comment">// 全局文本样式</span></span><br><span class="line">  <span class="attr">fontFamily</span>: <span class="string">&#x27;sans-serif&#x27;</span>,</span><br><span class="line">  <span class="attr">fontWeight</span>: <span class="string">&#x27;bold&#x27;</span>,</span><br><span class="line">  <span class="attr">color</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;rgb(&#x27;</span> + [</span><br><span class="line">      <span class="title class_">Math</span>.<span class="title function_">round</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">160</span>),</span><br><span class="line">      <span class="title class_">Math</span>.<span class="title function_">round</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">160</span>),</span><br><span class="line">      <span class="title class_">Math</span>.<span class="title function_">round</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">160</span>)</span><br><span class="line">    ].<span class="title function_">join</span>(<span class="string">&#x27;,&#x27;</span>) + <span class="string">&#x27;)&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">emphasis</span>: &#123;<span class="comment">// 鼠标移到文字上的样式</span></span><br><span class="line">  <span class="attr">focus</span>: <span class="string">&#x27;self&#x27;</span>,</span><br><span class="line">  <span class="attr">textStyle</span>: &#123;</span><br><span class="line">      <span class="attr">textShadowBlur</span>: <span class="number">10</span>,</span><br><span class="line">      <span class="attr">textShadowColor</span>: <span class="string">&#x27;#333&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line"><span class="comment">// 数据格式</span></span><br><span class="line"><span class="attr">data</span>: [&#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;Farrah Abraham&#x27;</span>, <span class="comment">// 词云文本</span></span><br><span class="line">    <span class="attr">value</span>: <span class="number">366</span>, <span class="comment">// 词云大小通过value判断</span></span><br><span class="line">    <span class="attr">textStyle</span>: &#123;&#125; <span class="comment">// 可单独设置文本样式</span></span><br><span class="line">&#125;]</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;style&gt;
.en {
  color: green;
  font-weight:600;
}
&lt;/style&gt;

&lt;p&gt;&lt;img src=&quot;/../../img/echart/wordcloud.png&quot; alt=&quot;词云图示例&quot;  data-tag=&#39;post-image</summary>
      
    
    
    
    <category term="可视化" scheme="http://example.com/categories/%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
    
    
    <category term="可视化" scheme="http://example.com/tags/%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>echart 问题与解答</title>
    <link href="http://example.com/2025/03/03/%E5%8F%AF%E8%A7%86%E5%8C%96/%E9%97%AE%E9%A2%98%E4%B8%8E%E8%A7%A3%E7%AD%94/"/>
    <id>http://example.com/2025/03/03/%E5%8F%AF%E8%A7%86%E5%8C%96/%E9%97%AE%E9%A2%98%E4%B8%8E%E8%A7%A3%E7%AD%94/</id>
    <published>2025-03-03T07:59:43.284Z</published>
    <updated>2025-06-30T07:27:39.133Z</updated>
    
    <content type="html"><![CDATA[<style>.en {  color: green;  font-weight:600;}</style><h3 id="echarts-has-instanced"><a href="#echarts-has-instanced" class="headerlink" title="echarts has instanced"></a>echarts has instanced</h3><ul><li>解决方法： 判断是否初始化过，初始化过就销毁然后重新初始化<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(chart !== <span class="literal">null</span> &amp;&amp; chart !== <span class="string">&#x27;&#x27;</span> &amp;&amp; chart !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">  chart.<span class="title function_">dispose</span>() <span class="comment">// 有就销毁在重新初始化</span></span><br><span class="line">&#125;</span><br><span class="line">chart = echarts.<span class="title function_">init</span>(mychartRef.<span class="property">current</span> <span class="keyword">as</span> unknown <span class="keyword">as</span> <span class="title class_">HTMLDivElement</span>, <span class="literal">undefined</span>, &#123;</span><br><span class="line">  <span class="attr">width</span>: <span class="number">500</span>,</span><br><span class="line">  <span class="attr">height</span>: <span class="number">400</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><h3 id="当itemStyle的-color-设置成渐变，label-的color无法映射到颜色"><a href="#当itemStyle的-color-设置成渐变，label-的color无法映射到颜色" class="headerlink" title="当itemStyle的 color 设置成渐变，label 的color无法映射到颜色"></a>当itemStyle的 color 设置成渐变，label 的color无法映射到颜色</h3><ul><li>原因：在label设置中的颜色没有回调函数，无法拿到渐变后data中的颜色值，所以只能单独配置</li><li>解法：如果想保持与柱体，label颜色一致，最好的处理方式是在数据中对单个对象添加<span class="en">label:{textStyle: {color:’对应的颜色’}}</span></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;style&gt;
.en {
  color: green;
  font-weight:600;
}
&lt;/style&gt;

&lt;h3 id=&quot;echarts-has-instanced&quot;&gt;&lt;a href=&quot;#echarts-has-instanced&quot; class=&quot;headerli</summary>
      
    
    
    
    <category term="可视化" scheme="http://example.com/categories/%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
    
    
    <category term="可视化" scheme="http://example.com/tags/%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>仪表盘</title>
    <link href="http://example.com/2025/03/03/%E5%8F%AF%E8%A7%86%E5%8C%96/%E4%BB%AA%E8%A1%A8%E7%9B%98/"/>
    <id>http://example.com/2025/03/03/%E5%8F%AF%E8%A7%86%E5%8C%96/%E4%BB%AA%E8%A1%A8%E7%9B%98/</id>
    <published>2025-03-03T07:41:35.711Z</published>
    <updated>2025-06-30T07:27:39.093Z</updated>
    
    <content type="html"><![CDATA[<style>.en {  color: green;  font-weight:600;}</style><p><img src="/../../img/echart/driverPlate.png" alt="仪表盘示例"  data-tag='post-image' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p><h3 id="外盘的样式、位置、刻度"><a href="#外盘的样式、位置、刻度" class="headerlink" title="外盘的样式、位置、刻度"></a>外盘的样式、位置、刻度</h3><ul><li><span class="en">startAngle 和 endAngle</span>: 控制外盘的形状</li><li><span class="en">center 和 radius</span>: 控制位置</li><li><span class="en">min 和 max</span>: 控制刻度的数值</li><li><span class="en">splitNumber</span>: 控制了刻度间隔，而不是每过splitNumber展示数值，用来调整数值的展示</li><li><span class="en">axisLine</span>: 控制表盘最外面的弧线的样式</li><li><span class="en">axisLabel</span>: 刻度文字的样式</li><li><span class="en">axisTick</span>: 小刻度线的样式</li><li><span class="en">splitLine</span>: 大刻度线的样式</li><li><span class="en">progress</span>: 指针的样式，默认就可以忽略</li><li><span class="en">detail</span>: 指针下方的文本，detail中的formatter回调中可以获取data的value</li><li><span class="en">data</span>: 指针所在位置，可以动态改变</li></ul><h3 id="配置项"><a href="#配置项" class="headerlink" title="配置项"></a>配置项</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">type</span>:<span class="string">&#x27;gauge&#x27;</span>,</span><br><span class="line"><span class="attr">startAngle</span>: <span class="number">230</span>,</span><br><span class="line"><span class="attr">endAngle</span>: -<span class="number">50</span>,</span><br><span class="line"><span class="attr">center</span>: [<span class="string">&#x27;50%&#x27;</span>, <span class="string">&#x27;55%&#x27;</span>],</span><br><span class="line"><span class="attr">radius</span>: <span class="string">&#x27;90%&#x27;</span>,</span><br><span class="line"><span class="attr">min</span>: <span class="number">0</span>,</span><br><span class="line"><span class="attr">max</span>: <span class="number">220</span>,</span><br><span class="line"><span class="attr">splitNumber</span>: <span class="number">11</span>, <span class="comment">// 刻度间隔</span></span><br><span class="line"><span class="attr">axisLine</span>: &#123;</span><br><span class="line">  <span class="attr">lineStyle</span>: &#123;</span><br><span class="line">    <span class="attr">width</span>: <span class="number">6</span>,</span><br><span class="line">    <span class="attr">color</span>: [ <span class="comment">// 只能用小数点来控制颜色的百分比</span></span><br><span class="line">      [<span class="number">0.10</span>, <span class="string">&#x27;#7CFFB2&#x27;</span>],</span><br><span class="line">      [<span class="number">0.80</span>, <span class="string">&#x27;#58D9F9&#x27;</span>],</span><br><span class="line">      [<span class="number">1</span>, <span class="string">&#x27;#FF6E76&#x27;</span>]</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">shadowBlur</span>: <span class="number">10</span>,</span><br><span class="line">    <span class="attr">shadowColor</span>: <span class="string">&#x27;rgba(255,255,255,0.5)&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">axisLabel</span>: &#123;</span><br><span class="line">  <span class="attr">color</span>: <span class="string">&#x27;white&#x27;</span>,</span><br><span class="line">  <span class="attr">distance</span>: <span class="number">15</span>,</span><br><span class="line">  <span class="attr">fontSize</span>: <span class="number">12</span>,</span><br><span class="line">  <span class="attr">fontWeight</span>: <span class="string">&#x27;bold&#x27;</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">axisTick</span>: &#123; <span class="comment">// 小刻度</span></span><br><span class="line">  <span class="attr">length</span>: <span class="number">12</span>,</span><br><span class="line">  <span class="attr">lineStyle</span>: &#123;</span><br><span class="line">    <span class="attr">color</span>: <span class="string">&#x27;auto&#x27;</span>,</span><br><span class="line">    <span class="attr">width</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">shadowBlur</span>: <span class="number">10</span>,</span><br><span class="line">    <span class="attr">shadowColor</span>: <span class="string">&#x27;rgba(255,255,255,0.5)&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">splitLine</span>: &#123; <span class="comment">// 大刻度</span></span><br><span class="line">  <span class="attr">length</span>: <span class="number">20</span>,</span><br><span class="line">  <span class="attr">lineStyle</span>: &#123;</span><br><span class="line">    <span class="attr">color</span>: <span class="string">&#x27;rgba(255,255,255,1)&#x27;</span>,</span><br><span class="line">    <span class="attr">width</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="attr">shadowBlur</span>: <span class="number">10</span>,</span><br><span class="line">    <span class="attr">shadowColor</span>: <span class="string">&#x27;rgba(255,255,255,0.5)&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">detail</span>: &#123; <span class="comment">// 展示</span></span><br><span class="line">  <span class="attr">fontSize</span>: <span class="number">20</span>,</span><br><span class="line">  <span class="attr">offsetCenter</span>: [<span class="number">0</span>, <span class="string">&#x27;40%&#x27;</span>],</span><br><span class="line">  <span class="attr">valueAnimation</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">formatter</span>: <span class="keyword">function</span> (<span class="params">value</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`km/h\n<span class="subst">$&#123;value.toFixed(<span class="number">2</span>)&#125;</span>`</span> <span class="comment">// 数值保留两位小数</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">color</span>: <span class="string">&#x27;rgba(255,255,255)&#x27;</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">data</span>: [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="attr">value</span>: <span class="number">0</span>,</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;style&gt;
.en {
  color: green;
  font-weight:600;
}
&lt;/style&gt;

&lt;p&gt;&lt;img src=&quot;/../../img/echart/driverPlate.png&quot; alt=&quot;仪表盘示例&quot;  data-tag=&#39;post-ima</summary>
      
    
    
    
    <category term="可视化" scheme="http://example.com/categories/%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
    
    
    <category term="可视化" scheme="http://example.com/tags/%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>水球图</title>
    <link href="http://example.com/2025/03/03/%E5%8F%AF%E8%A7%86%E5%8C%96/%E6%B0%B4%E7%90%83%E5%9B%BE/"/>
    <id>http://example.com/2025/03/03/%E5%8F%AF%E8%A7%86%E5%8C%96/%E6%B0%B4%E7%90%83%E5%9B%BE/</id>
    <published>2025-03-03T07:15:39.072Z</published>
    <updated>2025-06-30T07:27:39.133Z</updated>
    
    <content type="html"><![CDATA[<style>.en {  color: green;  font-weight:600;}</style><p><img src="/../../img/echart/waterBall.png" alt="水球图示例"  data-tag='post-image' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p><h3 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h3><ul><li>属于echart扩展，需要另外下载</li><li>安装：<span class="en">pnpm install echarts-liquidfill</span></li></ul><h3 id="配置项"><a href="#配置项" class="headerlink" title="配置项"></a>配置项</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">type</span>:<span class="string">&#x27;liquidFill&#x27;</span>,</span><br><span class="line"><span class="attr">phase</span>:<span class="number">0.5</span>,                          <span class="comment">// 起始相位</span></span><br><span class="line"><span class="attr">amplitude</span>:<span class="number">10</span>,                       <span class="comment">// 波浪高度</span></span><br><span class="line"><span class="attr">shape</span>:<span class="string">&#x27;diamond&#x27;</span>,                    <span class="comment">// 水球形状 &#x27;circle&#x27;， &#x27;rect&#x27;， &#x27;roundRect&#x27;， &#x27;triangle&#x27;， &#x27;pin&#x27;， &#x27;arrow&#x27;，&#x27;container&#x27;</span></span><br><span class="line"><span class="attr">shape</span>:<span class="string">&#x27;path://&#x27;</span>,                    <span class="comment">// 自定义形状，svg路径</span></span><br><span class="line"><span class="attr">direction</span>:<span class="string">&#x27;left&#x27;</span>,                   <span class="comment">// 水波运动方向</span></span><br><span class="line"><span class="attr">data</span>:[<span class="number">0.5</span>,<span class="number">0.2</span>],                     <span class="comment">// 写法一，这里设置多个值时就会出现多个波浪 取值 0到1</span></span><br><span class="line"><span class="attr">data</span>:[</span><br><span class="line">  <span class="number">0.2</span>,&#123;</span><br><span class="line">    <span class="attr">value</span>:<span class="number">0.5</span>,                      <span class="comment">// 写法二</span></span><br><span class="line">    <span class="attr">direction</span>:<span class="string">&#x27;left&#x27;</span>,               <span class="comment">// 水波运动方向</span></span><br><span class="line">    <span class="attr">itemStyle</span>:&#123;&#125;,                   <span class="comment">// 水波样式内容下同  </span></span><br><span class="line">    <span class="attr">emphasis</span>:&#123;&#125;                     <span class="comment">// 鼠标移入之后的样式内容与  itemStyle一致        </span></span><br><span class="line">  &#125;               </span><br><span class="line">]，</span><br><span class="line"><span class="attr">radius</span>:<span class="string">&#x27;100%&#x27;</span>,</span><br><span class="line"><span class="attr">color</span>:[<span class="string">&#x27;#C23531&#x27;</span>,<span class="string">&#x27;#fff&#x27;</span>,<span class="string">&#x27;red&#x27;</span>]      <span class="comment">// 波浪颜色调色板</span></span><br><span class="line"><span class="attr">center</span>:[<span class="string">&#x27;50%&#x27;</span>,<span class="string">&#x27;50%&#x27;</span>],</span><br><span class="line"><span class="attr">waveAnimation</span>:<span class="literal">true</span>,                 <span class="comment">// 是否开启水波动画效果</span></span><br><span class="line"><span class="attr">amplitude</span>:<span class="number">8</span>,                        <span class="comment">// 水波的振幅大小</span></span><br><span class="line"><span class="attr">waveLength</span>:<span class="number">10</span>,                      <span class="comment">// 水波的长度</span></span><br><span class="line"><span class="attr">waveSpeed</span>:<span class="number">0.05</span>,                     <span class="comment">// 水波的速度</span></span><br><span class="line"><span class="attr">animationEasing</span>:<span class="string">&#x27;smooth&#x27;</span>,           <span class="comment">// 初始动画加载效果 linear、加速（ease-in）、减速（ease-out）</span></span><br><span class="line"><span class="attr">animationEasingUpdate</span>:<span class="string">&#x27;smooth&#x27;</span>,     <span class="comment">// 数据更新动画的缓动效果,同上</span></span><br><span class="line"><span class="attr">animationDuration</span>:<span class="number">100</span>,              <span class="comment">// 初始动画时长单位毫秒</span></span><br><span class="line"><span class="attr">animationDurationUpdate</span>:<span class="number">100</span>,        <span class="comment">// 数据更新时长单位毫秒</span></span><br><span class="line"><span class="comment">// 水波样式</span></span><br><span class="line"><span class="attr">itemStyle</span>:&#123;</span><br><span class="line">  <span class="attr">opacity</span>:<span class="number">0.5</span>,</span><br><span class="line">  <span class="attr">color</span>:<span class="string">&#x27;red&#x27;</span>,                      <span class="comment">// 水的颜色 </span></span><br><span class="line">  <span class="attr">shadowBlur</span>:<span class="number">10</span>,                    <span class="comment">// 水波阴影大小</span></span><br><span class="line">  <span class="attr">shadowColor</span>:<span class="string">&#x27;red&#x27;</span>,                <span class="comment">// 水上方空气的颜色</span></span><br><span class="line">  <span class="attr">shadowOffsetX</span>:<span class="number">10</span>,</span><br><span class="line">  <span class="attr">shadowOffsetY</span>:<span class="number">10</span>,</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">// 鼠标移入水波时的样式(内容与 itemStyle 一致)</span></span><br><span class="line"><span class="attr">emphasis</span>:&#123;&#125;,</span><br><span class="line"><span class="comment">// 内圈的背景颜色</span></span><br><span class="line"><span class="attr">backgroundStyle</span>:&#123;</span><br><span class="line">  <span class="attr">borderWidth</span>:<span class="number">0</span>,</span><br><span class="line">  <span class="attr">color</span>:<span class="string">&#x27;red&#x27;</span>,</span><br><span class="line">  <span class="attr">borderColor</span>:<span class="string">&#x27;#fff&#x27;</span>,</span><br><span class="line">  <span class="attr">shadowBlur</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">shadowColor</span>: <span class="string">&#x27;none&#x27;</span>,</span><br><span class="line">  <span class="attr">shadowOffsetX</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">shadowOffsetY</span>: <span class="number">0</span></span><br><span class="line">&#125;,         </span><br><span class="line"><span class="comment">// 外圈轮廓的样式</span></span><br><span class="line"><span class="attr">outline</span>:&#123;</span><br><span class="line">  <span class="attr">show</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">borderDistance</span>: <span class="number">10</span>,               <span class="comment">// 控制内圈与外圈间距</span></span><br><span class="line">  <span class="attr">itemStyle</span>: &#123;</span><br><span class="line">    <span class="attr">color</span>: <span class="string">&#x27;none&#x27;</span>,</span><br><span class="line">    <span class="attr">borderWidth</span>:<span class="number">3</span>,</span><br><span class="line">    <span class="attr">borderColor</span>:<span class="string">&quot;rgba(40, 36, 36, 1)&quot;</span>,</span><br><span class="line">    <span class="attr">borderType</span>: <span class="string">&quot;dashed&quot;</span>,           <span class="comment">// &#x27;solid&#x27;、&#x27;dotted&#x27;</span></span><br><span class="line">    <span class="attr">borderDashOffset</span>: <span class="number">10</span>,</span><br><span class="line">    <span class="attr">shadowBlur</span>:<span class="number">2.5</span>,</span><br><span class="line">    <span class="attr">shadowColor</span>:<span class="string">&quot;rgba(228, 2, 2, 1)&quot;</span>,</span><br><span class="line">    <span class="attr">shadowOffsetX</span>: -<span class="number">1.5</span>,</span><br><span class="line">    <span class="attr">shadowOffsetY</span>: <span class="number">1.5</span>,</span><br><span class="line">    <span class="attr">opacity</span>:<span class="number">0.5</span>,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">label</span>:&#123;</span><br><span class="line">  <span class="attr">show</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">position</span>: <span class="string">&#x27;inside&#x27;</span>,         <span class="comment">// 标签位置 &#x27;left&#x27;、&#x27;right&#x27;、&#x27;top&#x27;、&#x27;bottom&#x27;</span></span><br><span class="line">  <span class="attr">baseline</span>: <span class="string">&#x27;middle&#x27;</span>          <span class="comment">// 标签对齐 &quot;top&quot;、&quot;bottom&quot;</span></span><br><span class="line">  <span class="attr">align</span>:<span class="string">&#x27;left&#x27;</span>,               <span class="comment">// 水平对齐方式 &quot;right&quot; </span></span><br><span class="line">  <span class="attr">color</span>: <span class="string">&#x27;#000&#x27;</span>,              <span class="comment">// 文本没被水碰到的原色</span></span><br><span class="line">  <span class="attr">insideColor</span>:<span class="string">&#x27;red&#x27;</span>,          <span class="comment">// 文本碰水后的颜色</span></span><br><span class="line">  <span class="attr">fontSize</span>: <span class="number">12</span>,</span><br><span class="line">  <span class="attr">fontWeight</span>: <span class="string">&#x27;normal&#x27;</span>,</span><br><span class="line">  <span class="attr">fontFamily</span>: <span class="string">&#x27;sans-serif&#x27;</span>,</span><br><span class="line">  <span class="attr">formatter</span>: <span class="literal">null</span>,            <span class="comment">// 格式化标签文本的回调函数</span></span><br><span class="line">  <span class="attr">backgroundColor</span>: <span class="string">&#x27;none&#x27;</span>,    <span class="comment">// 文本框颜色</span></span><br><span class="line">  <span class="attr">borderRadius</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">borderColor</span>: <span class="string">&#x27;none&#x27;</span>,</span><br><span class="line">  <span class="attr">borderWidth</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">padding</span>: [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">  <span class="attr">shadowBlur</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">shadowColor</span>: <span class="string">&#x27;none&#x27;</span>,</span><br><span class="line">  <span class="attr">shadowBlur</span>:<span class="number">20</span>,</span><br><span class="line">  <span class="attr">textBorderColor</span>:<span class="string">&#x27;red&#x27;</span>,</span><br><span class="line">  <span class="attr">textBorderWidth</span>:<span class="number">10</span>,</span><br><span class="line">  <span class="attr">textBorderType</span>:<span class="string">&#x27;solid&#x27;</span>,        <span class="comment">// 描边类型</span></span><br><span class="line">  <span class="attr">textBorderDashOffset</span>:<span class="number">10</span>,       <span class="comment">// 描边为虚线时的偏移量</span></span><br><span class="line">  <span class="attr">textShadowColor</span>:<span class="string">&#x27;transparent&#x27;</span>, <span class="comment">// 文字阴影颜色</span></span><br><span class="line">  <span class="attr">textShadowBlur</span>:<span class="number">10</span>,             <span class="comment">// 文字阴影长度</span></span><br><span class="line">  <span class="attr">textShadowOffsetX</span>:<span class="number">10</span>,          <span class="comment">// 文字阴影水平偏移量</span></span><br><span class="line">  <span class="attr">textShadowOffsetY</span>:<span class="number">10</span>,          <span class="comment">// 文字阴影竖直偏移量</span></span><br><span class="line">  <span class="attr">overflow</span>:<span class="string">&#x27;none&#x27;</span>,               <span class="comment">// 文字超出是否截断</span></span><br><span class="line">  <span class="attr">ellipsis</span>:<span class="string">&#x27;···&#x27;</span>,                <span class="comment">// 文字截断时末尾显示内容</span></span><br><span class="line">  <span class="attr">shadowOffsetX</span>:<span class="number">20</span>,              <span class="comment">// 文本标签的阴影水平偏移</span></span><br><span class="line">  <span class="attr">shadowOffsetY</span>:<span class="number">20</span>,              <span class="comment">// 文本标签的阴影竖直偏移</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;style&gt;
.en {
  color: green;
  font-weight:600;
}
&lt;/style&gt;

&lt;p&gt;&lt;img src=&quot;/../../img/echart/waterBall.png&quot; alt=&quot;水球图示例&quot;  data-tag=&#39;post-image</summary>
      
    
    
    
    <category term="可视化" scheme="http://example.com/categories/%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
    
    
    <category term="可视化" scheme="http://example.com/tags/%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>Apache echarts基础</title>
    <link href="http://example.com/2025/02/17/%E5%8F%AF%E8%A7%86%E5%8C%96/Apache%20echarts%E5%9F%BA%E7%A1%80/"/>
    <id>http://example.com/2025/02/17/%E5%8F%AF%E8%A7%86%E5%8C%96/Apache%20echarts%E5%9F%BA%E7%A1%80/</id>
    <published>2025-02-17T03:49:27.220Z</published>
    <updated>2025-06-30T07:27:39.092Z</updated>
    
    <content type="html"><![CDATA[<style>.en {  color: green;  font-weight:600;}</style><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ul><li>当前echarts版本5.6.0</li><li>全局安装：<span class="en">npm install echarts</span></li><li>局部安装： <a href="https://echarts.apache.org/en/builder.html">定制图表</a><ul><li>下载后把文件包放置在应用echart文件的根目录</li><li>如：应用echart的文件位于statistics文件夹下，那下载下来的echarts文件放置到该目录下<br><img src="/../../img/echart/echarts%E5%AE%9A%E5%88%B6%E6%96%87%E4%BB%B6.png" alt="定制文件放置位置"  data-tag='post-image' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></li></ul></li></ul><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><ul><li>定制的：<span class="en">import * as echarts from “.&#x2F;echarts&#x2F;echarts.min.js”</span></li><li>全局安装：<span class="en">import * as echarts from “echarts”</span></li></ul><h2 id="初始化echart（react）"><a href="#初始化echart（react）" class="headerlink" title="初始化echart（react）"></a>初始化echart（react）</h2><ol><li>定义ref：<span class="en">const mychartRef &#x3D; useRef(null)</span></li><li>获取元素的dom: <span class="en"><code>&lt;div ref=&#123;mychartRef&#125;&gt;&lt;/div&gt;</code></span></li><li>在useEffect钩子中去初始化获取echart的宽高大小： <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">chart = echarts.<span class="title function_">init</span>(mychartRef.<span class="property">current</span> <span class="keyword">as</span> unknown <span class="keyword">as</span> <span class="title class_">HTMLDivElement</span>,<span class="literal">undefined</span>, &#123;</span><br><span class="line">  <span class="attr">width</span>: width,<span class="number">1</span></span><br><span class="line">  <span class="attr">height</span>: <span class="number">300</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li>定义一个option对象，查看<a href="https://echarts.apache.org/zh/option.html#title">配置项手册</a></li><li>将option设置到echart中：<span class="en">chart.setOption(option)</span></li></ol><h2 id="调整图像的位置和大小"><a href="#调整图像的位置和大小" class="headerlink" title="调整图像的位置和大小"></a>调整图像的位置和大小</h2><ul><li>柱状图和折线图: 通过调整<span class="en">grid</span>的值</li><li>饼状图: 直接在series里面，通过改变<span class="en">radius和center</span>的值</li><li>雷达图: 在<span class="en">radar的radius</span>的位置</li></ul><h2 id="如何给echarts添加动态背景图"><a href="#如何给echarts添加动态背景图" class="headerlink" title="如何给echarts添加动态背景图"></a>如何给echarts添加动态背景图</h2><ul><li>不能直接给echarts添加，echart只能使用静态的</li><li>在应用echarts的容器的父容器上添加背景，背景为动态的即可</li></ul><h2 id="itemStyle的颜色"><a href="#itemStyle的颜色" class="headerlink" title="itemStyle的颜色"></a>itemStyle的颜色</h2><h3 id="不配置"><a href="#不配置" class="headerlink" title="不配置"></a>不配置</h3><ul><li>默认按照系统设置的颜色列表循环取颜色作为系列色</li></ul><h3 id="配置静态样式"><a href="#配置静态样式" class="headerlink" title="配置静态样式"></a>配置静态样式</h3><ul><li>如：”ccc”, rgba(128,128,128,0.5),rgb(128,128,128)</li></ul><h3 id="配置线性渐变"><a href="#配置线性渐变" class="headerlink" title="配置线性渐变"></a>配置线性渐变</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">type</span>: <span class="string">&#x27;linear&#x27;</span>,</span><br><span class="line">  <span class="attr">x</span>:<span class="number">0</span>,</span><br><span class="line">  <span class="attr">y</span>:<span class="number">0</span>,</span><br><span class="line">  <span class="attr">x2</span>:<span class="number">0</span>,</span><br><span class="line">  <span class="attr">y2</span>:<span class="number">1</span>, <span class="comment">// 不改变x只改变y，表示y的径向渐变</span></span><br><span class="line">  <span class="attr">colorStops</span>:[&#123;</span><br><span class="line">    <span class="attr">offset</span>:<span class="number">0</span>,<span class="attr">color</span>:<span class="string">&#x27;red&#x27;</span>, <span class="comment">// 0%处的颜色</span></span><br><span class="line">  &#125;,&#123;</span><br><span class="line">    <span class="attr">offset</span>:<span class="number">1</span>,<span class="attr">color</span>:<span class="string">&#x27;blue&#x27;</span> <span class="comment">// 100%处的颜色</span></span><br><span class="line">  &#125;],</span><br><span class="line">  <span class="attr">global</span>: <span class="literal">false</span> <span class="comment">// 缺省为 false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="配置径向渐变"><a href="#配置径向渐变" class="headerlink" title="配置径向渐变"></a>配置径向渐变</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">type</span>: <span class="string">&#x27;radial&#x27;</span>,</span><br><span class="line">  <span class="attr">x</span>: <span class="number">0.5</span>,</span><br><span class="line">  <span class="attr">y</span>: <span class="number">0.5</span>,</span><br><span class="line">  <span class="attr">r</span>: <span class="number">0.5</span>,</span><br><span class="line">  <span class="attr">colorStops</span>: [&#123;</span><br><span class="line">      <span class="attr">offset</span>: <span class="number">0</span>, <span class="attr">color</span>: <span class="string">&#x27;red&#x27;</span> <span class="comment">// 0% 处的颜色</span></span><br><span class="line">  &#125;, &#123;</span><br><span class="line">      <span class="attr">offset</span>: <span class="number">1</span>, <span class="attr">color</span>: <span class="string">&#x27;blue&#x27;</span> <span class="comment">// 100% 处的颜色</span></span><br><span class="line">  &#125;],</span><br><span class="line">  <span class="attr">global</span>: <span class="literal">false</span> <span class="comment">// 缺省为 false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="配置纹理填充"><a href="#配置纹理填充" class="headerlink" title="配置纹理填充"></a>配置纹理填充</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">image</span>: imageDom, <span class="comment">// 支持为 HTMLImageElement, HTMLCanvasElement，不支持路径字符串</span></span><br><span class="line">  <span class="attr">repeat</span>: <span class="string">&#x27;repeat&#x27;</span> <span class="comment">// 是否平铺，可以是 &#x27;repeat-x&#x27;, &#x27;repeat-y&#x27;, &#x27;no-repeat&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="动态，根据数据的颜色展示-渐变也可以这样处理"><a href="#动态，根据数据的颜色展示-渐变也可以这样处理" class="headerlink" title="动态，根据数据的颜色展示(渐变也可以这样处理)"></a>动态，根据数据的颜色展示(渐变也可以这样处理)</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> data = [&#123;<span class="attr">value</span>: <span class="number">56</span>, <span class="attr">color</span>: <span class="string">&#x27;#fffacc&#x27;</span>&#125;]</span><br><span class="line"><span class="attr">color</span>: <span class="function">(<span class="params">params</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> params.<span class="property">color</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="legend"><a href="#legend" class="headerlink" title="legend"></a>legend</h2><h3 id="什么时候展示"><a href="#什么时候展示" class="headerlink" title="什么时候展示"></a>什么时候展示</h3><ul><li>当data中的数据有name属性</li></ul><h3 id="控制legend的位置"><a href="#控制legend的位置" class="headerlink" title="控制legend的位置"></a>控制legend的位置</h3><ul><li><span class="en">top 和 left</span>: 决定图例位于图标的那个位置</li><li><span class="en">orient：’vertical’| ‘horizontal’</span>: 决定图例是垂直或水平排列</li></ul><h3 id="修改item的间隔和样式"><a href="#修改item的间隔和样式" class="headerlink" title="修改item的间隔和样式"></a>修改item的间隔和样式</h3><ul><li><span class="en">itemGap</span>: 控制图例每项的间隔</li><li><span class="en">itemWidth 和 itemHeight</span>: 控制图例图形大小</li><li><span class="en">itemStyle</span>: 控制图形的样式</li></ul><h3 id="图例的关闭"><a href="#图例的关闭" class="headerlink" title="图例的关闭"></a>图例的关闭</h3><ul><li><span class="en">selectedMode</span>：控制是否可点击图例，也可以设置为’single’ 或 ‘multiple’的选择模式</li><li><span class="en">inactiveColor</span>：关闭图例的颜色</li><li>图例关闭动态影响其他的事件：<span class="en">chart.on(‘legendselectchanged’,()&#x3D;&gt;{})</span></li></ul><h2 id="graphic"><a href="#graphic" class="headerlink" title="graphic"></a>graphic</h2><h3 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h3><ul><li>适用于自定义一个轮播条或其他自定义线段图形</li></ul><h3 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h3><ul><li>group</li><li>image</li><li>text</li><li>circle</li><li>rect</li><li>line  （以这个为分界线上面的常用）</li><li>sector</li><li>ring</li><li>polygon</li><li>polyline</li><li>bezierCurve</li><li>arc</li><li>主要通过x，y来控制位置</li></ul><h2 id="柱状图"><a href="#柱状图" class="headerlink" title="柱状图"></a>柱状图</h2><ul><li>type: ‘bar’</li></ul><h3 id="option必须要有的属性"><a href="#option必须要有的属性" class="headerlink" title="option必须要有的属性"></a>option必须要有的属性</h3><ul><li>xAxis，yAxis，grid，series, 前面三个可以空着但一定要有</li></ul><h3 id="如何设置label的字体和背景与柱体颜色一致"><a href="#如何设置label的字体和背景与柱体颜色一致" class="headerlink" title="如何设置label的字体和背景与柱体颜色一致"></a>如何设置label的字体和背景与柱体颜色一致</h3><ul><li>首先在series.itemStyle中去控制颜色</li><li>字体：<span class="en">series.label.color: ‘inherit’</span></li><li>文本框：<span class="en">series.label.borderColor: ‘inherit’</span></li><li>文本的背景：<span class="en">series.label.backgroundColor: ‘inherit’</span></li></ul><h3 id="label格式和位置"><a href="#label格式和位置" class="headerlink" title="label格式和位置"></a>label格式和位置</h3><ul><li><span class="en">distance + position</span>: 控制标签的位置和距离柱体的距离</li><li><span class="en">formatter</span>: 设置label展示的文本格式，字符串模板或回调函数<ul><li>字符串模板：<span class="en">formatter: ‘{b}: {c}’</span><ul><li>{a}：系列名(seriesName) </li><li>{b}：数据名(name) </li><li>{c}：数据值(value)</li></ul></li><li>回调函数：<span class="en">(params: Object|Array) &#x3D;&gt; string</span></li></ul></li></ul><h3 id="让柱体根据数值动态排序"><a href="#让柱体根据数值动态排序" class="headerlink" title="让柱体根据数值动态排序"></a>让柱体根据数值动态排序</h3><ul><li>开启该系列的动态排序效果: <span class="en">series.realtimeSort: true</span></li><li>实时改变标签: <span class="en">series.label.valueAnimation: true</span></li><li>在label中设置动画效果：animationFrom(进场) + animationTo（退场）</li></ul><h3 id="提示框tooltip"><a href="#提示框tooltip" class="headerlink" title="提示框tooltip"></a>提示框tooltip</h3><ul><li><span class="en">tirgger</span>：触发类型，根据图形选择，坐标轴类的选择’axis’</li><li><span class="en">axisPointer</span>：指示器，可以用来做高亮时（选中时）的背景颜色<ul><li>在<span class="en">axisPointer.type &#x3D; ‘shadow’</span></li><li>设置背景颜色<span class="en">axisPointer.shadowStyle.color&#x3D; “rgba(74, 211, 164, 0.15)”</span></li><li>如果不想有附带的虚线<span class="en">axisPointer.lineStyle.color&#x3D;”transparent”</span></li></ul></li><li>文本格式与label一样</li><li>动态时需要设置延迟为0：<span class="en">tooltip.showDelay:0</span></li><li>自定义完成后，想让tooltip定时移动展示，使用<span class="en">dispatchAction</span>事件交互<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">updateCurrentTip</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> len = option.<span class="property">series</span>[<span class="number">0</span>].<span class="property">data</span>.<span class="property">length</span></span><br><span class="line">  chart.<span class="title function_">dispatchAction</span>(&#123; <span class="comment">// 取消之前的高亮</span></span><br><span class="line">    <span class="attr">type</span>: <span class="string">&#x27;downplay&#x27;</span>,</span><br><span class="line">    <span class="attr">seriesIndex</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">dataIndex</span>: currentIndex.<span class="property">current</span></span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  currentIndex.<span class="property">current</span> = (currentIndex.<span class="property">current</span> +<span class="number">1</span>) % len</span><br><span class="line"></span><br><span class="line">  chart.<span class="title function_">dispatchAction</span>(&#123; <span class="comment">// 高亮当前</span></span><br><span class="line">    <span class="attr">type</span>: <span class="string">&#x27;hightlight&#x27;</span>,</span><br><span class="line">    <span class="attr">seriesIndex</span>:<span class="number">0</span>,</span><br><span class="line">    <span class="attr">dataIndex</span>: currentIndex.<span class="property">current</span></span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 高亮时展示提示框</span></span><br><span class="line">  chart.<span class="title function_">dispatchAction</span>(&#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&#x27;showTip&#x27;</span>,</span><br><span class="line">    <span class="attr">seriesIndex</span>:<span class="number">0</span>,</span><br><span class="line">    <span class="attr">dataIndex</span>: currentIndex.<span class="property">current</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> timer = <span class="built_in">setInterval</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">updateCurrentTip</span>()</span><br><span class="line">&#125;, <span class="number">3000</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">clearInterval</span>(timer)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="堆叠series-stack"><a href="#堆叠series-stack" class="headerlink" title="堆叠series.stack"></a>堆叠series.stack</h3><ul><li>可以用于做正负双轴，</li><li>在想要堆叠的对象上添加<span class="en">stack: ‘名字任意’</span></li><li>在下一个要堆叠的对象上也添加<span class="en">stack:’名字要保持一致’</span></li><li>堆叠的对象可以用<span class="en">barGap</span>来控制重叠的距离，完全重叠设置’-100%’</li><li>堆叠的柱体要隐藏，则把itemStyle的 color 设置成透明<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">series</span>: [&#123;</span><br><span class="line">  <span class="attr">type</span>:<span class="string">&#x27;bar&#x27;</span>,</span><br><span class="line">  <span class="attr">stack</span>: <span class="string">&#x27;a&#x27;</span></span><br><span class="line">&#125;,&#123;</span><br><span class="line">  <span class="attr">type</span>: <span class="string">&#x27;bar&#x27;</span>,</span><br><span class="line">  <span class="attr">stack</span>: <span class="string">&#x27;a&#x27;</span></span><br><span class="line">&#125;]</span><br></pre></td></tr></table></figure></li></ul><h3 id="柱状图-环形"><a href="#柱状图-环形" class="headerlink" title="柱状图-&gt;环形"></a>柱状图-&gt;环形</h3><ul><li>如果配置<span class="en">angleAxis（角度轴）、radiusAxis（半径轴）和polar（极坐标）</span></li><li>但是data中的数据需要一个个遍历成一个对象存放在series中</li><li>注意，如果实现的圆环，要一半有背景色一半没有，可以使用渐变但效果不好，建议还是使用type：’pie’类型实现</li></ul><h2 id="折线图"><a href="#折线图" class="headerlink" title="折线图"></a>折线图</h2><ul><li>type: ‘line’</li></ul><h3 id="一定要有的对象"><a href="#一定要有的对象" class="headerlink" title="一定要有的对象"></a>一定要有的对象</h3><ul><li>xAxis</li><li>yAxis</li><li>grid</li><li>series</li></ul><h3 id="两种类型的折线"><a href="#两种类型的折线" class="headerlink" title="两种类型的折线"></a>两种类型的折线</h3><ul><li>平滑折线：<span class="en">smooth: true</span></li><li>曲直折线：默认</li></ul><h3 id="关于xAxis刻度的间隔"><a href="#关于xAxis刻度的间隔" class="headerlink" title="关于xAxis刻度的间隔"></a>关于xAxis刻度的间隔</h3><ul><li>通过<span class="en">interval</span>的回调函数返回的true OR false，让刻度、标签每隔n个展示<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">axisLabel</span>: &#123;  <span class="comment">// 刻度的间隔</span></span><br><span class="line">  <span class="attr">interval</span>:<span class="function">(<span class="params">index:number,value: string</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 数组长度大于6移除一个，最终只展示6个标签，对于这种情况，标签和数据最好分开成两个数组</span></span><br><span class="line">    <span class="keyword">if</span>(monthList.<span class="property">length</span> &gt; <span class="number">6</span>) monthList.<span class="title function_">shift</span>() </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span> <span class="comment">// 返回true表示展示</span></span><br><span class="line">  &#125;,  </span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li></ul><h3 id="折线图上的点"><a href="#折线图上的点" class="headerlink" title="折线图上的点"></a>折线图上的点</h3><ul><li>data中的value在x轴和y轴相交的点</li><li><span class="en">symbol：’none’</span></li><li>内置类型：circle, rect, roundRect, triangle, diamond, pin, arrow, none</li><li>自定义<ul><li>图片形式：<span class="en">‘image:&#x2F;&#x2F; 图片链接|dataURI’</span></li><li>svg路径：<span class="en">‘path:&#x2F;&#x2F;….’</span><ul><li>如：’path:&#x2F;&#x2F;d&#x3D;”M1022.165868 1.17248h2447.020998c65.425217 …”‘</li></ul></li></ul></li></ul><h2 id="环形（饼图）"><a href="#环形（饼图）" class="headerlink" title="环形（饼图）"></a>环形（饼图）</h2><ul><li>type: ‘pie’</li></ul><h3 id="调整圆环的弧度和大小"><a href="#调整圆环的弧度和大小" class="headerlink" title="调整圆环的弧度和大小"></a>调整圆环的弧度和大小</h3><ul><li><span class="en">radius：[‘53%’, ‘53%’]</span>：控制圆的大小和是否变成圆环，参数：[圆环宽度, 圆大小]</li><li><span class="en">center: [‘50%’,’50%’]</span>：圆的位置</li><li><span class="en">startAngle: 275</span>：弧度的起始位置</li><li><span class="en">endAngle: 30</span>：弧度的结束位置</li></ul><h3 id="多个圆环"><a href="#多个圆环" class="headerlink" title="多个圆环"></a>多个圆环</h3><ul><li>建立多个对象，并使用stack堆叠</li><li>多个堆叠，center要一样</li><li>每个data一定要用数组的形式</li></ul><h3 id="没有数据是否展示圆"><a href="#没有数据是否展示圆" class="headerlink" title="没有数据是否展示圆"></a>没有数据是否展示圆</h3><ul><li><span class="en">showEmptyCircle: true</span></li><li><span class="en">emptyCircleStyle</span>对象：控制没有数据时圆的样式</li></ul><h3 id="饼图类型"><a href="#饼图类型" class="headerlink" title="饼图类型"></a>饼图类型</h3><ul><li>当数据都在一个对象上，形成饼图，默认按照数据大小，平分饼图的扇形</li><li><span class="en">roseType</span>：南丁格尔玫瑰样式(按照数据，高低呈现)</li></ul><h2 id="关系图"><a href="#关系图" class="headerlink" title="关系图"></a>关系图</h2><ul><li>type: ‘graph’</li></ul><h3 id="场景-1"><a href="#场景-1" class="headerlink" title="场景"></a>场景</h3><ul><li>展示节点与节点的关系</li></ul><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><ul><li>布局: <span class="en">layout: ‘none’</span></li><li>data: 以<span class="en">Array&lt;{name:’’, x,100,y:100，value}&gt;</span>形式存在，</li><li>links配置节点<ul><li>每一个线段都能设定起始位置和结束位置并且设置线段的弧度<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">source</span>: <span class="number">7</span> <span class="comment">// 源节点（data的索引）</span></span><br><span class="line"><span class="attr">target</span>: <span class="number">0</span> <span class="comment">// 目标节点（data的索引）  7 -&gt; 0</span></span><br><span class="line"><span class="attr">lineStyle</span>:&#123;</span><br><span class="line">  <span class="attr">curveness</span>: <span class="number">0.5</span> <span class="comment">// 线段的曲度（正负控制方向）</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li>设置线段两端的样式: <span class="en">edgeSymbol: [‘circle’, ‘arrow’]</span></li><li>线段两端的图形的大小: <span class="en">edgeSymbolSize：10</span></li><li>节点(数据)大小: <span class="en">symbolSize： data</span>，文本溢出之后再去label设置宽高去限制</li></ul><h2 id="雷达图"><a href="#雷达图" class="headerlink" title="雷达图"></a>雷达图</h2><ul><li>type&#x3D;’radar’</li></ul><h3 id="radar"><a href="#radar" class="headerlink" title="radar"></a>radar</h3><ul><li>标签数组：<span class="en">indicator</span>中设置，以<span class="en">{name： ‘’,max:0,color: ‘’}</span>格式</li><li>背景颜色：<span class="en">splitArea:{areaStyle.color: ‘transparent’}</span></li><li>也可以处理线段样式等</li></ul><h3 id="series"><a href="#series" class="headerlink" title="series"></a>series</h3><ul><li>data：与indicator基本一致，数据多一个value，表示具体数值。如果需要对单个颜色不一致，通过areaStyle:{color: ‘’}</li><li>如果数据存在min，和max则alignTicks要为false</li><li>areaStyle的颜色也可以设置为渐变的<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">areaStyle</span>: &#123;</span><br><span class="line">  <span class="attr">color</span>: <span class="keyword">new</span> echarts.<span class="property">graphic</span>.<span class="title class_">RadialGradient</span>(<span class="number">0.1</span>, <span class="number">0.6</span>, <span class="number">1</span>, [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">color</span>: <span class="string">&#x27;rgba(255, 145, 124, 0.1)&#x27;</span>,</span><br><span class="line">      <span class="attr">offset</span>: <span class="number">0</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">color</span>: <span class="string">&#x27;rgba(255, 145, 124, 0.9)&#x27;</span>,</span><br><span class="line">      <span class="attr">offset</span>: <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">  ])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="联动图"><a href="#联动图" class="headerlink" title="联动图"></a>联动图</h2><ul><li>一个echart中有多种类型的图</li><li>在series存放多个类型的图形，然后通过grid或者自身的位置来调整位置</li></ul><h3 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h3><ul><li>一般联动图会定时动态改变数据，在定时器中实时改变图的数据</li><li>一般联动图会有一个滚动条显示，可以使用dataZoom或者使用graphic自定义一个组件，然后动画和事件在图形上调用</li><li>chart.on(‘click’, function(params) {})</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;style&gt;
.en {
  color: green;
  font-weight:600;
}
&lt;/style&gt;

&lt;h2 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;当前e</summary>
      
    
    
    
    <category term="可视化" scheme="http://example.com/categories/%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
    
    
    <category term="可视化" scheme="http://example.com/tags/%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>JS-定时器与延时器</title>
    <link href="http://example.com/2024/11/19/JS/%E5%AE%9A%E6%97%B6%E5%99%A8%E4%B8%8E%E5%BB%B6%E6%97%B6%E5%99%A8/"/>
    <id>http://example.com/2024/11/19/JS/%E5%AE%9A%E6%97%B6%E5%99%A8%E4%B8%8E%E5%BB%B6%E6%97%B6%E5%99%A8/</id>
    <published>2024-11-19T02:03:17.253Z</published>
    <updated>2024-11-20T09:02:54.291Z</updated>
    
    <content type="html"><![CDATA[<style>    .en {        color: green;        font-weight: 600;    }    .desc {        color: #CD853F;        font-weight: 600;        font-size:14px;    }</style><h2 id="定时器"><a href="#定时器" class="headerlink" title="定时器"></a>定时器</h2><h3 id="setInterval"><a href="#setInterval" class="headerlink" title="setInterval"></a>setInterval</h3><ul><li><span class="en">用于重复执行一个函数或代码片段</span>，每次调用之间都有一个<span class="en">固定的时间</span>延迟。它</li><li>参数：<ol><li>回调函数，该函数会每隔一段时间被调用一次</li><li>每次调用间隔的时间，单位是毫秒</li></ol></li><li>返回值：<ul><li>返回一个 Number 类型的数据，这个数字用来作为定时器的唯一标识</li></ul></li><li>当调用 setInterval 时，它会在<span class="en">初始延迟后安排执行</span>指定的函数的第一次执行。随后的执行将根据指定的延迟重复发生。(<span class="desc">所以如果要从0毫秒开始执行，要提前调用指定函数</span>)</li><li><span class="desc">需要注意的是 setInterval 不是完全精确的。</span></li><li>可以接受无限数量的参数</li></ul><h3 id="clearInterval"><a href="#clearInterval" class="headerlink" title="clearInterval"></a>clearInterval</h3><ul><li>取消先前通过调用 setInterval 建立的定时重复操作</li><li>参数：setInterval 返回的间隔 ID</li></ul><h3 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h3><ul><li>编辑应用中的自动保存</li><li>动画和幻灯片播放定时</li><li>基于时间的提醒</li><li>间隔取消</li></ul><h3 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">cancellable</span>(<span class="params">fn: <span class="built_in">Function</span>, args: any[], t: number</span>): <span class="title class_">Function</span> &#123;</span><br><span class="line">    <span class="title function_">fn</span>(...args); <span class="comment">// 从0开始执行</span></span><br><span class="line">    <span class="keyword">const</span> timer = <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> <span class="title function_">fn</span>(...args), t); <span class="comment">// 从t开始执行</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">cancelFn</span> = (<span class="params"></span>) =&gt; <span class="built_in">clearInterval</span>(timer);</span><br><span class="line">    <span class="keyword">return</span> cancelFn;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="延时器"><a href="#延时器" class="headerlink" title="延时器"></a>延时器</h2><h3 id="setTimeout"><a href="#setTimeout" class="headerlink" title="setTimeout"></a>setTimeout</h3><ul><li>允许在指定的延迟之后安排一个函数的执行</li><li>接受无限数量的参数，但通常前两个参数总是要执行的函数和以毫秒为单位的延迟时间。</li></ul><h3 id="clearTimeout"><a href="#clearTimeout" class="headerlink" title="clearTimeout"></a>clearTimeout</h3><ul><li>取消先前通过调用 setTimeout 建立的延时操作</li><li>参数：setTimeout 返回的间隔 ID</li></ul><h3 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h3><ul><li>当调用 setTimeout 时，它启动一个计时器，并设置它在指定的延迟后运行</li><li>在延迟到期后，JavaScript事件循环将指定的函数放入执行队列。</li><li>一旦调用堆栈为空，函数就会被执行，其中的任何相关代码都会运行。</li><li>如果在延迟到期之前取消了 setTimeout 函数，计划的函数将不会被执行。</li></ul><h3 id="使用示例-1"><a href="#使用示例-1" class="headerlink" title="使用示例"></a>使用示例</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">delayedFunction</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;延迟函数执行！&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> delay = <span class="number">2000</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> timerId = <span class="built_in">setTimeout</span>(delayedFunction, delay);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在延迟到期之前取消执行：</span></span><br><span class="line"><span class="built_in">clearTimeout</span>(timerId);</span><br></pre></td></tr></table></figure><h2 id="延时器和定时器的区别"><a href="#延时器和定时器的区别" class="headerlink" title="延时器和定时器的区别"></a>延时器和定时器的区别</h2><ul><li>定时调用会执行多次，而延时调用只会执行一次</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;style&gt;
    .en {
        color: green;
        font-weight: 600;
    }
    .desc {
        color: #CD853F;
        font-weight: 600;
      </summary>
      
    
    
    
    <category term="JavaScript" scheme="http://example.com/categories/JavaScript/"/>
    
    
    <category term="定时器" scheme="http://example.com/tags/%E5%AE%9A%E6%97%B6%E5%99%A8/"/>
    
    <category term="延时器" scheme="http://example.com/tags/%E5%BB%B6%E6%97%B6%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>微信小程序-项目遇到的问题合集</title>
    <link href="http://example.com/2024/11/04/WeChatMini/%E9%A1%B9%E7%9B%AE%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98%E5%90%88%E9%9B%86/"/>
    <id>http://example.com/2024/11/04/WeChatMini/%E9%A1%B9%E7%9B%AE%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98%E5%90%88%E9%9B%86/</id>
    <published>2024-11-04T01:57:32.116Z</published>
    <updated>2025-06-30T07:27:39.133Z</updated>
    
    <content type="html"><![CDATA[<style>.en {  color: green;  font-weight: 600;}.ans {  font-size:14px;}</style><h2 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a>注意事项：</h2><ul><li>重复调用请求影响服务器性能尤其是全局调用时要多检查</li><li>微信小程序的三目运算格式中冒号前后如果是字符串的一定要用双引号或单引号包起来，否则不生效。示例：a ? ‘b’ : ‘c’</li></ul><p></p><h2 id="tailwind-、taro-、小程序之间的问题"><a href="#tailwind-、taro-、小程序之间的问题" class="headerlink" title="tailwind 、taro 、小程序之间的问题"></a>tailwind 、taro 、小程序之间的问题</h2><h3 id="解决构建后生成的miniprogram-npm包太大，主包超过2M"><a href="#解决构建后生成的miniprogram-npm包太大，主包超过2M" class="headerlink" title="解决构建后生成的miniprogram_npm包太大，主包超过2M"></a>解决构建后生成的miniprogram_npm包太大，主包超过2M</h3><ul><li>在project.config.json中的setting设置<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;ignoreDevUnusedFiles&quot;</span>: <span class="literal">true</span>, <span class="comment">// 预览、真机调试和本地模拟器等开发阶段是否过滤无依赖文件，默认为true</span></span><br><span class="line"><span class="string">&quot;ignoreUploadUnusedFiles&quot;</span>: <span class="literal">true</span> <span class="comment">// 上传时过滤无依赖文件</span></span><br></pre></td></tr></table></figure></li><li>其他配置参考<a href="https://developers.weixin.qq.com/miniprogram/dev/devtools/projectconfig.html">微信小程序项目配置文件</a></li></ul><h3 id="解决vscode中ts插件与小程序的api的飘红线问题"><a href="#解决vscode中ts插件与小程序的api的飘红线问题" class="headerlink" title="解决vscode中ts插件与小程序的api的飘红线问题"></a>解决vscode中ts插件与小程序的api的飘红线问题</h3><ul><li>在typings&#x2F;index上添加<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference path=&quot;../node_modules/miniprogram-api-typings/index.d.ts&quot; /&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="解决tsconfig-json报错【找不到“sass”的类型定义文件。程序包含该文件是因为-隐式类型库-“sass”-的入口点】"><a href="#解决tsconfig-json报错【找不到“sass”的类型定义文件。程序包含该文件是因为-隐式类型库-“sass”-的入口点】" class="headerlink" title="解决tsconfig.json报错【找不到“sass”的类型定义文件。程序包含该文件是因为:隐式类型库 “sass” 的入口点】"></a>解决tsconfig.json报错【找不到“sass”的类型定义文件。程序包含该文件是因为:隐式类型库 “sass” 的入口点】</h3><ul><li>1.安装<span class="en">npm install –save-dev @types&#x2F;<a href="mailto:&#x73;&#97;&#115;&#x73;&#64;&#x31;&#46;&#52;&#51;&#46;&#49;">&#x73;&#97;&#115;&#x73;&#64;&#x31;&#46;&#52;&#51;&#46;&#49;</a></span></li><li>2.然后重启vscode</li><li>3.如果还飘红，则在tsconfig.json中添加以下配置项<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;compilerOptions&quot;</span>: &#123;</span><br><span class="line">  <span class="string">&quot;types&quot;</span>: [<span class="string">&quot;sass&quot;</span>] </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="解决tailwindcss和小程序的结合后-tailwind-base-之类的增加到app-scss中微信小程序报错【app-wxss-unexpected-token-“-”】"><a href="#解决tailwindcss和小程序的结合后-tailwind-base-之类的增加到app-scss中微信小程序报错【app-wxss-unexpected-token-“-”】" class="headerlink" title="解决tailwindcss和小程序的结合后 @tailwind base;之类的增加到app.scss中微信小程序报错【app.wxss unexpected token “;”】"></a>解决tailwindcss和小程序的结合后 @tailwind base;之类的增加到app.scss中微信小程序报错【app.wxss unexpected token “;”】</h3><ul><li>1.执行<span class="en">npx tailwindcss -o .&#x2F;src&#x2F;style&#x2F;tailwind.css</span></li><li>2.在index.html中的head标签添加<span class="en"><code>&lt;link href=&quot;./style/tailwind.css&quot; rel=&quot;stylesheet&quot; /&gt;</code></span></li></ul><h3 id="解决发现tailwind的样式在小程序中不生效"><a href="#解决发现tailwind的样式在小程序中不生效" class="headerlink" title="解决发现tailwind的样式在小程序中不生效"></a>解决发现tailwind的样式在小程序中不生效</h3><ul><li>参考文档：<a href="https://juejin.cn/post/7246328828838510653">Taro项目引入Tailwindcss的几种方式</a></li><li>1.安装<span class="en">npm install -D tailwindcss postcss autoprefixer weapp-tailwindcss</span></li><li>2.初始化配置<span class="en">npx tailwindcss init</span></li><li>3.在tailwindcss.config.js增加配置<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** <span class="doctag">@type</span> &#123;<span class="type">import(&#x27;tailwindcss&#x27;).Config</span>&#125; */</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="comment">// 不在 content 包括的文件内编写的 class，不会生成对应的工具类</span></span><br><span class="line">  <span class="attr">content</span>: [<span class="string">&#x27;./public/index.html&#x27;</span>, <span class="string">&#x27;./src/**/*.&#123;html,js,ts,jsx,tsx,vue&#125;&#x27;</span>],</span><br><span class="line">  <span class="comment">// 其他配置项</span></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="attr">corePlugins</span>: &#123;</span><br><span class="line">    <span class="comment">// 不需要 preflight，因为这主要是给 h5 的，如果你要同时开发小程序和 h5 端，你应该使用环境变量来控制它</span></span><br><span class="line">    <span class="attr">preflight</span>: <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>4.创建postcss.config.js,并注册tailwindcss<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// postcss.config.js</span></span><br><span class="line"><span class="comment">// 假如你使用的框架/工具不支持 postcss.config.js，则可以使用内联的写法</span></span><br><span class="line"><span class="comment">// 其中 `autoprefixer` 有可能已经内置了，假如框架内置了可以去除</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">plugins</span>: &#123;</span><br><span class="line">    <span class="attr">tailwindcss</span>: &#123;&#125;,</span><br><span class="line">    <span class="attr">autoprefixer</span>: &#123;&#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>5.在项目的配置文件 config&#x2F;index中注册weapp-tailwindcss:<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// config/index.js</span></span><br><span class="line"><span class="keyword">const</span> &#123; <span class="title class_">UnifiedWebpackPluginV5</span> &#125; = <span class="title function_">require</span>(<span class="params"><span class="string">&#x27;weapp-tailwindcss/webpack&#x27;</span></span>)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">mini</span>: &#123;</span><br><span class="line">    <span class="title function_">webpackChain</span>(<span class="params">chain, webpack</span>) &#123;</span><br><span class="line">      chain.<span class="title function_">merge</span>(&#123;</span><br><span class="line">        <span class="attr">plugin</span>: &#123;</span><br><span class="line">          <span class="attr">install</span>: &#123;</span><br><span class="line">            <span class="attr">plugin</span>: <span class="title class_">UnifiedWebpackPluginV5</span>,</span><br><span class="line">            <span class="attr">args</span>: [&#123;</span><br><span class="line">              <span class="attr">appType</span>: <span class="string">&#x27;taro&#x27;</span></span><br><span class="line">            &#125;]</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>6.和@tarojs&#x2F;plugin-html 一起使用时，需要配置下 postcss-html-transform 这个插件，不然它会移除整个 Tailwindcss 注入的  css var 区域块，造成所有 tw-* 相关变量找不到。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// config/index.js</span></span><br><span class="line">config = &#123;</span><br><span class="line">  <span class="attr">mini</span>: &#123;</span><br><span class="line">    <span class="attr">postcss</span>: &#123;</span><br><span class="line">      <span class="attr">htmltransform</span>: &#123;</span><br><span class="line">        <span class="attr">enable</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="comment">// 设置成 false 表示 不去除 * 相关的选择器区块</span></span><br><span class="line">        <span class="comment">// 假如开启这个配置，它会把 tailwindcss 整个 css var 的区域块直接去除掉</span></span><br><span class="line">        <span class="comment">// 需要用 config 套一层，官方文档上是错的</span></span><br><span class="line">        <span class="attr">config</span>: &#123;</span><br><span class="line">          <span class="attr">removeCursorStyle</span>: <span class="literal">false</span>,</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>7.在项目入口(app.scss)引入tailwindcss<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">import</span> <span class="string">&quot;tailwindcss/base&quot;</span>;</span><br><span class="line">@<span class="keyword">import</span> <span class="string">&quot;tailwindcss/utilities&quot;</span>;</span><br><span class="line">@<span class="keyword">import</span> <span class="string">&quot;tailwindcss/components&quot;</span>;</span><br></pre></td></tr></table></figure></li></ul><h2 id="关于js、node配置的问题"><a href="#关于js、node配置的问题" class="headerlink" title="关于js、node配置的问题"></a>关于js、node配置的问题</h2><h3 id="运行js文件时"><a href="#运行js文件时" class="headerlink" title="运行js文件时"></a>运行js文件时</h3><ul><li>解决提示<span class="ans">【Warning: To load an ES module, set “type” - “module” in JS】</span></li><li>在package.json中配置<span class="en">type:”module”</span>即可</li></ul><h3 id="运行js文件时-1"><a href="#运行js文件时-1" class="headerlink" title="运行js文件时"></a>运行js文件时</h3><ul><li>解决提示<span class="ans">【Invalid package config E:\practice\p-four\node_modules\iconv-lite\package.json while importing “iconv-lite” from xxxx.js. Unexpected token &lt; in JSON at position 101】</span></li><li>运行<span class="en">npm install</span></li></ul><h3 id="运行项目"><a href="#运行项目" class="headerlink" title="运行项目"></a>运行项目</h3><ul><li>解决提示<span class="ans">【Error [ERR_MODULE_NOT_FOUND]: Cannot find module ‘xxx\config\webpack.common’ imported from xxx\config\webpack.dev.js】</span></li><li>把package.json的type去掉</li></ul><h3 id="运行项目网页"><a href="#运行项目网页" class="headerlink" title="运行项目网页"></a>运行项目网页</h3><ul><li>解决提示<span class="ans">【Refused to apply style from ‘<a href="http://localhost:9000/comp/asset/main.css">http://localhost:9000/comp/asset/main.css</a>‘ because its MIME type (‘text&#x2F;html’) is not a supported stylesheet MIME type, and strict MIME checking is enabled.】</span></li><li>webpack.config.js 添加 publicPath 属性<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">path</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;build&quot;</span>),</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&quot;build.[contenthash:10].js&quot;</span>,</span><br><span class="line">    <span class="attr">publicPath</span>: <span class="string">&quot;/&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>参考文章：<a href="https://juejin.cn/post/6979855519490474021">该文章最后一个问题</a></li></ul><h3 id="项目运行后"><a href="#项目运行后" class="headerlink" title="项目运行后"></a>项目运行后</h3><ul><li>解决刷新就会提示<span class="ans">【GET <a href="http://localhost:9000/comp/asset/image/gongzuotai.png">http://localhost:9000/comp/asset/image/gongzuotai.png</a> 404 (Not Found)】</span></li><li>图片的路径不对，在所有使用图片的路径中使用<span class="en"><code>/asset/image/xxx.jpg</code></span> 而不是<code>asset/image.xxx.jpg</code></li></ul><h3 id="遇到提示"><a href="#遇到提示" class="headerlink" title="遇到提示"></a>遇到提示</h3><ul><li>解决<code>&lt;view&gt;</code>…之类的标签报错问题或者template_v0_p1之类的问题，大概率是项目中不支持该标签</li><li>排查标签使用是否正确。例如：遇到页面使用<code>&lt;div&gt;</code>标签，然后用来小程序使用的<code>&lt;view&gt;</code>标签</li></ul><h3 id="npm报错"><a href="#npm报错" class="headerlink" title="npm报错"></a>npm报错</h3><ul><li><span class="ans">request to <a href="https://registry.npm.taobao.org/">https://registry.npm.taobao.org</a> failed, reason certificate has expired</span></li><li>解决提示淘宝镜像过期</li><li>1.<span class="en">npm config list</span> 查看当前的npm镜像</li><li>2.<span class="en">npm cache clean –force</span> 清空缓存</li><li>3.<span class="en">npm config set registry <a href="https://registry.npmmirror.com/">https://registry.npmmirror.com</a></span> 【推荐】 修改镜像</li><li>或者 <span class="en">npm config set registry <a href="https://registry.npmjs.org/">https://registry.npmjs.org/</a></span> (或npm config delete registry) </li><li>即修改完毕可正常使用</li></ul><h3 id="npm构建报错"><a href="#npm构建报错" class="headerlink" title="npm构建报错"></a>npm构建报错</h3><ul><li>解决构建不出miniprogram_npm</li><li>在project.config.json中添加配置   <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;packNpmManually&quot;</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="string">&quot;packNpmRelationList&quot;</span>: [</span><br><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;packageJsonPath&quot;</span>: <span class="string">&quot;./package.json&quot;</span>,</span><br><span class="line"><span class="string">&quot;miniprogramNpmDistDir&quot;</span>: <span class="string">&quot;./&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">],</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;style&gt;
.en {
  color: green;
  font-weight: 600;
}

.ans {
  font-size:14px;
}

&lt;/style&gt;

&lt;h2 id=&quot;注意事项：&quot;&gt;&lt;a href=&quot;#注意事项：&quot; class=&quot;headerlink</summary>
      
    
    
    
    <category term="微信小程序" scheme="http://example.com/categories/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
    
    <category term="问题与方案" scheme="http://example.com/tags/%E9%97%AE%E9%A2%98%E4%B8%8E%E6%96%B9%E6%A1%88/"/>
    
  </entry>
  
  <entry>
    <title>微信小程序-小程序优化 | 学习笔记</title>
    <link href="http://example.com/2024/11/04/WeChatMini/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%BC%98%E5%8C%96/"/>
    <id>http://example.com/2024/11/04/WeChatMini/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%BC%98%E5%8C%96/</id>
    <published>2024-11-04T01:57:32.100Z</published>
    <updated>2025-06-30T07:27:39.133Z</updated>
    
    <content type="html"><![CDATA[<style>.en {  color: green;  font-weight: 600;}.desc {  color: #CD853F;  font-weight: 600;  font-size:14px;}.key {  color: #483D8B;  font-weight: 700;}</style><h2 id="启动流程"><a href="#启动流程" class="headerlink" title="启动流程"></a>启动流程</h2><ul><li><h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><ul><li>小程序运行进程及运行环境的准备</li><li>代码包下载、校验及初始化</li><li>视图层系统组件、webview容器和原生组件的初始化</li><li>逻辑层JS引擎初始化及域创建</li></ul></li><li><h3 id="代码注入"><a href="#代码注入" class="headerlink" title="代码注入"></a>代码注入</h3><ul><li>框架及第三方基础代码的初始化 — <span class="desc">小程序基础库、扩展库、插件，自定义组件</span></li><li>开发者代码注入<ul><li>开发者逻辑层代码 — <span class="desc">派发<code>App.onLaunch还有App.onShow</code>这些事件</span></li><li>开发者视图层代码 — <span class="desc">公共代码以及页面代码的注入</span></li></ul></li></ul></li><li><h3 id="首屏渲染"><a href="#首屏渲染" class="headerlink" title="首屏渲染"></a>首屏渲染</h3><ul><li>逻辑层页面的初始化，这个时间点是initDataSendTime的一个触发时机，会派发<span class="key">Page.onLoad</span>事件</li><li>视图层时间点走到viewLayerReaderStartTime，会派发<span class="key">Page.onShow</span>事件</li><li>开发者代码从后端拉取数据，准备data数据</li><li>页面的整体的渲染</li><li>视图层时间点走到viewLayerReaderEndTime，会派发<span class="key">Page.onReady</span>事件，标志着首屏渲染的完成</li></ul></li></ul><h2 id="启动方式"><a href="#启动方式" class="headerlink" title="启动方式"></a>启动方式</h2><h3 id="冷启动"><a href="#冷启动" class="headerlink" title="冷启动"></a>冷启动</h3><ul><li>用户设备上第一次打开或销毁后再打开小程序，进入后台<span class="key">30分钟以后</span>再次进入前台冷启动</li></ul><h3 id="热启动"><a href="#热启动" class="headerlink" title="热启动"></a>热启动</h3><ul><li>小程序启动的一种优化机制，小程序进入后台<span class="key">30分钟以内</span>再次进入前台，可以直接从后台状态然后恢复到前台，前面的启动流程都不会执行</li></ul><h2 id="小程序性能的优化"><a href="#小程序性能的优化" class="headerlink" title="小程序性能的优化"></a>小程序性能的优化</h2><h3 id="冷启动性能的优化"><a href="#冷启动性能的优化" class="headerlink" title="冷启动性能的优化"></a>冷启动性能的优化</h3><h4 id="涉及的生命周期函数"><a href="#涉及的生命周期函数" class="headerlink" title="涉及的生命周期函数"></a>涉及的生命周期函数</h4><ul><li><code>App.onLaunch</code>: 监听小程序初始化 — <span class="desc">启动流程，一次性</span></li><li><code>App.onHide</code>：监听小程序切后台 — <span class="desc">运行时性能</span></li><li><code>App.onShow</code>：监听小程序启动或切前台 — <span class="desc">视图显示时派发，重复派发与启动流程相关的事件,运行时性能</span></li></ul><h4 id="涉及的页面生命周期函数"><a href="#涉及的页面生命周期函数" class="headerlink" title="涉及的页面生命周期函数"></a>涉及的页面生命周期函数</h4><ul><li><code>Page.onLoad</code>：监听页面加载 — <span class="desc">启动流程，一次性</span></li><li><code>Page.onShow</code>：监听页面显示 — <span class="desc">视图显示时派发，重复派发与启动流程优化相关的一次性事件</span></li><li><code>Page.onHide</code>：监听页面隐藏 — <span class="desc">运行时性能</span></li><li><code>Page.onReady</code>：监听页面初次渲染完成 — <span class="desc">启动流程，一次性</span></li><li><code>Page.onUnload</code>：监听页面卸载 — <span class="desc">运行时性能</span></li></ul><h4 id="顺着整个过程和涉及的生命周期函数的可优化节点"><a href="#顺着整个过程和涉及的生命周期函数的可优化节点" class="headerlink" title="顺着整个过程和涉及的生命周期函数的可优化节点"></a>顺着整个过程和涉及的生命周期函数的可优化节点</h4><ul><li>环境准备阶段、拉取小程序基本信息阶段 — <span class="desc">拉取信息是同步(用户使用越多启动性能越好，提高轮询机制的命中率)</span></li><li>紧跟小程序基础库更新 — <span class="desc">提高预加载环境的命中率</span></li><li>代码注入阶段 — <span class="desc">减少代码的注入量和复杂度，以期减少启动时间</span></li><li>合适的生命周期函数节点 — <span class="desc">首屏渲染要从后端拉取数据并在首页进行渲染时，使用异步转同步的编程范式以及使用并发复合命令，在多个文件里边对齐这个代码的执行点</span></li><li><code>Page.onReady</code>时间派发、首屏渲染完成阶段 — <span class="desc">使用动态数据加载的，使用骨架屏技巧、压缩图片、提高服务器接口响应效率和数据传输效率</span></li><li>数据预拉去和周期性更新机制 — <span class="desc">微信提供了数据预加载周期性更新机制</span></li><li>低端机首次渲染需要较长时间的情况下 — <span class="desc">微信提供了初始渲染缓存机制</span></li></ul><h3 id="运行时渲染性能的优化"><a href="#运行时渲染性能的优化" class="headerlink" title="运行时渲染性能的优化"></a>运行时渲染性能的优化</h3><h4 id="双线程运行机制"><a href="#双线程运行机制" class="headerlink" title="双线程运行机制"></a>双线程运行机制</h4><ul><li>微信小程序可以看作是由逻辑层、视图层两个线程协同完成运行的</li><li><span class="key">逻辑层负责执行JS代码，视图层负责渲染UI页面。</span>逻辑层与视图层之间的事件触发以及数据传递，即<span class="key">setData方法的调用全是由底层的Native层负责中转完成的</span>。</li><li><span class="key">setData函数用于更新视图数据</span>，按照微信小程序的性能评判标准，setData每次传递的数据大小不能超过256KB，超过这个限制页面就容易卡顿。在页面或者是列表组件scroll事件里面，频繁地调用setData,视图层来不及渲染也会出现明显的卡顿现象。</li></ul><h4 id="冷启动时以及运行时可以使用的性能优化技巧"><a href="#冷启动时以及运行时可以使用的性能优化技巧" class="headerlink" title="冷启动时以及运行时可以使用的性能优化技巧"></a>冷启动时以及运行时可以使用的性能优化技巧</h4><ul><li>使用WXS脚本，在视图层完成事件处理</li><li>重渲染机制</li><li>支持<code>WXWebAssembly</code></li><li>允许开发者另开<code>Worker</code>线程 — <span class="desc">针对JS是单线程执行</span></li><li>分页渲染、使用虚拟<code>DOM</code> — <span class="desc">针对长列表页面setData单次传递的数据不能超过256KB限制</span></li><li>使用<code>LocalStorange</code>接口数据缓存于本地 — <span class="desc">针对每次拉取动态数据需要时间</span></li><li>5s的“挂起”状态 — <span class="desc">进入后台后有5秒挂起状态，在这种状态下setData没有必要执行</span></li><li>启用<code>Http2、Quic</code>协议 — <span class="desc">与后台进行数据交互的时候可以启用Http2 Quic等协议</span></li><li><code>getCurrentPages()</code>接口 — <span class="desc">在page.Unload中将定时器以及wx.onxx的全局监听和与全局对象有关的事件监听全部移除</span></li><li>原生的<code>Context</code>节点 — <span class="desc">原生组件，可以通过SelectorQuery查询到这个原生节点，然后再利用这个原生节点直接操作和更新视图</span></li><li>本地图片上传到云</li></ul><h2 id="骨架屏"><a href="#骨架屏" class="headerlink" title="骨架屏"></a>骨架屏</h2><ul><li>优缺点：<span class="key">不能使首屏渲染加快</span>，但在白屏时给用户提供反馈，<span class="key">减缓用户焦虑</span>等待的情绪</li><li>在data中默认设置<span class="key">loading:true</span>，在数据加载完成后设置<span class="key">loading:false</span>，在页面中可以通过<span class="key">wx:if 和 wx:else来避免</span>数据先加载出来导致和骨架屏页面<span class="key">重叠</span></li><li>不要直接修改生成的骨架屏代码<ul><li>修改配置以后要重新生成骨架屏代码，wxml或js代码后续有修改也要重新生成骨架屏</li></ul></li><li>骨架屏只给主页使用</li></ul><h2 id="使用虚拟DOM，优化长列表内容"><a href="#使用虚拟DOM，优化长列表内容" class="headerlink" title="使用虚拟DOM，优化长列表内容"></a>使用虚拟DOM，优化长列表内容</h2><ul><li>使用<span class="key">recycle-view组件</span>(平台能力-&gt;扩展能力-&gt;扩展组件)</li><li><span class="en">npm install –save miniprogram-recycle-view</span> 安装完成后，构建npm</li><li>在页面的json文件中将<code>recycle-view</code>和<code>recycle-item</code>引用到usingComponent</li><li>很好的实现了虚拟DMOM</li><li>结合滚动事件scrolltolower，还可以实现逐页加载与更新列表数据</li><li>本身已经<span class="key">默认开启throttle函数</span>节流机制</li><li>预留了插槽，方便开发者添加个性业务</li></ul><h2 id="页面容器page-container"><a href="#页面容器page-container" class="headerlink" title="页面容器page-container"></a>页面容器page-container</h2><ul><li>做弹窗</li></ul><h2 id="优化视图页动画效果"><a href="#优化视图页动画效果" class="headerlink" title="优化视图页动画效果"></a>优化视图页动画效果</h2><ul><li>使用Animation对象实现的CSS动画 — <span class="desc">效率最低</span></li><li>使用页面或组件对象拥有的animate，实现<code>关键帧</code>动画 — <span class="desc">第一推荐,效率非最高</span></li><li>滚动事件驱动的响应式动画 — <span class="desc">推荐的低成本创建响应式页面效果的方式</span><ul><li><span class="key">本质上响应式动画也是通过animation接口实现的</span></li><li>依据scroller这个组件的滚动而变化</li><li>通过<span class="en"><code>wx.createSelectorQuery().select(&#39;#id&#39;).fields()</code></span>去查询scroller组件</li><li>然后再回调里面调用animate去设置它的对象，然后再onReady中调用</li></ul></li><li>通过WXS脚本实现的样式动画 —  <span class="desc">效率最高，适用高频动画，但目前只支持es5</span><ul><li>由.wxs脚本实现，事件绑定再一个WXS脚本导出的事件句柄函数</li><li>通过<span class="key">事件句柄函数的ownerInstance</span>调用的<span class="key">selectAllComponents或者selectComponent</span>去查询页面上的组件，查询后通过<span class="key">setStyle</span>设置组件的样式</li></ul></li></ul><h2 id="重渲染与自定义组件优化"><a href="#重渲染与自定义组件优化" class="headerlink" title="重渲染与自定义组件优化"></a>重渲染与自定义组件优化</h2><blockquote><p>重渲染： 使用新的节点树，有目标地将原节点树上需要更新的节点一一更新的过程</p></blockquote><ul><li>将界面功能组件化 — <span class="desc">频繁改动的功能</span></li><li>去掉不必要的数据设置，减少每次setData设置的数据量</li><li>通过wxs脚本改写组件，可以在视图层完成的代码逻辑<ul><li>wxml增加了wxs模块的引入，并且在view中添加<span class="key">change:mode&#x3D;”“ mode&#x3D;”“</span>,wxs脚本中通过函数判断mode来调用对应模式的函数或代码</li><li>使用<span class="key">page.requestAnimationFrame()</span>可以防止跟不上渲染造成卡顿</li></ul></li></ul><h2 id="代码按需注入与初始渲染缓存"><a href="#代码按需注入与初始渲染缓存" class="headerlink" title="代码按需注入与初始渲染缓存"></a>代码按需注入与初始渲染缓存</h2><ul><li><span class="key">“lazyCodeLoading”: “requiredComponents”</span>, 按需注入</li><li><span class="key">“initialRenderingCache”:”xxx”</span>, 使视图层不需要等待逻辑层初始化完毕<ul><li>参数：<code>static</code> 静态初始渲染缓存 | <code>dynamic</code> 动态缓存</li><li><span class="key">this.setInitialRenderingCache({swiperlist: swipers})</span> 设置需要动态缓存的数据</li></ul></li><li>静态导航页用初始渲染缓存，动态详情页用骨架屏</li></ul><h2 id="使用独立分包和分包预加载"><a href="#使用独立分包和分包预加载" class="headerlink" title="使用独立分包和分包预加载"></a>使用独立分包和分包预加载</h2><ul><li><span class="key">this.selectComponent(‘#id’).select(2)</span>指定tarbar默认选中那个索引</li><li>tarbar最好使用自定的组件</li><li>独立分包，获取<code>getApp(&#123;allowDefault : true&#125;)</code><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;preloadRule&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;页面路径&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;nrework&quot;</span><span class="punctuation">:</span> <span class="string">&quot;all&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;packages&quot;</span><span class="punctuation">:</span> <span class="string">&quot;__APP__&quot;</span> <span class="comment">//代表主包</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="独立分包使用占位组件-—-分包异步化"><a href="#独立分包使用占位组件-—-分包异步化" class="headerlink" title="独立分包使用占位组件 — 分包异步化"></a>独立分包使用占位组件 — 分包异步化</h2><ul><li>前提项目已经启用懒加载机制，代码是按需加载注入的，使用占位组件，给自定义组件安排一个替身，在真实的自定义组件加载并注入之前先用替身展示，进一步优化启动的性能</li></ul><h3 id="组件的分包异步化及主页中占位组件的使用"><a href="#组件的分包异步化及主页中占位组件的使用" class="headerlink" title="组件的分包异步化及主页中占位组件的使用"></a>组件的分包异步化及主页中占位组件的使用</h3><ul><li>将首页使用的所有自定义组件移动到分包中，然后再使用占位组件延迟加载它们</li><li>app.json创建组件分包,可以没有页面，把组件放在该分包中</li><li>修改主页配置，将组件由全局用用改为页面引用，并进行占位的组件声明，</li><li>在页面的<code>componentPlaceholder</code>选项下设置组件替身{“原组件名”：”自定义组件|标准组件view”}， 使用自定义组件的话要先引入，然后使用自定义组件名即可</li></ul><h3 id="使用封面页"><a href="#使用封面页" class="headerlink" title="使用封面页"></a>使用封面页</h3><ul><li>创建一个空白效果的页面，作为伪首页只放一个logo和名称，在onReady中添加跳转到真首页代码，作用加载主包中的所有基础内容，加载完成后跳转真首页</li><li>封面页位于主包内，真首页移到分包中，同时preloadRule开启最该分包的预加载</li></ul><h4 id="非独立分包中的页面被访问时主包同时也会被下载，但其他普通分包不会被下载。"><a href="#非独立分包中的页面被访问时主包同时也会被下载，但其他普通分包不会被下载。" class="headerlink" title="非独立分包中的页面被访问时主包同时也会被下载，但其他普通分包不会被下载。"></a>非独立分包中的页面被访问时主包同时也会被下载，但其他普通分包不会被下载。</h4><h4 id="独立分包它并不加载主包，放在主包里边的共享代码，在独立分包里无法直接使用"><a href="#独立分包它并不加载主包，放在主包里边的共享代码，在独立分包里无法直接使用" class="headerlink" title="独立分包它并不加载主包，放在主包里边的共享代码，在独立分包里无法直接使用"></a>独立分包它并不加载主包，放在主包里边的共享代码，在独立分包里无法直接使用</h4><h2 id="JS代码的分包异步化"><a href="#JS代码的分包异步化" class="headerlink" title="JS代码的分包异步化"></a>JS代码的分包异步化</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">;(<span class="title function_">async</span> () =&gt; &#123;&#125;</span><br><span class="line"><span class="keyword">const</span> &#123;<span class="attr">default</span>:getNavList&#125; = <span class="keyword">await</span> <span class="built_in">require</span>.<span class="title function_">async</span>(<span class="string">&quot;../相对路径&quot;</span>)&#125;)&#123;&#125;</span><br><span class="line"><span class="keyword">const</span> &#123;<span class="attr">default</span>:getNavList&#125; = <span class="keyword">await</span> getApp.<span class="title function_">requireAsync</span>(<span class="string">&quot;/绝对地址&quot;</span>)&#125;)&#123;&#125;</span><br></pre></td></tr></table></figure><ul><li>在app.js文件中定义两个支持绝对路径的方法，代替默认的require以及require.async(少用)</li></ul><h3 id="项目插件化"><a href="#项目插件化" class="headerlink" title="项目插件化"></a>项目插件化</h3><ul><li>在插件模式下，静态依赖分析工作不了</li><li>使用插件模式，创建plugin目录，在app.json中给使用的分包配置plugin选项，在app.json中添加pluginRoot选项，配置plugin的放置位置</li><li>在onReady中 <span class="en">requirePlugin(‘myPlugin’,plugin &#x3D;&gt; {})</span></li><li>或 <span class="en">requirePlugin.async(“myPlugin”).then(plugin &#x3D;&gt; {})</span></li><li>使用立即执行函数<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">;(<span class="title function_">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="title function_">requirePlugin</span>(<span class="string">&#x27;myPlugin&#x27;</span>,<span class="function"><span class="params">plugin</span> =&gt;</span> &#123;&#125;)</span><br><span class="line">  <span class="comment">// 或 let plugin = await requirePlugin.async(&quot;myPlugin&quot;).catch()</span></span><br><span class="line">&#125;)&#123;&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="使用WXWebAssembly优化运算性能"><a href="#使用WXWebAssembly优化运算性能" class="headerlink" title="使用WXWebAssembly优化运算性能"></a>使用WXWebAssembly优化运算性能</h2><blockquote><p>允许开发者使用Go、C、C++等后端强类型语言编写代码，然后将其编译为一种类似于汇编代码的二进制代码，弥补解析新语言JS在执行性能上的不足</p></blockquote><ul><li>编写go语言 –&gt; 编译压缩为wasm文件 –&gt; 从Go语言源码里面拷贝并且修改wasm_exec.js文件(必不可少),同时也需要一个text_encoder.js文件</li><li>在项目的根目录创建一个目录，放置Go语言代码<ol><li>先安装Go语言包（Go版本和文件想对应，所以版本安装要谨慎）</li><li>在调用前关闭环境变量 <span class="en">go env -w GO111MODULE&#x3D;off</span></li><li>调用<span class="en">.&#x2F;build.sh (GO111MODULE&#x3D;off GOOS-js GOARCH&#x3D;wasm go build -o 编译后的名字.wasm 编译的文件.go)</span></li><li>压缩文件, 安装<span class="en">brew install brotli</span>,目标位置删除 <span class="en">rm -f 目标路径&#x2F;xx.wasm.br</span>, <span class="en">brotli -o 文件的位置&#x2F;xxx.wasm.br xxx.wasm</span></li></ol></li><li>将相关的js文件、wasm文件全部拷贝至对应的目录，并在次目录下依照原组件的代码，创建新组件</li></ul><h2 id="使用异步转同步的编程范式"><a href="#使用异步转同步的编程范式" class="headerlink" title="使用异步转同步的编程范式"></a>使用异步转同步的编程范式</h2><blockquote><p>异步编程： 除了主线程以外还有一个或者多个异步线程，异步线程处理worker timer定时器、网络请求、用户输入监听、事件派发等任务,<code>当异步线程有回调函数代码需要执行的时候，异步代码将这些代码推入到主线程的执行队列里面去，由主线程在不是很忙碌的时候尽快将这些代码进行执行。</code></p></blockquote><ul><li>编写异步转同步函数:promisify替代request，文件放在公共的位置</li><li>require不支持绝对路径，但在app.js文件中可以使用绝对路径<ul><li>全局的全部示例app可以通过getApp()取到，app.js文件位于项目的根目录下方便标记</li><li>函数调用时为了避免程序报错，在后面一定要加上一个默认的catch设置。</li><li>使用promisify函数的父函数，由于添加了async关键字，已经是同步函数，要避免在主线程上以阻塞的方式，即<span class="key">添加await关键字的方式调用函数</span></li></ul></li></ul><h2 id="使用复合命令模式对齐代码的执行点"><a href="#使用复合命令模式对齐代码的执行点" class="headerlink" title="使用复合命令模式对齐代码的执行点"></a>使用复合命令模式对齐代码的执行点</h2><blockquote><p>复合命令模式是一个设计模式，它和异步转同步的编程范式一样主要作用在于使我们这个代码结构变得更加清晰,易于维护，其次它还可以优化代码的调用逻辑，统筹安排代码的一个执行时机。</p></blockquote><ul><li>在App.onLaunch事件在开始拉取动态数据，将App.onLaunch和首页的Page.onLoad这两个时间节点使用并发的复合命令模式管理起来，让它们可以并发执行</li></ul><h2 id="使用worker开启新线程进行耗时运算"><a href="#使用worker开启新线程进行耗时运算" class="headerlink" title="使用worker开启新线程进行耗时运算"></a>使用worker开启新线程进行耗时运算</h2><blockquote><p>worker：依托于寄主的环境而存在的，可以在后台并行执行JS代码，不影响页面渲染的技术，将worker看作异步线程，可以在异步线程中执行一些比较耗时的计算代码，在计算代码执行完成以后再将执行结果同步给主线程使用</p></blockquote><ul><li>创建worker线程<ul><li>在app.json文件中<code>配置workers:workers&quot;</code></li></ul></li><li>创建组件，只有js改动，在使用后主动销毁worker<ul><li><span class="en">this.worker&#x3D;wx.createWorker(“目录位置”,{useExperimentalworker:true})</sapn></li></ul></li><li>worker和wxs都是异步执行worker比wxs的限制<ul><li>不能使用wx开头的小程序接口</li><li>workers目录下面可以有很多的worker文件，但同时只能有一个worker线程在开启，如果想要开新的线程，需要将原来的先给停掉，销毁掉，并且如果系统资源紧张，worker线程还有可能被系统回收掉</li><li>worker只能放在特定的已经配置好的目录下面，不能随意地放置在其他目录下</li><li>通讯不方便，worker线程和主线程之间的通讯只能使用postMessage和onMessage进行相互通讯，这是相当于观察者模式的一种通讯机制</li></ul></li></ul><h2 id="在后端使用Go语言异步执行逻辑运算代码（如何将前端工作后移）"><a href="#在后端使用Go语言异步执行逻辑运算代码（如何将前端工作后移）" class="headerlink" title="在后端使用Go语言异步执行逻辑运算代码（如何将前端工作后移）"></a>在后端使用Go语言异步执行逻辑运算代码（如何将前端工作后移）</h2><ul><li>创建后端计算接口，存放在server目录</li><li>main.go 会有启动代码，在终端中使用<span class="en">npm dev</span>，要先启用go语言模块化</li><li>扩展接口，将go代码的要扩展的接口主要的代码和相关变量，函数拷贝的项目中要使用页面的其他代码上方</li><li>用curl测试api地址<span class="en">curl api地址</span></li></ul><h2 id="使用串发命令模式延迟同步请求-如何使用数据缓存"><a href="#使用串发命令模式延迟同步请求-如何使用数据缓存" class="headerlink" title="使用串发命令模式延迟同步请求(如何使用数据缓存)"></a>使用串发命令模式延迟同步请求(如何使用数据缓存)</h2><blockquote><p>同步会阻塞主流线程<br>有些接口虽然名称上由Sync结尾，但实际却仍是同步接口，如wx.getSystemInfo、wx.getStorage、wx.setStorage这三个接口经常在App.onLaunch还有Page.onLoad中用到</p></blockquote><ul><li><h3 id="用分接口获取系统信息"><a href="#用分接口获取系统信息" class="headerlink" title="用分接口获取系统信息"></a>用分接口获取系统信息</h3><ul><li><code>wx.getSystemSetting</code> 获取设备设置</li><li><code>wx.getAppAuthorizeSetting</code> 获取微信APP授权设置</li><li><code>wx.getDeviceInfo</code> 获取设备基础信息</li><li><code>wx.getWindowInfo</code> 获取窗口信息</li><li><code>wx.getAppBaseInfo</code> 获取微信APP基础信息</li></ul></li><li><h3 id="启动过程先使用默认参数，启动完成后-即Page-onReady事件派发后-再进行相关接口的调用和缓存后端接口数据的本地缓存存取代码"><a href="#启动过程先使用默认参数，启动完成后-即Page-onReady事件派发后-再进行相关接口的调用和缓存后端接口数据的本地缓存存取代码" class="headerlink" title="启动过程先使用默认参数，启动完成后(即Page.onReady事件派发后)再进行相关接口的调用和缓存后端接口数据的本地缓存存取代码"></a>启动过程先使用默认参数，启动完成后(即Page.onReady事件派发后)再进行相关接口的调用和缓存后端接口数据的本地缓存存取代码</h3></li><li><h3 id="创建SystemInfoManager模块，这样系统信息的获取在首屏渲染后"><a href="#创建SystemInfoManager模块，这样系统信息的获取在首屏渲染后" class="headerlink" title="创建SystemInfoManager模块，这样系统信息的获取在首屏渲染后"></a>创建SystemInfoManager模块，这样系统信息的获取在首屏渲染后</h3><ul><li><span class="key">global.asyncRetrieveSystemInfo.getCommand(0).markComplete()</span>允许异步拉取系统信息 </li><li>拉去系统信息的代码卸载onLaunch</li><li>分页拉取数据，默认page&#x3D;1</li></ul></li></ul><h2 id="首页动态数据的优化"><a href="#首页动态数据的优化" class="headerlink" title="首页动态数据的优化"></a>首页动态数据的优化</h2><ul><li>在App.onLaunch节点开始加载数据</li><li>只加载首页首次渲染所需的一页数据</li></ul><h2 id="小程序切换后台后，关闭对setData的一个调用（监听App进入后台）"><a href="#小程序切换后台后，关闭对setData的一个调用（监听App进入后台）" class="headerlink" title="小程序切换后台后，关闭对setData的一个调用（监听App进入后台）"></a>小程序切换后台后，关闭对setData的一个调用（监听App进入后台）</h2><ul><li><code>wx.onAppHide</code>监听小程序进入后台事件或者 <code>App.onHide</code>捕捉小程序进入后台的时机</li><li>劫持Page对象，再page.js文件中先劫持onLoad和setData，在onLoad中获得setData的引用，然后在app.js文件里面调用page.js文件</li><li>定义工具函数mySetData，在原来所有调用setData的地方改为调用mySetData，<span class="key">不建议</span></li><li>如果必须要发生劫持的话一定要把劫持代码同意放在程序的入口处</li></ul><h2 id="在项目外使用数据预拉取与周期性更新（弱网情况）"><a href="#在项目外使用数据预拉取与周期性更新（弱网情况）" class="headerlink" title="在项目外使用数据预拉取与周期性更新（弱网情况）"></a>在项目外使用数据预拉取与周期性更新（弱网情况）</h2><ul><li>数据预拉取：在小程序启动时，由微信异步调用开发者设置的原函数或数据接口，待拿到数据后，在传递给小程序使用</li><li>周期性更新：微信每隔12小时轮询开发者设置的云函数或数据接口，由开发者在小程序中取用</li><li>在微信小程序平台开启</li><li>使用并发复合命令的竞赛模式拉取数据<ul><li><code>wx.onBackgroundFetchData</code> 微信在拿到预拉取数据的时候设置一个回调函数</li><li><code>wx.getBackgroundFetchData</code> 主动获取微信在本地缓存的预拉取数据，本地没有则拉取失败</li></ul></li></ul><h2 id="优化后端接口及网络请求参数-wx-request"><a href="#优化后端接口及网络请求参数-wx-request" class="headerlink" title="优化后端接口及网络请求参数(wx.request)"></a>优化后端接口及网络请求参数(wx.request)</h2><ul><li>enableCache，开启cache</li><li>enableHttp2，开启http2 — <span class="desc">后端需要开启相关支持</span></li><li>enableQuic，开启quic — <span class="desc">第三代网络，后端需要开启相关支持</span></li></ul><h2 id="视图代码优化技巧"><a href="#视图代码优化技巧" class="headerlink" title="视图代码优化技巧"></a>视图代码优化技巧</h2><ul><li><h3 id="在动态列表渲染优化wx-key使用"><a href="#在动态列表渲染优化wx-key使用" class="headerlink" title="在动态列表渲染优化wx:key使用"></a>在动态列表渲染优化<code>wx:key</code>使用</h3><ul><li>如果列表元素是<span class="key">单一</span>的基本数据类型，并且是唯一的，直接写成<span class="key"><code>*this</code></span>，*this就代表当前数据列表中的元素item</li><li>如果列表元素是<span class="key">对象</span>类型，可以填写列表元素对象中的一个<span class="key">字段名</span>，这个字段名在整个数据列表中必须是唯一的</li><li>列表<span class="key">不是动态</span>的，只渲染一次，wx:key设置为<span class="key">index</span></li></ul></li><li><h3 id="绑定视图事件"><a href="#绑定视图事件" class="headerlink" title="绑定视图事件"></a>绑定视图事件</h3><ul><li>使用<code>catch</code>代替<code>bind</code>，不需要冒泡只在特定节点监听事件</li><li>回传额外信息用<code>data-</code>的形式</li></ul></li><li><h3 id="使用节流函数和防抖函数，防止按钮误单击与scroll事件函数频繁触发"><a href="#使用节流函数和防抖函数，防止按钮误单击与scroll事件函数频繁触发" class="headerlink" title="使用节流函数和防抖函数，防止按钮误单击与scroll事件函数频繁触发"></a>使用节流函数和防抖函数，防止按钮误单击与scroll事件函数频繁触发</h3><ul><li>节流：控制某段JS代码的执行频率</li><li>防抖：避免一次事件当作多次处理</li><li>对于scroll高频事件要节流，使用节流函数<code>throttle</code></li><li>对于用户的<code>单击</code>事件，可以适当使用防抖函数<code>debounce</code></li></ul></li><li><h3 id="重渲染与使用wxml标签要克制"><a href="#重渲染与使用wxml标签要克制" class="headerlink" title="重渲染与使用wxml标签要克制"></a>重渲染与使用wxml标签要克制</h3><ul><li>减少wxml节点的数量,总页面节点数少于1000个，节点数深度层级少于30层，子节点数不大于60个</li><li>控制setData每次传递的数据量</li><li>能不用容器标签就不用</li></ul></li></ul><h2 id="WXSS优化技巧"><a href="#WXSS优化技巧" class="headerlink" title="WXSS优化技巧"></a>WXSS优化技巧</h2><ul><li>给滚动组件开启惯性滚动<ul><li>添加<span class="key">-webkit-overflow-scrolling: touch;</span>样式</li></ul></li><li>使用<span class="key">hover-class</span>实现按钮的单击态<ul><li>代替:active伪类</li></ul></li><li>使用<code>gulp</code>工具删除无用wxss样式 — <span class="desc">只能静态甄别不能动态</span><ul><li><span class="en">npm install gulp -g</span></li><li><span class="en">npm install –save-dev gulp gulp-cleanwxss</span></li><li>创建一个gulpfile.js文件</li><li>执行 gulp<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// gulpfile.js文件</span></span><br><span class="line"><span class="keyword">const</span> gulp = <span class="built_in">require</span>(<span class="string">&quot;gulp&quot;</span>)</span><br><span class="line"><span class="keyword">const</span> cleanwxss = <span class="built_in">require</span>(<span class="string">&quot;gulp-cleanwxss&quot;</span>)</span><br><span class="line">gulp.<span class="title function_">task</span>(<span class="string">&quot;default&quot;</span>, <span class="function">(<span class="params">done</span>) =&gt;</span> &#123; <span class="comment">// 默认执行</span></span><br><span class="line">  gulp.<span class="title function_">arc</span>(<span class="string">&quot;../miniprogram/index/page/*/*.wxss&quot;</span>) <span class="comment">// 处理的文件</span></span><br><span class="line">      .<span class="title function_">pipe</span>(<span class="title function_">cleanwxss</span>(&#123;<span class="attr">log</span>: <span class="literal">true</span>&#125;))</span><br><span class="line">      .<span class="title function_">pipe</span>(gulp.<span class="title function_">dest</span>(<span class="string">&quot;./dist&quot;</span>))  <span class="comment">//处理结果放在该目录下</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="UI交互技巧"><a href="#UI交互技巧" class="headerlink" title="UI交互技巧"></a>UI交互技巧</h2><ul><li>使用<span class="key">padding改变单击区域大小</span></li><li>使用<span class="key">伪元素改变点击区域大小</span><ul><li>给父元素reletive，伪类为absolute，且top、left、right、bottom设置为负值，扩大点击区域</li></ul></li></ul><h2 id="脚本优化技巧"><a href="#脚本优化技巧" class="headerlink" title="脚本优化技巧"></a>脚本优化技巧</h2><ul><li>如果对象被异步线程引用，或者是被全局对象引用，会造成内存泄漏</li><li>定时器是异步线程里的东西，离开页面一定要记得销毁</li><li><span class="key">使用wx.onXXX全局绑定一定要小心，有一个监听必须有一个反监听，在onUnload事件销毁</span></li><li>主题切换事件在模拟器可以通过在app.json配置”darkmode”:true</li><li>使用全局对象要小心<ul><li>所有在global上或者在app上定义的全局数据，或者在上面添加的事件监听</li><li>要及时清理，自定义对象要定义一个dispose方法</li></ul></li><li>使用this对象要谨慎（在周期性发生的异步回调函数里面）</li></ul><h2 id="setData调用优化"><a href="#setData调用优化" class="headerlink" title="setData调用优化"></a>setData调用优化</h2><ul><li>小程序切换到后台后，setData不再调用，可以结合小程序的双线程运行机制和重渲染机制</li><li>不要多次分开调用setData，尽量要合并调用</li><li>不准备渲染的数据不要放在data数据对象里边<ul><li><span class="key">只有需要触发视图更新的数据才需要放在data对象</span></li><li>不需要触发的，可以放在data对象外面（即当前页面对象上），通过this直接取用</li></ul></li><li>通过index局部更新长列表数据<ul><li>使用索引或计算属性更新局部数据</li><li>直接使用当前组件上下文对象的update方法</li></ul></li></ul><h2 id="网络请求优化之使用本地缓存-并发请求的优先级不一致"><a href="#网络请求优化之使用本地缓存-并发请求的优先级不一致" class="headerlink" title="网络请求优化之使用本地缓存 并发请求的优先级不一致"></a>网络请求优化之使用本地缓存 并发请求的优先级不一致</h2><ul><li><h3 id="减少不必要的网络请求，使用本地缓存的数据代替从后端接口拉取的数据"><a href="#减少不必要的网络请求，使用本地缓存的数据代替从后端接口拉取的数据" class="headerlink" title="减少不必要的网络请求，使用本地缓存的数据代替从后端接口拉取的数据"></a>减少不必要的网络请求，使用本地缓存的数据代替从后端接口拉取的数据</h3><ul><li>在首页的JS文件里边有加载小程序导航数据的代码，可以再这里尝试使用本地缓存技术</li><li>首先从本地缓存中尝试取出缓存数据，然后向后端发起网络请求，拿到最新的导航数据以后再调用setData重新设置一下数据，并把本地数据也刷新一遍，避免本地缓存过时（优化：改用并发复合命令或两个异步函数）</li></ul></li><li><h3 id="优化网络请求参数，提高网络请求的通讯效率-—-前面讲wx-request参数已讲"><a href="#优化网络请求参数，提高网络请求的通讯效率-—-前面讲wx-request参数已讲" class="headerlink" title="优化网络请求参数，提高网络请求的通讯效率 — 前面讲wx.request参数已讲"></a>优化网络请求参数，提高网络请求的通讯效率 — 前面讲wx.request参数已讲</h3></li><li><h3 id="优化网络请求的并发数，让优先级高的请求先执行"><a href="#优化网络请求的并发数，让优先级高的请求先执行" class="headerlink" title="优化网络请求的并发数，让优先级高的请求先执行"></a>优化网络请求的并发数，让优先级高的请求先执行</h3><ul><li>因为有由wx.request发出的请求有最大10个的并发限制（限基础库1.4.0以下）</li><li>改造request工具函数<ul><li>安装 <span class="en">yarn add priority-async-queue</span></li><li>构建npm</li><li>使用自定义的request方法时，在重要的网络请求添加priority选项</li><li><code>const res = await request(&#123;url:&quot;&quot;,priority:&quot;urgent&quot;&#125;)</code></li><li>在自定义的request方法中引入<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">PriorityAsyncQueue</span> = <span class="built_in">require</span> <span class="string">&quot;priority-async-queue&quot;</span></span><br><span class="line"><span class="keyword">const</span> queue = <span class="keyword">new</span> <span class="title class_">PriorityAsyncQueue</span>(<span class="number">10</span>) <span class="comment">// default 10</span></span><br><span class="line"><span class="keyword">const</span> low=<span class="string">&quot;low&quot;</span>,normal=<span class="string">&quot;normal&quot;</span>,mid=<span class="string">&quot;mid&quot;</span>,high=<span class="string">&quot;high&quot;</span>,urgent=<span class="string">&quot;urgent&quot;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> priority = &#123;low , normal, mid, high, urgent&#125;</span><br><span class="line"><span class="keyword">const</span> priority = args.<span class="property">priority</span> ? args.<span class="property">priority</span> : normal</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>) =&gt;</span> &#123;</span><br><span class="line">  queue.<span class="title function_">addTask</span>(&#123;prority&#125;, <span class="function">()=&gt;</span>&#123;</span><br><span class="line">    wx.<span class="title function_">request</span>(</span><br><span class="line">      <span class="title class_">Object</span>.<span class="title function_">assign</span>(args,&#123;<span class="attr">success</span>:resolve,<span class="attr">fail</span>:reject&#125;)</span><br><span class="line">  )&#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul><h2 id="图片优化技巧"><a href="#图片优化技巧" class="headerlink" title="图片优化技巧"></a>图片优化技巧</h2><ul><li>尽量减少图片的请求参数</li><li>尽量压缩图片的大小</li><li>尽量使用带有cdn加速的网络图片链接</li><li>尽可能使用高压缩比图片，例如webp格式的图片</li><li>生成雪碧图<ul><li>多张图片合成一张图片，通过background-image来使用的图片</li><li><span class="en">npm install libpng</span></li><li><span class="en">npm -g install miniprogram-slim</span></li><li>执行<span class="en">generate_sprite.sh</span>生成的脚本</li></ul></li><li>图片压缩<ul><li>在线 <a href="https://tinypng.com/">https://tinypng.com/</a></li><li>离线 将图片存放的文件夹拷贝在tools文件夹下，然后执行cpmpress.sh脚本<ul><li><span class="en">npm install libpng</span></li><li><span class="en">miniprogram-slim imagemin -o .&#x2F;生成的文件夹 –png-quality “0.65,0.8” .&#x2F;存放图片的文件夹&#x2F;**&#x2F;*.png</span></li></ul></li></ul></li><li>使用腾讯云cos存储本地图片<ul><li>上传本地图片到cos的方法<ul><li>uploadImageToCos()</li><li><span class="en">npm install cos-nodejs-sdk-v5</span><ul><li><a href="https://github.com/tencentyun/cos-nodejs-sdk-v5">https://github.com/tencentyun/cos-nodejs-sdk-v5</a></li></ul></li></ul></li><li>然后登录腾讯云官方网站开通对象存储服务并创建一个默认的存储桶</li><li>创建一个upload.js文件，实现uploadImageToCos函数</li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;style&gt;
.en {
  color: green;
  font-weight: 600;
}

.desc {
  color: #CD853F;
  font-weight: 600;
  font-size:14px;
}

.key {
  color: #483</summary>
      
    
    
    
    <category term="微信小程序" scheme="http://example.com/categories/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
    
    <category term="知识" scheme="http://example.com/tags/%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>微信小程序-解决滚动到对应试图标签也随着动</title>
    <link href="http://example.com/2024/11/04/WeChatMini/%E8%A7%A3%E5%86%B3%E6%BB%9A%E5%8A%A8%E5%88%B0%E5%AF%B9%E5%BA%94%E8%A7%86%E5%9B%BE%E6%A0%87%E7%AD%BE%E4%B9%9F%E9%9A%8F%E7%9D%80%E5%8A%A8/"/>
    <id>http://example.com/2024/11/04/WeChatMini/%E8%A7%A3%E5%86%B3%E6%BB%9A%E5%8A%A8%E5%88%B0%E5%AF%B9%E5%BA%94%E8%A7%86%E5%9B%BE%E6%A0%87%E7%AD%BE%E4%B9%9F%E9%9A%8F%E7%9D%80%E5%8A%A8/</id>
    <published>2024-11-04T01:57:32.083Z</published>
    <updated>2024-11-06T09:30:17.198Z</updated>
    
    <content type="html"><![CDATA[<style>.key {  color: #483D8B;  font-weight: 600;}</style><h2 id="点击对应标签-滚到到对应位置"><a href="#点击对应标签-滚到到对应位置" class="headerlink" title="点击对应标签,滚到到对应位置"></a>点击对应标签,滚到到对应位置</h2><blockquote><p>用于制作侧边导航栏，滚动到下一栏，左边title也跟着动</p></blockquote><p><img src="/../../img/WeChatMini/%E5%88%86%E7%B1%BB%E6%A0%8F%E7%9B%AE.png" alt="侧边分类栏目"  data-tag='post-image' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p><h3 id="关键点"><a href="#关键点" class="headerlink" title="关键点"></a>关键点</h3><ul><li><code>scroll-view</code>中的<span class="key">scroll-into-view</span></li><li>容器必须有<span class="key">固定高度</span>,子容器使用<code>id</code></li></ul><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><ol><li>左边的侧边使用van-sidebar,使用它的activeKey,来动态将index传进函数中(不使用van-sidebar则需要使用mark:index来传递当前索引)</li><li>左边通过函数和传递的对应索引来修改scroll-into-view的索引</li><li>右边的scroll-view容器设置scroll-into-view，因为scroll-into-view的值时动态的，要在data中初始化为0</li><li>右边的子容器中id要跟scroll-into-view格式保持一致，确保跳转时能跳转到对应子容器上</li><li>示例：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">&lt;view <span class="keyword">class</span>=<span class="string">&quot;index-list-layout&quot;</span>&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;index-list-refer&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span> <span class="comment">// 参照物</span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">scroll-view</span> <span class="attr">class</span>=<span class="string">&quot;index-list index-list-sidebar&quot;</span> <span class="attr">scroll-y</span>&gt;</span> // 左边的标题栏</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">van-sidebar</span> </span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">custom-class</span>=<span class="string">&quot;sidebar-class&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">active-key</span>=<span class="string">&quot;&#123;&#123;sidebarIndex&#125;&#125;&quot;</span> </span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">bind:change</span>=<span class="string">&quot;onChangeSidebar&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    &gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">block</span> <span class="attr">wx:for</span>=<span class="string">&quot;&#123;&#123;商品列表&#125;&#125;&quot;</span> <span class="attr">wx:key</span>=<span class="string">&quot;id&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">van-sidebar-item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">view</span> <span class="attr">slot</span>=<span class="string">&quot;title&quot;</span> <span class="attr">class</span>=<span class="string">&quot;van-multi-ellipsis--l2&quot;</span>&gt;</span>&#123;&#123;item.title&#125;&#125;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">van-sidebar-item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">block</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">van-sidebar</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">scroll-view</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">scroll-view</span>  // <span class="attr">右边的内容商品栏</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">class</span>=<span class="string">&quot;index-list index-list-category&quot;</span> </span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">scroll-y</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">scroll-with-animation</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">scroll-into-view</span>=<span class="string">&quot;index-item-&#123;&#123;selectIndex&#125;&#125;&quot;</span> // <span class="attr">用来定位点击左边标题栏时定位右边容器</span>，<span class="attr">当知道selectIndex的数值</span>，<span class="attr">也会跳到对应item的columnIndex数值</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  &gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">block</span> </span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">wx:for</span>=<span class="string">&quot;&#123;&#123;商品列表&#125;&#125;&quot;</span> </span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">wx:for-item</span>=<span class="string">&quot;column&quot;</span> </span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">wx:for-index</span>=<span class="string">&quot;columnIndex&quot;</span> </span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">wx:key</span>=<span class="string">&quot;id&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    &gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">view</span> // <span class="attr">被参照物</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">id</span>=<span class="string">&quot;index-item-&#123;&#123;columnIndex&#125;&#125;&quot;</span> </span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">class</span>=<span class="string">&quot;index-list-item&quot;</span> </span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">data-index</span>=<span class="string">&quot;&#123;&#123;columnIndex&#125;&#125;&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      &gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">view</span>&gt;</span> 商品内容省略<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">block</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">scroll-view</span>&gt;</span></span></span><br><span class="line">&lt;/view&gt;</span><br></pre></td></tr></table></figure></li></ol><h2 id="获取滚动时的节点信息"><a href="#获取滚动时的节点信息" class="headerlink" title="获取滚动时的节点信息"></a>获取滚动时的节点信息</h2><h3 id="关键点-1"><a href="#关键点-1" class="headerlink" title="关键点"></a>关键点</h3><ul><li>创建一个监听器<span class="key">createIntersectionObserver</span></li><li>oberserveAll:true   监听所有节点</li><li>.relativeTo(参照物)  </li><li>.observe(被参照物)</li></ul><h3 id="步骤-1"><a href="#步骤-1" class="headerlink" title="步骤"></a>步骤</h3><ol><li>当左边侧边栏布局形成时,需要有一个参照物,可以在滚动布局上创建一个空的view,样式设置高1px,相对上一个位置绝对定位,左高为0</li><li>由于获取到被参照物中没有index,而我们需要index,在view中手动设置一个data-index<ul><li>也可以使用到van-sidebar,使用它的activeKey,来动态将index传进来,实现滚动到对应地方,标签也跟着改变(例子使用van-sidebar)</li></ul></li><li>左边有参照物，右边的整个商品滚动布局就作为被参照物</li><li>然后监听索引列表滚动的函数通过监听参照物与被参照物是否相交将对应的索引值传到dada中</li><li>该函数在商品列表渲染完成后使用nextTick调用</li><li>示例<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">changeIndexListScroll</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> intersectionObserver = <span class="variable language_">this</span>.<span class="title function_">createIntersectionObserver</span>(&#123;</span><br><span class="line">    <span class="attr">observeAll</span>: <span class="literal">true</span>,</span><br><span class="line">  &#125;)</span><br><span class="line">  intersectionObserver</span><br><span class="line">    .<span class="title function_">relativeTo</span>(<span class="string">&#x27;.index-list-refer&#x27;</span>)</span><br><span class="line">    .<span class="title function_">observe</span>(<span class="string">&#x27;.index-list-item&#x27;</span>, <span class="function">(<span class="params">e: any</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> index = e.<span class="property">dataset</span>.<span class="property">index</span></span><br><span class="line">      <span class="keyword">const</span> intersectionRatio = <span class="title class_">Math</span>.<span class="title function_">ceil</span>(e.<span class="property">intersectionRatio</span>)</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (intersectionRatio &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">setData</span>(&#123;</span><br><span class="line">          <span class="attr">sidebarIndex</span>: index,</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;style&gt;
.key {
  color: #483D8B;
  font-weight: 600;
}

&lt;/style&gt;
&lt;h2 id=&quot;点击对应标签-滚到到对应位置&quot;&gt;&lt;a href=&quot;#点击对应标签-滚到到对应位置&quot; class=&quot;headerlink&quot; title=</summary>
      
    
    
    
    <category term="微信小程序" scheme="http://example.com/categories/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
    
    <category term="scroll-view" scheme="http://example.com/tags/scroll-view/"/>
    
  </entry>
  
  <entry>
    <title>微信小程序-归纳总结</title>
    <link href="http://example.com/2024/11/04/WeChatMini/%E5%BD%92%E7%BA%B3%E6%80%BB%E7%BB%93/"/>
    <id>http://example.com/2024/11/04/WeChatMini/%E5%BD%92%E7%BA%B3%E6%80%BB%E7%BB%93/</id>
    <published>2024-11-04T01:57:32.066Z</published>
    <updated>2024-12-10T08:31:58.855Z</updated>
    
    <content type="html"><![CDATA[<style>.key {  color: #483D8B;  font-weight: 600;}</style><h2 id="当前页面对某个选项进行切换，同步更新全局更新"><a href="#当前页面对某个选项进行切换，同步更新全局更新" class="headerlink" title="当前页面对某个选项进行切换，同步更新全局更新"></a>当前页面对某个选项进行切换，同步更新全局更新</h2><blockquote><p>该问题使用的技术栈是 React + Taro搭建的微信小程序</p></blockquote><ul><li><h3 id="分析："><a href="#分析：" class="headerlink" title="分析："></a>分析：</h3><ul><li>既然是全局更新就要在全局store中设置好存储的变量，方便统一管理</li><li>在首页将页面要获取的共同内容存到对应变量中</li><li>在对应的页面拿取这个变量的内容</li><li>然后就处理事件即可</li></ul></li><li><h3 id="遇到的问题："><a href="#遇到的问题：" class="headerlink" title="遇到的问题："></a>遇到的问题：</h3><ul><li>写完代码后，查看页面没有变化，通过打印发现变量有更新，但是没有重新调用请求</li></ul></li><li><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><ul><li>如果存在分页，检查数据<span class="key">顺序</span>是否有问题</li><li>查看要调用的<span class="key">请求依赖哪些变量对象</span>，查看这个对象中的变量或变量<span class="key">是否更新</span>，是否每次更新时都更新该对象，如果没有，就要想办法赋值使该对象更新</li><li>如果是查看或者创建数据的时候用到<code>useQuery</code>来获取接口数据的话，且通过切换选项看到其他接口可以随着切换重新请求数据，而其中一个不行，问题极有可能是这个接口的<code>useQuery</code>的使用了<span class="key"><code>enabled:false</code>,导致数据不会重新更新</span>，所以此时设置<span class="key"><code>enabled:true</code>，或<code>去掉enabled</code></span>都可解决</li><li>承接方法3，如果是<span class="key">创建和编辑在同一个页面</span>在一起的话，初始数据和处理方式是有些不同的，这个时候，编辑页面需要<code>传参</code>表明它是编辑页面，<span class="key">编辑页面不需要切换</span>，且要带着已经编辑过的数据，既<code>useQuery</code>中要<span class="key"><code>enabled:false</code></span>，记录数据，不轻易更新，所以解决方法是<span class="key"><code>enabled: type !== &#39;edit&#39;</code></span>，其中type时用来标记当前页面时编辑状态还是创建状态</li></ul></li></ul><h2 id="缓存问题"><a href="#缓存问题" class="headerlink" title="缓存问题"></a>缓存问题</h2><blockquote><p>该问题使用的技术栈是 React + Taro搭建的微信小程序</p></blockquote><ul><li><h3 id="业务需求"><a href="#业务需求" class="headerlink" title="业务需求"></a>业务需求</h3><ul><li>判断用户是否第一次进入小程序，如果是第一次进入小程序，或者卸载了小程序后再次进入小程序，需要弹起一个窗来让用户选择和填写昵称和头像，而这时候已静默登录了</li></ul></li><li><h3 id="分析和解决方案"><a href="#分析和解决方案" class="headerlink" title="分析和解决方案"></a>分析和解决方案</h3><ul><li>翻阅小程序文档可了解到<span class="key"><code>setStorageSync</code>，<code>getStorageSync</code></span>这个操作</li><li>理清好业务逻辑</li><li>首先第一次进入时虽然静默登录了，但是<code>storage</code>并没有存储，所以可以在<code>useEffect</code>中先调用<code>wx.getStorageSync()</code>来获取我们要存储的<code>key</code>，由于只需要获取第一次的情况，所以<code>useEffect(()=&gt; &#123;&#125;, [])</code>，这时候<code>useEffect</code>不需要依赖,只调用一次就清除副作用</li><li><span class="key">判断如果没有获取到对应的key就弹窗，有就不弹窗</span></li><li>在弹窗的取消、确认按钮和直接关闭弹窗的逻辑中调用<code>wx.setStorageSync(&#39;key&#39;, value)</code>这个方法存储，即可</li></ul></li><li><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ul><li><span class="key">缓存只能存储字符串</span>，所以如果要存储的值不是字符串类型的话，请用<span class="key"><code>JSON.stringify</code></span>将值序列化一下</li><li>最好设置<code>storage</code>时放在<code>try&#123;&#125;catch(e)&#123;&#125;</code>中方便捕获错误</li><li>按项目要求，点跳过拿的数据最好是直接拿到静默登录时服务器给的数据的信息，点确认则是要判断是否两个都有获取新数据，没有就禁用，有就存储。</li><li>不管拿到的数据是什么都要注意是否要更新该项目中的用户信息接口和store<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">wx.<span class="title function_">setStorageSync</span>(<span class="string">&#x27;userInfo&#x27;</span>, <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(e.<span class="property">detail</span>.<span class="property">userInfo</span>))</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  wx.<span class="title function_">setStorageSync</span>(<span class="string">&#x27;headImg&#x27;</span>,value)</span><br><span class="line">  wx.<span class="title function_">setStorageSync</span>(<span class="string">&#x27;nickname&#x27;</span>,value)</span><br><span class="line">&#125; <span class="keyword">catch</span>(e) &#123;&#125;</span><br><span class="line"><span class="keyword">const</span> headImgValue = wx.<span class="title function_">getStorageSync</span>(<span class="string">&#x27;headImg&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> nicknameValue = wx.<span class="title function_">getStorageSync</span>(<span class="string">&#x27;nickname&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> (headImagValue &amp;&amp; nicknameValue) &#123;</span><br><span class="line">  <span class="comment">// 不弹窗</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="comment">// 弹窗</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="Taro-的消息机制-–-全局消息中心-evenCenter"><a href="#Taro-的消息机制-–-全局消息中心-evenCenter" class="headerlink" title="Taro 的消息机制 – 全局消息中心 evenCenter"></a>Taro 的消息机制 – 全局消息中心 evenCenter</h2><blockquote><p>eventCenter的使用场景一般用作于事件的传递，例如跨页面、跨组件做一些操作。</p></blockquote><ul><li><h3 id="普通使用"><a href="#普通使用" class="headerlink" title="普通使用"></a>普通使用</h3><ul><li>使用<span class="key"><code>evenCenter.trigger(key)</code>来触发</span>事件</li><li>使用<span class="key"><code>evenCenter.on(key,() =&gt; &#123;&#125;)</code>来监听</span>事件</li><li>在<code>useUnLoad</code>中要<span class="key"><code>evenCenter.off(key)</code>卸载</span>事件</li></ul></li><li><h3 id="需要获取触发事件页面的数据给监听事件这边"><a href="#需要获取触发事件页面的数据给监听事件这边" class="headerlink" title="需要获取触发事件页面的数据给监听事件这边"></a>需要<span class="key">获取触发事件页面的数据</span>给监听事件这边</h3><ul><li>使用<span class="key"><code>evenCenter.trigger(key, arg)</code></span>来触发事件</li><li>使用<span class="key"><code>evenCenter.on(key,() =&gt; &#123;setArg(arg)&#125;)</code></span>来监听事件和触发当页的实时刷新</li><li>在<code>useUnLoad</code>中要<span class="key"><code>evenCenter.off(key)</code></span>卸载事件</li></ul></li><li><h3 id="发送数据给页面"><a href="#发送数据给页面" class="headerlink" title="发送数据给页面"></a>发送数据给页面</h3><ul><li>使用<span class="key"><code>evenCenter.on(key,() =&gt; &#123;fn(arg)&#125;)</code></span>来发送数据</li><li>使用<span class="key"><code>evenCenter.trigger(key, fn(arg))</code></span>来接收数据</li></ul></li><li><h3 id="切换参数，然后返回"><a href="#切换参数，然后返回" class="headerlink" title="切换参数，然后返回"></a>切换参数，然后返回</h3><ul><li>在<code>useUnload</code>中<span class="key">卸载的时候触发事件和传参</span></li><li>或<span class="key">在受影响的页面中</span>从store中拿到全局变量xxx并且<span class="key">实时监听全局变量</span>xxx的改变</li></ul></li></ul><h2 id="Taro-页面跳转的消息机制-–-eventChannel"><a href="#Taro-页面跳转的消息机制-–-eventChannel" class="headerlink" title="Taro 页面跳转的消息机制 – eventChannel"></a>Taro 页面跳转的消息机制 – eventChannel</h2><ul><li><h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><ul><li>A页面使用navigateTo等跳转方法直接触发事件<span class="key">res.eventChannel.emit(key,data)</span></li><li>B页面首先需要获取当前页面的实例，然后调用<span class="key">getOpenerEventChannel()</span>获取eventChannel对象</li><li>B页面使用<span class="key">eventChannel.on(key,callbackFn)</span></li><li>A页面也可以通过跳转时的events中的创建的事件来获取B页面传输过来的数据</li><li>B页面通过<span class="key">eventChannel.emit(events中的事件名,data)</span>来触发事件</li></ul></li><li><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><ul><li>A页面<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Taro</span>.<span class="title function_">navigateTo</span>(&#123;</span><br><span class="line"><span class="attr">url</span>: <span class="string">&quot;/pages/test/index&quot;</span>, <span class="comment">// 跳到页面B</span></span><br><span class="line">events： &#123;</span><br><span class="line"><span class="attr">acceptB</span>: (data) &#123;&#125; <span class="comment">// 获取B页面传送到当前页面的数据</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">success</span>: <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="comment">// 向sendB发送数据</span></span><br><span class="line">res.<span class="property">eventChannel</span>.<span class="title function_">emit</span>(<span class="string">&quot;sendB&quot;</span>, &#123;<span class="attr">data</span>: 要传递的数据&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li>B页面<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> pages = <span class="title class_">Taro</span>.<span class="title function_">getCurrentPages</span>()</span><br><span class="line"><span class="keyword">const</span> current = pages[pages.<span class="property">length</span> - <span class="number">1</span>]</span><br><span class="line"><span class="keyword">const</span> eventChannel = current.<span class="title function_">getOpenerEventChannel</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 触发A页面events的事件</span></span><br><span class="line">eventChannel.<span class="title function_">emit</span>(<span class="string">&#x27;acceptB&#x27;</span>, &#123;要传给A的数据&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 接受A页面对应事件传递的数据</span></span><br><span class="line">eventChannel.<span class="title function_">on</span>(<span class="string">&quot;sendB&quot;</span>, <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(res)&#125;)</span><br></pre></td></tr></table></figure></li></ul></li><li><h3 id="相关文档"><a href="#相关文档" class="headerlink" title="相关文档"></a>相关文档</h3><ul><li><a href="https://developers.weixin.qq.com/miniprogram/dev/api/route/EventChannel.html">API-EventChannel</a></li><li><a href="https://developers.weixin.qq.com/miniprogram/dev/api/route/wx.navigateTo.html">API-wx.navigateTo</a></li><li><a href="https://developers.weixin.qq.com/miniprogram/dev/reference/api/Page.html#%E9%A1%B5%E9%9D%A2%E9%97%B4%E9%80%9A%E4%BF%A1">官方示例</a></li></ul></li></ul><h2 id="在-input-标签中使用-useState-和-useRef-的影响"><a href="#在-input-标签中使用-useState-和-useRef-的影响" class="headerlink" title="在 input 标签中使用 useState 和 useRef 的影响"></a>在 input 标签中使用 useState 和 useRef 的影响</h2><blockquote><p>该问题使用的技术栈是 React + Taro搭建的微信小程序</p></blockquote><ul><li><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><ul><li>问题1：使用<code>&lt;Input value=&quot;&quot;/&gt;</code> 标签，需要动态获取输入框中输入的<code>value</code>的值来更新数据时，存在使用<code>useState</code>来获取<code>value</code>时，当value<code>已有值</code>，要<code>完全删除</code>旧值，输入新值时，<code>删到旧值的最后一个字符</code>时输入框会一直<code>循环重复</code>旧值，删不掉</li><li>问题2：当使用<code>useRef</code>获取的数据作为其他数据的<code>依赖</code>时，对应的数据不会随着<code>useRef</code>获取新数据的更新而更新</li></ul></li><li><h3 id="分析存在的原因"><a href="#分析存在的原因" class="headerlink" title="分析存在的原因"></a>分析存在的原因</h3><ul><li><span class="key"><code>useRef</code>直接操作<code>dom</code></span>，返回的ref对象在组件的整个生命周期内保持不变，当<span class="key">更新时不会触发组件的重新渲染</span>，而<span class="key">useState</span>会存放组件中包含的各种数据(状态)，并且当<span class="key">组件更新state&#96;时会触发组件的重新渲染</span></li></ul></li><li><h3 id="解决方案-1"><a href="#解决方案-1" class="headerlink" title="解决方案"></a>解决方案</h3><ul><li>问题1：将变量的存储和获取方式从<code>useState</code>换成<code>useRef</code></li><li>问题2：通过设置一个用<code>useState</code>存储的常量，当<code>useRef</code>更新时，让常量更新，常量存储更新后的<code>useRef</code>的数据，并作为其他数据的依赖，保证了<code>useRef</code>的数据更新时其他数据也能随着更新。</li></ul></li></ul><h2 id="scroll-view-隐藏滚动条问题"><a href="#scroll-view-隐藏滚动条问题" class="headerlink" title="scroll-view 隐藏滚动条问题"></a>scroll-view 隐藏滚动条问题</h2><blockquote><p>该问题适用于任何使用小程序 scroll-view 组件或直接使用或二次封装等</p></blockquote><ul><li>根据小程序官方文档，<code>show-scrollbar</code>默认为<code>true</code>即显示滚动条。</li><li><h3 id="问题-1"><a href="#问题-1" class="headerlink" title="问题"></a>问题</h3><ul><li>当想要<span class="key">隐藏滚动条</span>时，需要enhanced&#x3D;”true”和show-scrollbar&#x3D;”false”,但是实践会发现滚动条依然存在</li></ul></li><li><h3 id="存在的原因"><a href="#存在的原因" class="headerlink" title="存在的原因"></a>存在的原因</h3><ul><li>show-scrollbar&#x3D;””,直接赋值时，因为字符串里面有值就是true</li></ul></li><li><h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><ul><li>根据不同框架，给<code>show-scrollbar</code>赋值为<code>false</code>时，添加<code>&#123;&#125;</code>，和<code>enhanced</code><ul><li><span class="key"><code>react</code> 使用 <code>&#123;false&#125;</code></span></li><li><span class="key">原生微信小程序 使用 <code>&quot;&#123;&#123;false&#125;&#125;&quot;</code></span></li></ul></li></ul></li></ul><h2 id="解决滚动禁止穿透页面"><a href="#解决滚动禁止穿透页面" class="headerlink" title="解决滚动禁止穿透页面"></a>解决滚动禁止穿透页面</h2><blockquote><p>该问题适用于微信小程序</p></blockquote><ul><li><h3 id="问题描述："><a href="#问题描述：" class="headerlink" title="问题描述："></a>问题描述：</h3><ul><li>弹窗界面滚动(存不存在scroll-view无所谓，只要能滚动)带动下层的页面跟着滚动</li></ul></li><li><h3 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a>解决方法：</h3><ul><li>1.在弹窗组件的插槽中用一个view包裹住该弹窗要展示的内容，然后给这个view添加catch:touchmove&#x3D;”noop”</li><li>2.然后在ts&#x2F;js文件中直接添加noop(){return}即可</li></ul></li></ul><h2 id="复制大段文本，文本丢失问题"><a href="#复制大段文本，文本丢失问题" class="headerlink" title="复制大段文本，文本丢失问题"></a>复制大段文本，文本丢失问题</h2><blockquote><p>微信小程序的原生组件 textarea</p></blockquote><ul><li><h3 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h3></li><li>小程序的textare组件默认了maxlength &#x3D; 140</li><li><h3 id="解决方案-2"><a href="#解决方案-2" class="headerlink" title="解决方案"></a>解决方案</h3><ul><li>设置maxlength &#x3D; -1</li></ul></li></ul><h2 id="单选框radio除了可以传value可以传其他的值"><a href="#单选框radio除了可以传value可以传其他的值" class="headerlink" title="单选框radio除了可以传value可以传其他的值"></a>单选框radio除了可以传value可以传其他的值</h2><blockquote><p>微信小程序的 radio-group 组件和 radio 组件，该问题收集于微信开放社区</p></blockquote><p><img src="/../../img/WeChatMini/question-radio.png" alt="单选框radio除了可以传value可以传其他的值"  data-tag='post-image' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p><ul><li><h3 id="问题-2"><a href="#问题-2" class="headerlink" title="问题"></a>问题</h3><ul><li>data-传值在bindChange事件里接收不到，只能获取到value的值 &#x3D;&#x3D;&#x3D; 向value传其他的值</li></ul></li><li><h3 id="解决方法-1"><a href="#解决方法-1" class="headerlink" title="解决方法"></a>解决方法</h3><ul><li>使用wxs处理<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*wxml*/</span></span><br><span class="line">&lt;wxs <span class="variable language_">module</span>=<span class="string">&quot;JSON&quot;</span>&gt;</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  stringify : <span class="keyword">function</span>(<span class="params">item</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(item)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/wxs&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">radio-group</span> <span class="attr">...</span> &gt;</span></span></span><br><span class="line"><span class="language-xml">....</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">radio</span> <span class="attr">value</span>=<span class="string">&quot;&#123;&#123;JSON.stringify(item)&#125;&#125;&quot;</span> <span class="attr">checked</span>=<span class="string">&quot;&#123;&#123;item.checked&#125;&#125;&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">radio-group</span>&gt;</span></span></span><br><span class="line"><span class="comment">/*ts*/</span></span><br><span class="line"><span class="attr">radioChange</span>: <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> d = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(e.<span class="property">detail</span>.<span class="property">value</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;radio发生change事件，携带value值为：&#x27;</span>, d)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="关于微信昵称中Emoji表情乱码问题"><a href="#关于微信昵称中Emoji表情乱码问题" class="headerlink" title="关于微信昵称中Emoji表情乱码问题"></a>关于微信昵称中Emoji表情乱码问题</h2><ul><li><h3 id="问题-3"><a href="#问题-3" class="headerlink" title="问题"></a>问题</h3><ul><li>昵称带Emoji表情，保存到数据库里，页面显示就乱码</li></ul></li><li><h3 id="解决方法-2"><a href="#解决方法-2" class="headerlink" title="解决方法"></a>解决方法</h3><ul><li>将包含该Emoji表情的信息<span class="key">encodeURIComponent</span>编码，在使用的地方，在<span class="key">decodeURIComponent</span>解码<ul><li>在数据库连接的时候采用<span class="key">utf8mb4</span>，数据库编码和表格编码以及对应的存储字段都采用utf8mb4编码</li></ul></li></ul></li></ul><h2 id="小程序分享"><a href="#小程序分享" class="headerlink" title="小程序分享"></a>小程序分享</h2><blockquote><p>该方法使用的时vue3 + taro</p></blockquote><ul><li><h3 id="用法示例"><a href="#用法示例" class="headerlink" title="用法示例"></a>用法示例</h3></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">  <span class="keyword">import</span> &#123; useShareAppMessage &#125; <span class="keyword">from</span> <span class="string">&#x27;@tarojs/taro&#x27;</span></span><br><span class="line"></span><br><span class="line">  <span class="title function_">useShareAppMessage</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (res.<span class="property">from</span> === <span class="string">&#x27;button&#x27;</span>) &#123;</span><br><span class="line">      <span class="comment">// 来自页面内转发按钮</span></span><br><span class="line"><span class="comment">// 弹出分享图片的菜单，包括图片和发送等</span></span><br><span class="line">wx.<span class="title function_">showShareImageMenu</span>(&#123;</span><br><span class="line"><span class="attr">path</span>: res.<span class="property">tempFilePath</span></span><br><span class="line">&#125;)</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// 小程序菜单分享</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">title</span>: <span class="string">&#x27;自定义转发标题&#x27;</span>,</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&#x27;/page/user?id=123&#x27;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="点击查看更多，展示更多数据"><a href="#点击查看更多，展示更多数据" class="headerlink" title="点击查看更多，展示更多数据"></a>点击查看更多，展示更多数据</h2><blockquote><p>该方法使用微信小程序</p></blockquote><ul><li><h3 id="分析和解决方案-1"><a href="#分析和解决方案-1" class="headerlink" title="分析和解决方案"></a>分析和解决方案</h3></li><li>先把框架写好</li><li>然后通过数据判断，是否超过一定数量total，和是否点击checked来判断展示更所数据的展示</li><li>然后通过服务端给的数据来展示<ul><li>方案一：通过对应API的参数来控制点击前和点击后的数据，如点击前给两条，点击后给全部，这个要记得初始化checked，list和api对应参数</li><li>方案二：每次点击更多就加载2条数据甚至更多，checked要等到所有数据都加载完才为false，一般这样服务端给的数据应该是点击以下增加一页，给两条数据</li></ul></li></ul><h2 id="服务端给的文本有回车换行-或者-空格等特殊字符"><a href="#服务端给的文本有回车换行-或者-空格等特殊字符" class="headerlink" title="服务端给的文本有回车换行 或者 空格等特殊字符"></a>服务端给的文本有回车换行 或者 空格等特殊字符</h2><blockquote><p>微信小程序</p></blockquote><ul><li><h3 id="原因："><a href="#原因：" class="headerlink" title="原因："></a>原因：</h3><ul><li>用view标签识别不了文本的回车的标签</li></ul></li><li><h3 id="解决方法：-1"><a href="#解决方法：-1" class="headerlink" title="解决方法："></a>解决方法：</h3><ul><li>直接用text标签</li><li>text标签添加属性<span class="key">decode&#x3D;”true“</span>时可以识别<code>&amp;nbsp;</code> ,<code>&amp;gt;</code>等特殊字符</li></ul></li></ul><h2 id="vant-checkbox-group-注意点"><a href="#vant-checkbox-group-注意点" class="headerlink" title="vant-checkbox-group 注意点"></a>vant-checkbox-group 注意点</h2><ul><li><h3 id="问题："><a href="#问题：" class="headerlink" title="问题："></a>问题：</h3><ul><li>为什么点击没有勾选</li></ul></li><li><h3 id="解决方案："><a href="#解决方案：" class="headerlink" title="解决方案："></a>解决方案：</h3><ul><li>checkbox组下面的checkbox都要有name属性</li><li>使用checkbox组的方法，onChange，直接给checkbox组的value属性赋值，类型为字符串数组，值为：event.detail</li></ul></li></ul><h2 id="switch用法"><a href="#switch用法" class="headerlink" title="switch用法"></a>switch用法</h2><ul><li>优化: 当有多个键指向的内容一致时</li><li><h3 id="用法示例："><a href="#用法示例：" class="headerlink" title="用法示例："></a>用法示例：</h3></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span>(key)&#123;</span><br><span class="line"><span class="keyword">case</span> key === <span class="number">1</span>:</span><br><span class="line"><span class="keyword">case</span> key === <span class="number">2</span>:</span><br><span class="line"><span class="keyword">case</span> key === <span class="number">3</span>:</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(key === <span class="number">1</span> | <span class="number">2</span> | <span class="number">3</span>, content is same)</span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line"> <span class="keyword">default</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Array-filter-Boolean"><a href="#Array-filter-Boolean" class="headerlink" title="Array.filter(Boolean)"></a>Array.filter(Boolean)</h2><blockquote><p>本质上是将元素强制转换为布尔型并判断是否为false，以此来进行校验，适用于需要检验多个表单信息</p></blockquote><h3 id="移除数组中所有的”false”类型元素-false-null-undefined-0-NaN-空字符串"><a href="#移除数组中所有的”false”类型元素-false-null-undefined-0-NaN-空字符串" class="headerlink" title="移除数组中所有的”false”类型元素(false,null,undefined,0,NaN,空字符串)"></a>移除数组中所有的”false”类型元素(false,null,undefined,0,NaN,空字符串)</h3><ul><li>得到的是过滤后的值数组</li><li>注意：不检验对象<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">eg</span>:a simple explame</span><br><span class="line"><span class="keyword">const</span> a = [<span class="number">1</span>,<span class="number">2</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="title class_">NaN</span>,&#123;&#125;,<span class="literal">false</span>, <span class="literal">true</span>,<span class="literal">null</span>,<span class="literal">undefined</span>,<span class="number">0</span>]</span><br><span class="line"><span class="keyword">const</span> b = a.<span class="title function_">filter</span>(<span class="title class_">Boolean</span>)</span><br><span class="line"><span class="attr">eg</span>: a advanced explame</span><br><span class="line"><span class="comment">// 定义要查找的关键字类型</span></span><br><span class="line">type keyType = <span class="string">&#x27;name&#x27;</span> | <span class="string">&#x27;age&#x27;</span> | <span class="string">&#x27;hobit&#x27;</span> | <span class="string">&#x27;remark&#x27;</span> | <span class="string">&#x27;position&#x27;</span> | <span class="string">&#x27;show&#x27;</span></span><br><span class="line"><span class="comment">// 定义当key为false类型时，提示的文本</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">validateText</span>: <span class="title class_">Record</span>&lt;keyType, string&gt; = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;name is not empty!&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="string">&#x27;age is not zero!&#x27;</span>,</span><br><span class="line">    <span class="attr">hobit</span>: <span class="string">&#x27;hobit is not empty!&#x27;</span>,</span><br><span class="line">    <span class="attr">remark</span>: <span class="string">&#x27;remark is not empty!&#x27;</span>,</span><br><span class="line">    <span class="attr">position</span>: <span class="string">&#x27;position is not empty!&#x27;</span>,</span><br><span class="line">    <span class="attr">show</span>: <span class="string">&#x27;show is not false!&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 定义一个对象</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">InfoData</span>: <span class="title class_">Record</span>&lt;keyType, string | number | boolean&gt; = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;abc&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">12</span>,</span><br><span class="line">    <span class="attr">hobit</span>: <span class="string">&#x27;打球&#x27;</span>,</span><br><span class="line">    <span class="attr">remark</span>: <span class="string">&#x27;备注&#x27;</span>,</span><br><span class="line">    <span class="attr">position</span>: <span class="string">&#x27;学生&#x27;</span>,</span><br><span class="line">    <span class="attr">show</span>: <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 顶一个数组，用来存放要校验的key，按顺序校验</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">keyInfo</span>: keyType[] = [</span><br><span class="line">  <span class="string">&#x27;name&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;age&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;hobit&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;remark&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;position&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;show&#x27;</span>,</span><br><span class="line">]</span><br><span class="line"><span class="comment">// 校验是否存在false类型，返回检验没有false类型的字段，并且返回不存在数组的第一个字段</span></span><br><span class="line"><span class="keyword">const</span> validate = keyInfo</span><br><span class="line">    .<span class="title function_">filter</span>(<span class="title class_">Boolean</span>)</span><br><span class="line">    .<span class="title function_">find</span>(<span class="function">(<span class="params">key: keyType</span>) =&gt;</span> !<span class="title class_">InfoData</span>[key])</span><br><span class="line"><span class="comment">// 判断当返回的值不为undefined时，则提示对应的文本</span></span><br><span class="line"><span class="keyword">if</span> (validate) &#123;</span><br><span class="line">wx.<span class="title function_">showModal</span>(&#123;</span><br><span class="line">  <span class="attr">title</span>: <span class="string">&#x27;提示&#x27;</span>,</span><br><span class="line">  <span class="attr">content</span>: validateText[validate],</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="编辑与查看为同一页时，处理方式（无缓存）"><a href="#编辑与查看为同一页时，处理方式（无缓存）" class="headerlink" title="编辑与查看为同一页时，处理方式（无缓存）"></a>编辑与查看为同一页时，处理方式（无缓存）</h2><blockquote><p>本次项目实战使用微信小程序 + ts</p></blockquote><ul><li><h3 id="问题的描述："><a href="#问题的描述：" class="headerlink" title="问题的描述："></a>问题的描述：</h3><ul><li>第一次进入页面是编辑状态，保存了数据后，不管是否清除缓存，都展示最新的数据（只读）</li><li>只有在只读页面中点击对应的按钮，才能进入编辑状态页，并且编辑页只要没有按下保存按钮，则刷新后仍然回到点击前的只读页面，即接口返回的最新数据</li><li>只有当保存后，才会重新进入新的只读页</li></ul></li><li><h3 id="问题的解决："><a href="#问题的解决：" class="headerlink" title="问题的解决："></a>问题的解决：</h3><ul><li>首先需要将要编辑的数据及相关变量保存在同一个初始化函数中</li><li>之后通过接口返回的数据，如果失败，则为第一次进入预约页面的状态，标识编辑，然后初始化函数并且，设置变量来标识为编辑页</li><li>当内容编辑完成后，点击保存，进行校验，保存成功后，将变量标识为只读状态，并且调用接口获取最新的数据和状态，并存到初始化函数中的变量中，保持数据的统一性</li><li>当点击页面的按钮，调用初始化函数，并将变量设置为编辑状态，即可回到编辑页，</li><li>此时只有当在这个页面保存数据，才会产生新的页面，不然不管清缓存还是重新进入该页面，都应回到点击前的只读页面。</li></ul></li><li><h3 id="问题的总结："><a href="#问题的总结：" class="headerlink" title="问题的总结："></a>问题的总结：</h3><ul><li>此次遇到编辑和查看页面为同一页面时，要通过接口的数据返回，来判断并设置对应的标识以区分当前页是编辑还是查看状态</li></ul></li></ul><h2 id="单个表单数据要存入一个对象"><a href="#单个表单数据要存入一个对象" class="headerlink" title="单个表单数据要存入一个对象"></a>单个表单数据要存入一个对象</h2><blockquote><p>该问题使用微信小程序 + ts</p></blockquote><ul><li><h3 id="问题的描述"><a href="#问题的描述" class="headerlink" title="问题的描述"></a>问题的描述</h3><ul><li>当页面存在多个input标签，并需要保存提交</li><li>一般都会存储在同一个对象中，方便校验</li><li>校验使用上面的Array.filter(Boolean)里面有示例</li></ul></li><li><h3 id="问题的解决"><a href="#问题的解决" class="headerlink" title="问题的解决"></a>问题的解决</h3><ul><li>多个input标签功能一致，则可以使用同一个函数来操作</li><li>至于具体存进那个key，则可以通过在wxml页面给每一个input添加mark:key&#x3D;”定义的键”</li><li>然后每次调用函数时，可以获取key并存进对应的key中，或清除</li></ul></li><li><h3 id="问题的总结"><a href="#问题的总结" class="headerlink" title="问题的总结"></a>问题的总结</h3><ul><li>当存在多个标签一致时，观察功能&#x2F;样式是否相同，然后通过给一个区分的标签来实现调用同一个函数实现不同的功能，以减少代码量</li></ul></li></ul><h2 id="setData第二参数"><a href="#setData第二参数" class="headerlink" title="setData第二参数"></a>setData第二参数</h2><blockquote><p>微信小程序中setData方法用于设置数据，更改数据</p></blockquote><ul><li><h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><ul><li>第一个参数：Object data， 必传， 代表这次要改变的数据</li><li>第二个参数：Function callback， 选填， 代表setData引起的界面更新渲染完毕后的回调函数</li></ul></li><li><h3 id="浅薄理解："><a href="#浅薄理解：" class="headerlink" title="浅薄理解："></a>浅薄理解：</h3><ul><li>参数一就是主要用来更新数据，设置数据，参数二则是延时器的作用，渲染完在调用回调函数</li></ul></li><li><h3 id="示例："><a href="#示例：" class="headerlink" title="示例："></a>示例：</h3><ul><li>第一个参数：this.setData({val,b:a})</li><li>第二个参数：this.setData({val}, () &#x3D;&gt; { this.setData(value)})</li></ul></li></ul><h2 id="picker-view的value赋值问题"><a href="#picker-view的value赋值问题" class="headerlink" title="picker-view的value赋值问题"></a>picker-view的value赋值问题</h2><blockquote><p>picker-view时微信小程序的原生组件，用于自定义picker</p></blockquote><ul><li>已知picker-view的value属性值为每一个picker-view-column默认选中的索引数组，存在有多少个picker-view-column，数组长度就为多少</li><li><h3 id="问题：-1"><a href="#问题：-1" class="headerlink" title="问题："></a>问题：</h3><ul><li>给value赋值时，不管是不是第一项没成功赋值，定位到对应的索引，还是其他项，都显示为在索引0的位置和索引0的值，与所求相异</li></ul></li><li><h3 id="原因：-1"><a href="#原因：-1" class="headerlink" title="原因："></a>原因：</h3><ul><li>初始化函数时没有成功赋值进去，存在延时</li></ul></li><li><h3 id="解决："><a href="#解决：" class="headerlink" title="解决："></a>解决：</h3><ul><li>建议用setData的第二参数赋值，this.setData({val}, () &#x3D;&gt; { this.setData(value)})</li></ul></li></ul><h2 id="多行文本溢出省略号"><a href="#多行文本溢出省略号" class="headerlink" title="多行文本溢出省略号"></a>多行文本溢出省略号</h2><ul><li>核心代码<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">overflow</span>: hidden;</span><br><span class="line">text-<span class="attr">overflow</span>: ellipsis;</span><br><span class="line">-webkit-line-<span class="attr">clamp</span>: <span class="number">6</span>;</span><br><span class="line">word-<span class="attr">break</span>: <span class="keyword">break</span>-all;</span><br><span class="line"><span class="attr">display</span>: -webkit-box;</span><br><span class="line">-webkit-box-<span class="attr">orient</span>: vertical;</span><br></pre></td></tr></table></figure></li><li>注意：如果无效可以限制宽高</li><li>单行文本溢出省略：只要前两行</li></ul><h2 id="跳转返回上一页面并传递参数"><a href="#跳转返回上一页面并传递参数" class="headerlink" title="跳转返回上一页面并传递参数"></a>跳转返回上一页面并传递参数</h2><blockquote><p>微信小程序</p></blockquote><ul><li><h3 id="方法一：-使用wx-navigateBack"><a href="#方法一：-使用wx-navigateBack" class="headerlink" title="方法一： 使用wx.navigateBack"></a>方法一： 使用<code>wx.navigateBack</code></h3><ul><li>1.在子页面中首先获取上一页面<ul><li>const pages &#x3D; getCurrentPages()</li><li>const prePages &#x3D; pages[pages.length -2] &#x2F;&#x2F;上一级页面</li></ul></li><li>2.调用上一页面的setData方法，将数据存到上一页面，存储的变量要现在上一页面的data中声明<ul><li>prePages.setData({存储的变量：这个页面要存储的值})</li></ul></li><li>3.返回上一页面<ul><li>wx.navigateBack({ delta: 1 })</li></ul></li><li>4.上一页面接收子页面的参数可在onLoad或onShow中执行，onShow每次页面加载都会执行，并保存<ul><li>const pages &#x3D; getCurrentPages()</li><li>const currentPages &#x3D; pages[pages.length-1]</li><li>this.setData({存储的变量：这个页面要存储的值})</li></ul></li></ul></li><li><h3 id="方法二：使用wx-navigateTo"><a href="#方法二：使用wx-navigateTo" class="headerlink" title="方法二：使用wx.navigateTo"></a>方法二：使用<code>wx.navigateTo</code></h3><ul><li>1.子页面通过路径传递参数<ul><li>wx.navigateTo({ url: <code>/xxx/xxx/xxx?params=$&#123;params&#125;&amp;params1=$&#123;params&#125;</code>})</li></ul></li><li>2.父页面通过onLoad(options)方法获取参数<ul><li>onLoad(options){ const params &#x3D; options.params }</li></ul></li></ul></li></ul><h2 id="如何避免输入中文拼音时触发input事件"><a href="#如何避免输入中文拼音时触发input事件" class="headerlink" title="如何避免输入中文拼音时触发input事件"></a>如何避免输入中文拼音时触发input事件</h2><blockquote><p>原生html+js</p></blockquote><ul><li>监听compositionstart 、 compositionend</li><li>定义isComposite 为false，在start中设置为true，在end中设置为false</li><li>然后在input事件中判断，当isComposite为false时就进行输入搜索事件</li><li>之后在end事件中在调用输入搜索事件</li></ul><h2 id="实现防纂改的水印"><a href="#实现防纂改的水印" class="headerlink" title="实现防纂改的水印"></a>实现防纂改的水印</h2><ul><li>react框架使用ant design，有一个watermark组件</li></ul><h2 id="一个布局存在多个点击事件，先后触发问题"><a href="#一个布局存在多个点击事件，先后触发问题" class="headerlink" title="一个布局存在多个点击事件，先后触发问题"></a>一个布局存在多个点击事件，先后触发问题</h2><blockquote><p>本质：微信小程序 bindtap 和 catchtap 的区别</p></blockquote><ol><li>事件冒泡:<ul><li>bindtap会将事件传递给父节点进行处理，而catchtap会阻止事件继续冒泡到父节点。</li><li>即<code>当一个元素上的bindtap事件被触发，如果该元素的父节点又有bindtap事件，则父节点的事件也会执行；而catchtap则只会触发当前元素的事件处理函数</code></li></ul></li><li>绑定顺序:<ul><li>bindtap的触发顺序是由子元素向父元素冒泡的顺序(由内向外)</li><li>catchtap的触发顺序是由父元素向子元素铺捕获的顺序(由外到内)</li></ul></li><li>阻止默认:<ul><li>bindtap可以通过返回false来阻止默认行为的触发，而catchtap无法阻止</li></ul></li><li>通常情况下使用bindtap，不想触发父元素使用catchtap</li></ol><h2 id="小红点单数圆形，双数圆矩形"><a href="#小红点单数圆形，双数圆矩形" class="headerlink" title="小红点单数圆形，双数圆矩形"></a>小红点单数圆形，双数圆矩形</h2><blockquote><p>参考vant-icon</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">.<span class="property">dot</span> &#123;</span><br><span class="line">font-<span class="attr">size</span>: 20rpx</span><br><span class="line">  <span class="attr">background</span>: red;</span><br><span class="line">  border-<span class="attr">radius</span>: 16rpx;</span><br><span class="line">  <span class="attr">padding</span>:4rpx 8rpx;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="微信小程序中使用font-weight来加粗字体的，"><a href="#微信小程序中使用font-weight来加粗字体的，" class="headerlink" title="微信小程序中使用font-weight来加粗字体的，"></a>微信小程序中使用font-weight来加粗字体的，</h2><ul><li>部分机型使用数字如600，手机上不显示加粗效果。</li><li>使用bold，适配所有机型。但比较粗<!-- # 视频：流量限制 --></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;style&gt;
.key {
  color: #483D8B;
  font-weight: 600;
}
&lt;/style&gt;

&lt;h2 id=&quot;当前页面对某个选项进行切换，同步更新全局更新&quot;&gt;&lt;a href=&quot;#当前页面对某个选项进行切换，同步更新全局更新&quot; class=&quot;he</summary>
      
    
    
    
    <category term="微信小程序" scheme="http://example.com/categories/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
    
    <category term="问题与方案" scheme="http://example.com/tags/%E9%97%AE%E9%A2%98%E4%B8%8E%E6%96%B9%E6%A1%88/"/>
    
  </entry>
  
  <entry>
    <title>微信小程序-海报生成</title>
    <link href="http://example.com/2024/11/04/WeChatMini/%E6%B5%B7%E6%8A%A5%E7%94%9F%E6%88%90/"/>
    <id>http://example.com/2024/11/04/WeChatMini/%E6%B5%B7%E6%8A%A5%E7%94%9F%E6%88%90/</id>
    <published>2024-11-04T01:57:32.066Z</published>
    <updated>2024-11-06T09:40:10.445Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>应用场景：一般是需要生成海报时跳转到新页面，先看一下海报整体预览的效果，然后在点击这个页面的保存来保存海报</p></blockquote><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><ul><li><h3 id="点击海报生成-跳转页面"><a href="#点击海报生成-跳转页面" class="headerlink" title="点击海报生成,跳转页面"></a>点击海报生成,跳转页面</h3></li><li><h3 id="进入该海报页面要有一个加载效果"><a href="#进入该海报页面要有一个加载效果" class="headerlink" title="进入该海报页面要有一个加载效果"></a>进入该海报页面要有一个加载效果</h3></li><li><h3 id="加载数据-显示图片效果，用canvas生成海报"><a href="#加载数据-显示图片效果，用canvas生成海报" class="headerlink" title="加载数据,显示图片效果，用canvas生成海报"></a>加载数据,显示图片效果，用canvas生成海报</h3><ul><li>1.使用canvas在wxml页面占位</li><li>2.给canvas添加一个id，类型选择2d，宽高都要自适应</li><li>3.在函数中使用wx.createSelectorQuery()来初始化canvas</li><li>4.在ready函数中使用该函数，并且保存canvas到data中</li></ul></li><li><h3 id="通过页面中的按钮来触发wx-canvasToTempFilePath把生成后的数据及形状绘制成图片"><a href="#通过页面中的按钮来触发wx-canvasToTempFilePath把生成后的数据及形状绘制成图片" class="headerlink" title="通过页面中的按钮来触发wx.canvasToTempFilePath把生成后的数据及形状绘制成图片"></a>通过页面中的按钮来触发wx.canvasToTempFilePath把生成后的数据及形状绘制成图片</h3></li><li><h3 id="点击保存弹出一个加载效果"><a href="#点击保存弹出一个加载效果" class="headerlink" title="点击保存弹出一个加载效果"></a>点击保存弹出一个加载效果</h3></li><li><h3 id="成功保存就地址给手机的地址-失败提示"><a href="#成功保存就地址给手机的地址-失败提示" class="headerlink" title="成功保存就地址给手机的地址,失败提示"></a>成功保存就地址给手机的地址,失败提示</h3></li><li><h3 id="涉及到获取二维码"><a href="#涉及到获取二维码" class="headerlink" title="涉及到获取二维码"></a>涉及到获取二维码</h3><ul><li>可以先生成二维码，然后通过数据传递到canvas中对应的位置</li></ul></li></ul><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*wxml*/</span></span><br><span class="line">&lt;view <span class="keyword">class</span>=<span class="string">&quot;cantainer&quot;</span>&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">&quot;Canvasbg&quot;</span> <span class="attr">type</span>=<span class="string">&quot;2d&quot;</span> <span class="attr">style</span>=<span class="string">&quot; width: 100%; height: 100vh;&quot;</span>  <span class="attr">class</span>=<span class="string">&quot;poster&quot;</span>/&gt;</span></span></span><br><span class="line">  &lt;!-- <span class="language-xml"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">&quot;myCanvas&quot;</span> <span class="attr">type</span>=<span class="string">&quot;2d&quot;</span> <span class="attr">style</span>=<span class="string">&quot;border: 1px solid; width: 300px; height: 150px;&quot;</span> /&gt;</span></span> --&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;cantainer-bottom&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;info&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">text</span> &gt;</span>图片已生成,保存发布出来让朋友点赞吧!<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn&quot;</span> <span class="attr">size</span>=<span class="string">&quot;default&quot;</span> <span class="attr">bind:tap</span>=<span class="string">&quot;saveImage&quot;</span>&gt;</span>保存<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></span><br><span class="line">&lt;/view&gt;</span><br><span class="line"><span class="comment">/*sass*/</span></span><br><span class="line">.<span class="property">cantainer</span>&#123;</span><br><span class="line">  <span class="attr">display</span>: flex;</span><br><span class="line">  flex-<span class="attr">direction</span>: column;</span><br><span class="line">  flex-<span class="attr">grow</span>: <span class="number">1</span>;</span><br><span class="line">  background-<span class="attr">color</span>: skyblue;</span><br><span class="line">  <span class="attr">height</span>: inherit;</span><br><span class="line">  &amp;-bottom &#123;</span><br><span class="line">    <span class="attr">display</span>: flex;</span><br><span class="line">    flex-<span class="attr">direction</span>: column;</span><br><span class="line">    <span class="attr">height</span>: 600rpx;</span><br><span class="line">    background-<span class="attr">color</span>: white;</span><br><span class="line">    justify-<span class="attr">content</span>: center;</span><br><span class="line">    align-<span class="attr">items</span>: center;</span><br><span class="line"></span><br><span class="line">    .<span class="property">info</span> &#123;</span><br><span class="line">      <span class="attr">height</span>: 100rpx;</span><br><span class="line">      font-<span class="attr">size</span>: 32rpx;</span><br><span class="line">      line-<span class="attr">height</span>: 32rpx;</span><br><span class="line">    &#125;</span><br><span class="line">    .<span class="property">btn</span>&#123; </span><br><span class="line">      background-<span class="attr">color</span>: <span class="title function_">var</span>(--primary-color);</span><br><span class="line">      <span class="attr">width</span>: 240rpx;</span><br><span class="line">      <span class="attr">height</span>: 80rpx;</span><br><span class="line">      <span class="attr">color</span>: white;</span><br><span class="line">      border-<span class="attr">radius</span>: 40rpx;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*ts*/</span></span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">photo</span>:<span class="string">&quot;../../../asset/squase.jpg&quot;</span>,</span><br><span class="line">    <span class="attr">imgUrl</span>:<span class="string">&quot;../../../asset/squase.jpg&quot;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;demo&#x27;</span>,</span><br><span class="line">    <span class="attr">desc</span>: <span class="string">&#x27;一个海报的demo&#x27;</span>,</span><br><span class="line">    <span class="attr">address</span>: <span class="string">&#x27;小行星&#x27;</span>,</span><br><span class="line">    <span class="attr">canvas</span>:<span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">onReady</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">draw</span>()</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">draw</span>(<span class="params"></span>) &#123;</span><br><span class="line">    wx.<span class="title function_">createSelectorQuery</span>()</span><br><span class="line">    .<span class="title function_">select</span>(<span class="string">&#x27;#Canvasbg&#x27;</span>)</span><br><span class="line">    .<span class="title function_">fields</span>(&#123; <span class="attr">node</span>: <span class="literal">true</span> ,<span class="attr">size</span>: <span class="literal">true</span>&#125;)</span><br><span class="line">    .<span class="title function_">exec</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> canvas = res[<span class="number">0</span>].<span class="property">node</span></span><br><span class="line">      <span class="keyword">const</span> ctx = canvas.<span class="title function_">getContext</span>(<span class="string">&#x27;2d&#x27;</span>)</span><br><span class="line">      <span class="keyword">const</span> dpr = wx.<span class="title function_">getSystemInfoSync</span>().<span class="property">pixelRatio</span></span><br><span class="line">      <span class="keyword">const</span> width = res[<span class="number">0</span>].<span class="property">width</span></span><br><span class="line">      <span class="keyword">const</span> height = res[<span class="number">0</span>].<span class="property">height</span></span><br><span class="line">      canvas.<span class="property">width</span> = width * dpr</span><br><span class="line">      canvas.<span class="property">height</span> = height * dpr</span><br><span class="line">      ctx.<span class="title function_">clearRect</span>(<span class="number">0</span>, <span class="number">0</span>, width, height)</span><br><span class="line">      <span class="comment">// 绘制底部白色背景</span></span><br><span class="line">      ctx.<span class="title function_">save</span>()</span><br><span class="line">      ctx.<span class="property">fillStyle</span>= <span class="string">&#x27;white&#x27;</span></span><br><span class="line">      ctx.<span class="title function_">fillRect</span>(<span class="number">150</span>,<span class="number">200</span>,<span class="number">800</span>,<span class="number">1000</span>)</span><br><span class="line">      ctx.<span class="title function_">restore</span>()</span><br><span class="line">      <span class="comment">// 绘制图片 rect 矩形路径,fillRect 绘制矩形填充颜色</span></span><br><span class="line">      <span class="comment">// drawImage(图,图的x,图的y,图的宽,图的高)</span></span><br><span class="line">      <span class="keyword">let</span> img = canvas.<span class="title function_">createImage</span>()</span><br><span class="line">      img.<span class="property">src</span>= <span class="variable language_">this</span>.<span class="property">data</span>.<span class="property">imgUrl</span>      </span><br><span class="line">      img.<span class="property">onload</span> =<span class="function">() =&gt;</span>&#123;</span><br><span class="line">        ctx.<span class="title function_">save</span>()</span><br><span class="line">        ctx.<span class="title function_">beginPath</span>()</span><br><span class="line">        ctx.<span class="title function_">rect</span>(<span class="number">150</span>,<span class="number">200</span>,<span class="number">800</span>,<span class="number">1000</span>)          </span><br><span class="line">        ctx.<span class="title function_">clip</span>()</span><br><span class="line">        ctx.<span class="title function_">drawImage</span>(img,<span class="number">0</span>,<span class="number">150</span>,<span class="number">1000</span>,<span class="number">550</span>)</span><br><span class="line">        ctx.<span class="title function_">closePath</span>()</span><br><span class="line">        ctx.<span class="title function_">restore</span>()</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 绘制文本</span></span><br><span class="line">      ctx.<span class="property">font</span>=<span class="string">&quot;40px Arial&quot;</span></span><br><span class="line">      ctx.<span class="title function_">fillText</span>(<span class="string">`N A M E: <span class="subst">$&#123;<span class="variable language_">this</span>.data.name&#125;</span>`</span>,<span class="number">200</span>,<span class="number">900</span>)</span><br><span class="line">      ctx.<span class="title function_">fillText</span>(<span class="string">`A D D R E S S: <span class="subst">$&#123;<span class="variable language_">this</span>.data.address&#125;</span>`</span>,<span class="number">200</span>,<span class="number">980</span>)</span><br><span class="line">      ctx.<span class="title function_">fillText</span>(<span class="string">`D E S C R I P T I O N: <span class="subst">$&#123;<span class="variable language_">this</span>.data.desc&#125;</span>`</span>,<span class="number">200</span>,<span class="number">1060</span>)</span><br><span class="line">      <span class="comment">// 绘制头像 bug</span></span><br><span class="line">      <span class="keyword">let</span> photo =  canvas.<span class="title function_">createImage</span>()</span><br><span class="line">      photo.<span class="property">src</span>= <span class="variable language_">this</span>.<span class="property">data</span>.<span class="property">photo</span> <span class="comment">// 绘制图片一定要加上这个</span></span><br><span class="line">      photo.<span class="property">onload</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        ctx.<span class="title function_">save</span>()</span><br><span class="line">        ctx.<span class="title function_">beginPath</span>()</span><br><span class="line">        ctx.<span class="title function_">arc</span>(<span class="number">830</span>,<span class="number">900</span>,<span class="number">100</span>,<span class="number">0</span>,<span class="number">2</span> * <span class="title class_">Math</span>.<span class="property">PI</span>)        </span><br><span class="line">        ctx.<span class="title function_">clip</span>()</span><br><span class="line">        ctx.<span class="title function_">drawImage</span>(photo,<span class="number">710</span>,<span class="number">800</span>,<span class="number">400</span>,<span class="number">400</span>)</span><br><span class="line">        ctx.<span class="title function_">closePath</span>()</span><br><span class="line">        ctx.<span class="title function_">restore</span>()</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">setData</span>(&#123;</span><br><span class="line">        canvas</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">saveImage</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 生成图片</span></span><br><span class="line">    <span class="keyword">const</span> canvas =  <span class="variable language_">this</span>.<span class="property">data</span></span><br><span class="line">    wx.<span class="title function_">showLoading</span>(&#123;<span class="attr">title</span>:<span class="string">&#x27;海报生成中...&#x27;</span>&#125;),</span><br><span class="line">    wx.<span class="title function_">canvasToTempFilePath</span>(&#123;</span><br><span class="line">      canvas,</span><br><span class="line">      <span class="attr">success</span>: <span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 生成的图片临时文件路径</span></span><br><span class="line">      <span class="keyword">const</span> tempFilePath = res.<span class="property">tempFilePath</span></span><br><span class="line">      wx.<span class="title function_">hideLoading</span>()</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">fail</span>: <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">        wx.<span class="title function_">hideLoading</span>()</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;保存失败，请重试!&#x27;</span>,err)</span><br><span class="line">      &#125;</span><br><span class="line">&#125;)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;应用场景：一般是需要生成海报时跳转到新页面，先看一下海报整体预览的效果，然后在点击这个页面的保存来保存海报&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;步骤&quot;&gt;&lt;a href=&quot;#步骤&quot; class=&quot;headerlink&quot; title=&quot;</summary>
      
    
    
    
    <category term="微信小程序" scheme="http://example.com/categories/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
    
    <category term="canvas" scheme="http://example.com/tags/canvas/"/>
    
  </entry>
  
  <entry>
    <title>微信小程序-富文本</title>
    <link href="http://example.com/2024/11/04/WeChatMini/%E5%AF%8C%E6%96%87%E6%9C%AC/"/>
    <id>http://example.com/2024/11/04/WeChatMini/%E5%AF%8C%E6%96%87%E6%9C%AC/</id>
    <published>2024-11-04T01:57:32.050Z</published>
    <updated>2025-06-30T07:26:00.008Z</updated>
    
    <content type="html"><![CDATA[<style>.en {  color: green;  font-weight: 600;}</style><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><ul><li>1.使用以封装好的<a link="https://jin-yufeng.gitee.io/mp-html/#/overview/quickstart" style="color: green;">mp-html 组件</a>,方便处理图片、视频，便于高效地开发</li><li>2.在要使用的页面的 json 文件中引入该组件</li><li>3.在 wxml 文件中使用，id 作为标识该组件的唯一标识， content 则是将 html 代码渲染出来的容器</li><li>4.使用 selectComponent(‘id’)获取组件实例</li><li>5.如果要处理富文本的而其中一个标签则需要有匹配规则</li><li>6.获取单个标签的，然后统一处理，在然后再替换回原来的 html 中</li></ul><h2 id="匹配规则"><a href="#匹配规则" class="headerlink" title="匹配规则"></a>匹配规则</h2><ul><li>图片的匹配规则： <span class="en"><code>/&lt;(img)[^&gt;]*&gt;/gi</code></span></li><li>匹配标签之间的文本: <span class="en"><code>/(?&lt;=&gt;)[^&gt;]+(?=&lt;[\/]?\w+.*&gt;)/g</code></span></li><li>视频的匹配规则: <span class="en"><code>/&lt;(video)[^&gt;]*&gt;/gi</code></span></li><li>空字符串的匹配规则: <span class="en"><code>/(\s)/g</code></span></li><li>过滤并做替换处理: <span class="en"><code>(html.match(reg) as RegExpMatchArray).toString().replace(&#39;,&#39; , &#39;&#39;)</code></span></li><li>遍历实例上的图片数组&#x2F;视频数组，进行处理:<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ctx.<span class="property">imgList</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">src: string, i: number ,array: any </span>) =&gt;</span> &#123;</span><br><span class="line">  array[i] = src.<span class="title function_">replace</span>(<span class="string">&#x27;thumb&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><ul><li><h3 id="文字换行"><a href="#文字换行" class="headerlink" title="文字换行"></a>文字换行</h3></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> statuslist = _buyCarList.<span class="title function_">map</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//有逗号分隔的情况</span></span><br><span class="line">  <span class="keyword">return</span> item.<span class="property">status</span>.<span class="title function_">split</span>(<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line"><span class="comment">//无逗号分隔的情况</span></span><br><span class="line">  <span class="comment">// if (item.status.length &gt; 5) &#123;</span></span><br><span class="line">  <span class="comment">//   const status1 = item.status.slice(0, 3)</span></span><br><span class="line">  <span class="comment">//   const status2 = item.status.slice(3)</span></span><br><span class="line">  <span class="comment">//   const status = status1.concat(&#x27;,&#x27;, status2).split(&#x27;,&#x27;)</span></span><br><span class="line">  <span class="comment">//   return status</span></span><br><span class="line">  <span class="comment">// &#125;</span></span><br><span class="line">  <span class="comment">// return [item.status]</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li><h3 id="去掉字符串文本的空格"><a href="#去掉字符串文本的空格" class="headerlink" title="去掉字符串文本的空格"></a>去掉字符串文本的空格</h3></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> reg = <span class="regexp">/(\s)/g</span></span><br><span class="line"><span class="keyword">let</span> title = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">if</span> (carModelName) &#123;</span><br><span class="line">  title = (carModelName).<span class="title function_">replaceAll</span>(reg, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;style&gt;
.en {
  color: green;
  font-weight: 600;
}
&lt;/style&gt;


&lt;h2 id=&quot;步骤&quot;&gt;&lt;a href=&quot;#步骤&quot; class=&quot;headerlink&quot; title=&quot;步骤&quot;&gt;&lt;/a&gt;步骤&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;1</summary>
      
    
    
    
    <category term="微信小程序" scheme="http://example.com/categories/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
    
    <category term="富文本" scheme="http://example.com/tags/%E5%AF%8C%E6%96%87%E6%9C%AC/"/>
    
  </entry>
  
  <entry>
    <title>微信小程序-复杂组件的应用</title>
    <link href="http://example.com/2024/11/04/WeChatMini/%E5%A4%8D%E6%9D%82%E7%BB%84%E4%BB%B6%E7%9A%84%E5%BA%94%E7%94%A8/"/>
    <id>http://example.com/2024/11/04/WeChatMini/%E5%A4%8D%E6%9D%82%E7%BB%84%E4%BB%B6%E7%9A%84%E5%BA%94%E7%94%A8/</id>
    <published>2024-11-04T01:57:32.033Z</published>
    <updated>2024-11-05T06:28:41.131Z</updated>
    
    <content type="html"><![CDATA[<h2 id="复杂组件—日历组件的多页面不同应用解决方案"><a href="#复杂组件—日历组件的多页面不同应用解决方案" class="headerlink" title="复杂组件—日历组件的多页面不同应用解决方案"></a>复杂组件—日历组件的多页面不同应用解决方案</h2><h3 id="现状"><a href="#现状" class="headerlink" title="现状"></a>现状</h3><ul><li>已经封装完的日历组件且已经应用与多个页面(此时仅有一套组件方案)</li></ul><h3 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h3><ul><li>该日历组件要应用与其它页面(两个)但展示的效果和功能与原方案不同</li></ul><h3 id="冲突"><a href="#冲突" class="headerlink" title="冲突"></a>冲突</h3><ul><li>应用该组件新方案的两个页面之间,一个需要初始化数据,一个不需要,存在冲突</li></ul><h3 id="难点"><a href="#难点" class="headerlink" title="难点:"></a>难点:</h3><ul><li>难点一: 原来的日历组件使用的formatter,与现在页面使用的formatter不同</li><li>难点二: 选择的文字字段展示与原先不同</li><li>难点三: 可选择日期,选择之后不能在选择同一天(不可重叠)</li><li>难点三: 选择预约页面:一开始空,打开后点击任意日期,没有点击确定时,关闭弹窗,在打开弹窗后,原先选中的数据要保留,选中的那天日期,选中文本,上下午状态和确定按钮,都要保留被选中的状态,和可以确定的状态</li><li>难点四: 更改预约页面的弹窗: 一打开为预约的那个时间(不管当天且上下午状态是否已经约满),状态都为选中的状态,点击其它可选择日期,原先的预约时间约满的禁止不可选</li><li>难点五: 点击更改预约时间后,在点击其它时间,不确定,关掉弹窗,在点击弹窗,状态应默认为对应预约时间的选择状态</li></ul><h3 id="解决"><a href="#解决" class="headerlink" title="解决:"></a>解决:</h3><ul><li>如果不确定的话,可以先把原组件中的formatter逻辑存放在一个空白处,然后开始写新方案的formatter,确保实现后把新方案formatter存起来,然后把原来的formatter还原.</li><li>然后把新方案的formatter写在页面中,通过组件传值的方式传给组件,组件初始化时通过this.data拿到数据后判断是否存在传过来的formatter,有就将这个新的传给formatter,无就用原先的formatter.(formatter在组件类型为null)</li><li>在页面中直接通过判断按钮是否选择和状态来判断上下午状态并且传给组件,组件接收后通过判断是否存在这一字段来将这一字段添加到原来的选择文本字段(原来 +&#x3D; 新的),需要监听文本字段的变化,日期仍然是this.data.的日期(选中日期)</li><li>在组件处理选择日期的函数中判断,如果是同一天就返回</li><li>const calendarComponent &#x3D; this.selectComponent(‘#calendar’)</li><li>calendarComponent.reset()</li><li>在组件关闭弹窗处,不能初始化数据,再点开时要把需要拿到的状态获取到</li><li>在组件properties中的初始化时间函数要监听数据,重新获取已经处理的文本字段,日期仍然时预约那天(date)</li></ul><h2 id="checkbox样式问题"><a href="#checkbox样式问题" class="headerlink" title="checkbox样式问题"></a>checkbox样式问题</h2><p><img src="/../../img/WeChatMini/btn%E6%A0%B7%E5%BC%8F1.png" alt="btn样式"  data-tag='post-image' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p><p>当伪类的三角形随着机型,位置浮动时,可在checkbox那添加overflow:hiddden</p><h3 id="页面"><a href="#页面" class="headerlink" title="页面"></a>页面</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">checkbox</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">class</span>=<span class="string">&quot;checkbox &#123;&#123; isCheckAm &amp;&amp; isAm === amType.MORNING ? &#x27;is_checked_am&#x27; : &#x27;&#x27; &#125;&#125;&quot;</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">value</span>=<span class="string">&quot;&#123;&#123; isAm === amType.MORNING &#125;&#125;&quot;</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">mark:isAm</span>=<span class="string">&quot;&#123;&#123; amType.MORNING &#125;&#125;&quot;</span></span></span><br><span class="line"><span class="tag">  &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;iconfont icon-checkgou tick&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;car-subscribe-form-grid-view-daybtn&quot;</span>&gt;</span>上午<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">checkbox</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="样式"><a href="#样式" class="headerlink" title="样式"></a>样式</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line">checkbox &#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">200</span>rpx;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">88</span>rpx;</span><br><span class="line"><span class="attribute">border-radius</span>: <span class="number">4</span>rpx;</span><br><span class="line"><span class="attribute">border</span>: <span class="number">2</span>rpx solid <span class="built_in">var</span>(--border-line-color);</span><br><span class="line"><span class="attribute">margin-top</span>: <span class="number">24</span>rpx;</span><br><span class="line"><span class="attribute">color</span>: <span class="built_in">var</span>(--text-<span class="number">1</span>-color);</span><br><span class="line"><span class="attribute">background</span>: <span class="built_in">var</span>(--white);</span><br><span class="line">&#125;</span><br><span class="line">checkbox<span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">0</span>rpx;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">0</span>rpx;</span><br><span class="line">  <span class="attribute">border-bottom</span>: <span class="number">60</span>rpx solid <span class="built_in">var</span>(--border-line-color);</span><br><span class="line">  <span class="attribute">border-left</span>: <span class="number">60</span>rpx solid transparent;</span><br><span class="line">  <span class="attribute">margin-left</span>: -<span class="number">47</span>rpx;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">30</span>rpx;</span><br><span class="line">&#125;</span><br><span class="line">checkbox<span class="selector-pseudo">:first-child</span> &#123;</span><br><span class="line">  <span class="attribute">margin-right</span>: <span class="number">22</span>rpx;</span><br><span class="line">  <span class="attribute">margin-left</span>: <span class="number">40</span>rpx;</span><br><span class="line">&#125;</span><br><span class="line">checkbox <span class="selector-class">.wx-checkbox-input</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: none;</span><br><span class="line">   <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">checkbox <span class="selector-class">.wx-checkbox-input</span><span class="selector-class">.wx-checkbox-input-checked</span> &#123;</span><br><span class="line">  <span class="comment">/* checkbox 被选中后前面选项框的背景样式 */</span></span><br><span class="line">  <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">checkbox <span class="selector-class">.wx-checkbox-input</span><span class="selector-class">.wx-checkbox-input-checked</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>:<span class="number">0</span>rpx;</span><br><span class="line">  <span class="attribute">height</span>:<span class="number">0</span>rpx;</span><br><span class="line">  <span class="attribute">font-size</span>:<span class="number">0</span>;</span><br><span class="line">  <span class="attribute">color</span>:<span class="number">#fff</span>;</span><br><span class="line">  <span class="attribute">background-color</span>:<span class="number">#fff</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.is_checked_am</span>&#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">2</span>rpx solid <span class="built_in">var</span>(--primary-color) <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.is_checked_am</span><span class="selector-pseudo">::after</span>&#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">0</span>rpx;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">0</span>rpx;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">border-bottom</span>: <span class="number">60</span>rpx solid <span class="built_in">var</span>(--primary-color);</span><br><span class="line">  <span class="attribute">border-left</span>: <span class="number">60</span>rpx solid transparent;</span><br><span class="line">  <span class="attribute">margin-left</span>: -<span class="number">47</span>rpx;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">30</span>rpx;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.icon-checkgou</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">padding-left</span>: <span class="number">157</span>rpx;</span><br><span class="line">  <span class="attribute">padding-top</span>: <span class="number">100</span>rpx;</span><br><span class="line">  <span class="attribute">color</span>: white;</span><br><span class="line">  <span class="attribute">z-index</span>: <span class="number">1000</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.tick</span> &#123;</span><br><span class="line">  <span class="attribute">padding-top</span>: <span class="number">56</span>rpx <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.car-subscribe-form-grid-view-daybtn</span> &#123;</span><br><span class="line">  <span class="attribute">padding-left</span>: <span class="number">20</span>rpx;</span><br><span class="line">  <span class="attribute">padding-top</span>: <span class="number">24</span>rpx;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">160</span>rpx;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">26</span>rpx;</span><br><span class="line">  <span class="attribute">text-align</span>: left;</span><br><span class="line">  <span class="attribute">word-break</span>: break-all;</span><br><span class="line">  <span class="attribute">z-index</span>: <span class="number">50</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="calendar的reset"><a href="#calendar的reset" class="headerlink" title="calendar的reset()"></a>calendar的reset()</h2><p>选中日历的某个日期，重置选中的日期到默认值</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;复杂组件—日历组件的多页面不同应用解决方案&quot;&gt;&lt;a href=&quot;#复杂组件—日历组件的多页面不同应用解决方案&quot; class=&quot;headerlink&quot; title=&quot;复杂组件—日历组件的多页面不同应用解决方案&quot;&gt;&lt;/a&gt;复杂组件—日历组件的多页面不同应用解决方案&lt;/</summary>
      
    
    
    
    <category term="微信小程序" scheme="http://example.com/categories/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
    
    <category term="checkbox样式修改" scheme="http://example.com/tags/checkbox%E6%A0%B7%E5%BC%8F%E4%BF%AE%E6%94%B9/"/>
    
    <category term="问题与方案" scheme="http://example.com/tags/%E9%97%AE%E9%A2%98%E4%B8%8E%E6%96%B9%E6%A1%88/"/>
    
  </entry>
  
</feed>
